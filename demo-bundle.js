/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * This software was developed at the National Institute of Standards and
	 * Technology by employees of the Federal Government in the course of
	 * their official duties. Pursuant to title 17 Section 105 of the United
	 * States Code this software is not subject to copyright protection and is
	 * in the public domain. This software is an experimental system. NIST assumes
	 * no responsibility whatsoever for its use by other parties, and makes no
	 * guarantees, expressed or implied, about its quality, reliability, or
	 * any other characteristic. We would appreciate acknowledgement if the
	 * software is used.
	 */

	/**
	 *
	 * @author Antoine Vandecreme <antoine.vandecreme@nist.gov>
	 */

	__webpack_require__(2);
	__webpack_require__(3);

	var $ = __webpack_require__(4);
	__webpack_require__(5);
	var Spinner = __webpack_require__(6);
	var SpinnerSlider = __webpack_require__(7);

	var OpenSeadragon = __webpack_require__(8);
	__webpack_require__(9);
	var viewer = new OpenSeadragon({
	    id: 'openseadragon',
	    prefixUrl: 'images/',
	    tileSources: '//openseadragon.github.io/example-images/highsmith/highsmith.dzi',
	    crossOriginPolicy: 'Anonymous'
	});

	// Prevent Caman from caching the canvas because without this:
	// 1. We have a memory leak
	// 2. Non-caman filters in between 2 camans filters get ignored.
	var caman = Caman;
	caman.Store.put = function() {};

	// List of filters with their templates.
	var availableFilters = [
	    {
	        name: 'Invert',
	        generate: function() {
	            return {
	                html: '',
	                getParams: function() {
	                    return '';
	                },
	                getFilter: function() {
	                    /*eslint new-cap: 0*/
	                    return OpenSeadragon.Filters.INVERT();
	                },
	                sync: true
	            };
	        }
	    }, {
	        name: 'Colorize',
	        help: 'The adjustment range (strength) is from 0 to 100.' +
	            'The higher the value, the closer the colors in the ' +
	            'image shift towards the given adjustment color.' +
	            'Color values are between 0 to 255',
	        generate: function(updateCallback) {
	            var redSpinnerId = 'redSpinner-' + idIncrement;
	            var greenSpinnerId = 'greenSpinner-' + idIncrement;
	            var blueSpinnerId = 'blueSpinner-' + idIncrement;
	            var strengthSpinnerId = 'strengthSpinner-' + idIncrement;
	            /*eslint max-len: 0*/
	            var $html = $('<div class="wdzt-table-layout">' +
	                '<div class="wdzt-row-layout">' +
	                '    <div class="wdzt-cell-layout">' +
	                '        Red: <span id="' + redSpinnerId + '"></span>' +
	                '    </div>' +
	                '    <div class="wdzt-cell-layout">' +
	                '        Green: <span id="' + greenSpinnerId + '"></span>' +
	                '    </div>' +
	                '    <div class="wdzt-cell-layout">' +
	                '        Blue: <span id="' + blueSpinnerId + '"></span>' +
	                '    </div>' +
	                '    <div class="wdzt-cell-layout">' +
	                '        Strength: <span id="' + strengthSpinnerId + '"></span>' +
	                '    </div>' +
	                '</div>' +
	                '</div>');
	            var redSpinner = new Spinner({
	                $element: $html.find('#' + redSpinnerId),
	                init: 100,
	                min: 0,
	                max: 255,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            var greenSpinner = new Spinner({
	                $element: $html.find('#' + greenSpinnerId),
	                init: 20,
	                min: 0,
	                max: 255,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            var blueSpinner = new Spinner({
	                $element: $html.find('#' + blueSpinnerId),
	                init: 20,
	                min: 0,
	                max: 255,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            var strengthSpinner = new Spinner({
	                $element: $html.find('#' + strengthSpinnerId),
	                init: 50,
	                min: 0,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    var red = redSpinner.getValue();
	                    var green = greenSpinner.getValue();
	                    var blue = blueSpinner.getValue();
	                    var strength = strengthSpinner.getValue();
	                    return 'R: ' + red + ' G: ' + green + ' B: ' + blue +
	                        ' S: ' + strength;
	                },
	                getFilter: function() {
	                    var red = redSpinner.getValue();
	                    var green = greenSpinner.getValue();
	                    var blue = blueSpinner.getValue();
	                    var strength = strengthSpinner.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.colorize(red, green, blue, strength);
	                            this.render(callback);
	                        });
	                    };
	                }
	            };
	        }
	    }, {
      name: 'Colormap', generate: 

        function (updateCallback) {
          var cmaps = {
            aCm: [[0, 0, 0], [0, 4, 0], [0, 8, 0], [0, 12, 0], [0, 16, 0], [0, 20, 0], [0, 24, 0], [0, 28, 0], [0, 32, 0], [0, 36, 0], [0, 40, 0], [0, 44, 0], [0, 48, 0], [0, 52, 0], [0, 56, 0], [0, 60, 0], [0, 64, 0], [0, 68, 0], [0, 72, 0], [0, 76, 0], [0, 80, 0], [0, 85, 0], [0, 89, 0], [0, 93, 0], [0, 97, 0], [0, 101, 0], [0, 105, 0], [0, 109, 0], [0, 113, 0], [0, 117, 0], [0, 121, 0], [0, 125, 0], [0, 129, 2], [0, 133, 5], [0, 137, 7], [0, 141, 10], [0, 145, 13], [0, 149, 15], [0, 153, 18], [0, 157, 21], [0, 161, 23], [0, 165, 26], [0, 170, 29], [0, 174, 31], [0, 178, 34], [0, 182, 37], [0, 186, 39], [0, 190, 42], [0, 194, 45], [0, 198, 47], [0, 202, 50], [0, 206, 53], [0, 210, 55], [0, 214, 58], [0, 218, 61], [0, 222, 63], [0, 226, 66], [0, 230, 69], [0, 234, 71], [0, 238, 74], [0, 242, 77], [0, 246, 79], [0, 250, 82], [0, 255, 85], [3, 251, 87], [7, 247, 90], [11, 243, 92], [15, 239, 95], [19, 235, 98], [23, 231, 100], [27, 227, 103], [31, 223, 106], [35, 219, 108], [39, 215, 111], [43, 211, 114], [47, 207, 116], [51, 203, 119], [55, 199, 122], [59, 195, 124], [63, 191, 127], [67, 187, 130], [71, 183, 132], [75, 179, 135], [79, 175, 138], [83, 171, 140], [87, 167, 143], [91, 163, 146], [95, 159, 148], [99, 155, 151], [103, 151, 154], [107, 147, 156], [111, 143, 159], [115, 139, 162], [119, 135, 164], [123, 131, 167], [127, 127, 170], [131, 123, 172], [135, 119, 175], [139, 115, 177], [143, 111, 180], [147, 107, 183], [151, 103, 185], [155, 99, 188], [159, 95, 191], [163, 91, 193], [167, 87, 196], [171, 83, 199], [175, 79, 201], [179, 75, 204], [183, 71, 207], [187, 67, 209], [191, 63, 212], [195, 59, 215], [199, 55, 217], [203, 51, 220], [207, 47, 223], [211, 43, 225], [215, 39, 228], [219, 35, 231], [223, 31, 233], [227, 27, 236], [231, 23, 239], [235, 19, 241], [239, 15, 244], [243, 11, 247], [247, 7, 249], [251, 3, 252], [255, 0, 255], [255, 0, 251], [255, 0, 247], [255, 0, 244], [255, 0, 240], [255, 0, 237], [255, 0, 233], [255, 0, 230], [255, 0, 226], [255, 0, 223], [255, 0, 219], [255, 0, 216], [255, 0, 212], [255, 0, 208], [255, 0, 205], [255, 0, 201], [255, 0, 198], [255, 0, 194], [255, 0, 191], [255, 0, 187], [255, 0, 184], [255, 0, 180], [255, 0, 177], [255, 0, 173], [255, 0, 170], [255, 0, 166], [255, 0, 162], [255, 0, 159], [255, 0, 155], [255, 0, 152], [255, 0, 148], [255, 0, 145], [255, 0, 141], [255, 0, 138], [255, 0, 134], [255, 0, 131], [255, 0, 127], [255, 0, 123], [255, 0, 119], [255, 0, 115], [255, 0, 112], [255, 0, 108], [255, 0, 104], [255, 0, 100], [255, 0, 96], [255, 0, 92], [255, 0, 88], [255, 0, 85], [255, 0, 81], [255, 0, 77], [255, 0, 73], [255, 0, 69], [255, 0, 65], [255, 0, 61], [255, 0, 57], [255, 0, 54], [255, 0, 50], [255, 0, 46], [255, 0, 42], [255, 0, 38], [255, 0, 34], [255, 0, 30], [255, 0, 27], [255, 0, 23], [255, 0, 19], [255, 0, 15], [255, 0, 11], [255, 0, 7], [255, 0, 3], [255, 0, 0], [255, 4, 0], [255, 8, 0], [255, 12, 0], [255, 17, 0], [255, 21, 0], [255, 25, 0], [255, 30, 0], [255, 34, 0], [255, 38, 0], [255, 43, 0], [255, 47, 0], [255, 51, 0], [255, 56, 0], [255, 60, 0], [255, 64, 0], [255, 69, 0], [255, 73, 0], [255, 77, 0], [255, 82, 0], [255, 86, 0], [255, 90, 0], [255, 95, 0], [255, 99, 0], [255, 103, 0], [255, 108, 0], [255, 112, 0], [255, 116, 0], [255, 121, 0], [255, 125, 0], [255, 129, 0], [255, 133, 0], [255, 138, 0], [255, 142, 0], [255, 146, 0], [255, 151, 0], [255, 155, 0], [255, 159, 0], [255, 164, 0], [255, 168, 0], [255, 172, 0], [255, 177, 0], [255, 181, 0], [255, 185, 0], [255, 190, 0], [255, 194, 0], [255, 198, 0], [255, 203, 0], [255, 207, 0], [255, 211, 0], [255, 216, 0], [255, 220, 0], [255, 224, 0], [255, 229, 0], [255, 233, 0], [255, 237, 0], [255, 242, 0], [255, 246, 0], [255, 250, 0], [255, 255, 0]],
            bCm: [[0, 0, 0], [0, 0, 4], [0, 0, 8], [0, 0, 12], [0, 0, 16], [0, 0, 20], [0, 0, 24], [0, 0, 28], [0, 0, 32], [0, 0, 36], [0, 0, 40], [0, 0, 44], [0, 0, 48], [0, 0, 52], [0, 0, 56], [0, 0, 60], [0, 0, 64], [0, 0, 68], [0, 0, 72], [0, 0, 76], [0, 0, 80], [0, 0, 85], [0, 0, 89], [0, 0, 93], [0, 0, 97], [0, 0, 101], [0, 0, 105], [0, 0, 109], [0, 0, 113], [0, 0, 117], [0, 0, 121], [0, 0, 125], [0, 0, 129], [0, 0, 133], [0, 0, 137], [0, 0, 141], [0, 0, 145], [0, 0, 149], [0, 0, 153], [0, 0, 157], [0, 0, 161], [0, 0, 165], [0, 0, 170], [0, 0, 174], [0, 0, 178], [0, 0, 182], [0, 0, 186], [0, 0, 190], [0, 0, 194], [0, 0, 198], [0, 0, 202], [0, 0, 206], [0, 0, 210], [0, 0, 214], [0, 0, 218], [0, 0, 222], [0, 0, 226], [0, 0, 230], [0, 0, 234], [0, 0, 238], [0, 0, 242], [0, 0, 246], [0, 0, 250], [0, 0, 255], [3, 0, 251], [7, 0, 247], [11, 0, 243], [15, 0, 239], [19, 0, 235], [23, 0, 231], [27, 0, 227], [31, 0, 223], [35, 0, 219], [39, 0, 215], [43, 0, 211], [47, 0, 207], [51, 0, 203], [55, 0, 199], [59, 0, 195], [63, 0, 191], [67, 0, 187], [71, 0, 183], [75, 0, 179], [79, 0, 175], [83, 0, 171], [87, 0, 167], [91, 0, 163], [95, 0, 159], [99, 0, 155], [103, 0, 151], [107, 0, 147], [111, 0, 143], [115, 0, 139], [119, 0, 135], [123, 0, 131], [127, 0, 127], [131, 0, 123], [135, 0, 119], [139, 0, 115], [143, 0, 111], [147, 0, 107], [151, 0, 103], [155, 0, 99], [159, 0, 95], [163, 0, 91], [167, 0, 87], [171, 0, 83], [175, 0, 79], [179, 0, 75], [183, 0, 71], [187, 0, 67], [191, 0, 63], [195, 0, 59], [199, 0, 55], [203, 0, 51], [207, 0, 47], [211, 0, 43], [215, 0, 39], [219, 0, 35], [223, 0, 31], [227, 0, 27], [231, 0, 23], [235, 0, 19], [239, 0, 15], [243, 0, 11], [247, 0, 7], [251, 0, 3], [255, 0, 0], [255, 3, 0], [255, 7, 0], [255, 11, 0], [255, 15, 0], [255, 19, 0], [255, 23, 0], [255, 27, 0], [255, 31, 0], [255, 35, 0], [255, 39, 0], [255, 43, 0], [255, 47, 0], [255, 51, 0], [255, 55, 0], [255, 59, 0], [255, 63, 0], [255, 67, 0], [255, 71, 0], [255, 75, 0], [255, 79, 0], [255, 83, 0], [255, 87, 0], [255, 91, 0], [255, 95, 0], [255, 99, 0], [255, 103, 0], [255, 107, 0], [255, 111, 0], [255, 115, 0], [255, 119, 0], [255, 123, 0], [255, 127, 0], [255, 131, 0], [255, 135, 0], [255, 139, 0], [255, 143, 0], [255, 147, 0], [255, 151, 0], [255, 155, 0], [255, 159, 0], [255, 163, 0], [255, 167, 0], [255, 171, 0], [255, 175, 0], [255, 179, 0], [255, 183, 0], [255, 187, 0], [255, 191, 0], [255, 195, 0], [255, 199, 0], [255, 203, 0], [255, 207, 0], [255, 211, 0], [255, 215, 0], [255, 219, 0], [255, 223, 0], [255, 227, 0], [255, 231, 0], [255, 235, 0], [255, 239, 0], [255, 243, 0], [255, 247, 0], [255, 251, 0], [255, 255, 0], [255, 255, 3], [255, 255, 7], [255, 255, 11], [255, 255, 15], [255, 255, 19], [255, 255, 23], [255, 255, 27], [255, 255, 31], [255, 255, 35], [255, 255, 39], [255, 255, 43], [255, 255, 47], [255, 255, 51], [255, 255, 55], [255, 255, 59], [255, 255, 63], [255, 255, 67], [255, 255, 71], [255, 255, 75], [255, 255, 79], [255, 255, 83], [255, 255, 87], [255, 255, 91], [255, 255, 95], [255, 255, 99], [255, 255, 103], [255, 255, 107], [255, 255, 111], [255, 255, 115], [255, 255, 119], [255, 255, 123], [255, 255, 127], [255, 255, 131], [255, 255, 135], [255, 255, 139], [255, 255, 143], [255, 255, 147], [255, 255, 151], [255, 255, 155], [255, 255, 159], [255, 255, 163], [255, 255, 167], [255, 255, 171], [255, 255, 175], [255, 255, 179], [255, 255, 183], [255, 255, 187], [255, 255, 191], [255, 255, 195], [255, 255, 199], [255, 255, 203], [255, 255, 207], [255, 255, 211], [255, 255, 215], [255, 255, 219], [255, 255, 223], [255, 255, 227], [255, 255, 231], [255, 255, 235], [255, 255, 239], [255, 255, 243], [255, 255, 247], [255, 255, 251], [255, 255, 255]],
            bbCm: [[0, 0, 0], [2, 0, 0], [4, 0, 0], [6, 0, 0], [8, 0, 0], [10, 0, 0], [12, 0, 0], [14, 0, 0], [16, 0, 0], [18, 0, 0], [20, 0, 0], [22, 0, 0], [24, 0, 0], [26, 0, 0], [28, 0, 0], [30, 0, 0], [32, 0, 0], [34, 0, 0], [36, 0, 0], [38, 0, 0], [40, 0, 0], [42, 0, 0], [44, 0, 0], [46, 0, 0], [48, 0, 0], [50, 0, 0], [52, 0, 0], [54, 0, 0], [56, 0, 0], [58, 0, 0], [60, 0, 0], [62, 0, 0], [64, 0, 0], [66, 0, 0], [68, 0, 0], [70, 0, 0], [72, 0, 0], [74, 0, 0], [76, 0, 0], [78, 0, 0], [80, 0, 0], [82, 0, 0], [84, 0, 0], [86, 0, 0], [88, 0, 0], [90, 0, 0], [92, 0, 0], [94, 0, 0], [96, 0, 0], [98, 0, 0], [100, 0, 0], [102, 0, 0], [104, 0, 0], [106, 0, 0], [108, 0, 0], [110, 0, 0], [112, 0, 0], [114, 0, 0], [116, 0, 0], [118, 0, 0], [120, 0, 0], [122, 0, 0], [124, 0, 0], [126, 0, 0], [128, 1, 0], [130, 3, 0], [132, 5, 0], [134, 7, 0], [136, 9, 0], [138, 11, 0], [140, 13, 0], [142, 15, 0], [144, 17, 0], [146, 19, 0], [148, 21, 0], [150, 23, 0], [152, 25, 0], [154, 27, 0], [156, 29, 0], [158, 31, 0], [160, 33, 0], [162, 35, 0], [164, 37, 0], [166, 39, 0], [168, 41, 0], [170, 43, 0], [172, 45, 0], [174, 47, 0], [176, 49, 0], [178, 51, 0], [180, 53, 0], [182, 55, 0], [184, 57, 0], [186, 59, 0], [188, 61, 0], [190, 63, 0], [192, 65, 0], [194, 67, 0], [196, 69, 0], [198, 71, 0], [200, 73, 0], [202, 75, 0], [204, 77, 0], [206, 79, 0], [208, 81, 0], [210, 83, 0], [212, 85, 0], [214, 87, 0], [216, 89, 0], [218, 91, 0], [220, 93, 0], [222, 95, 0], [224, 97, 0], [226, 99, 0], [228, 101, 0], [230, 103, 0], [232, 105, 0], [234, 107, 0], [236, 109, 0], [238, 111, 0], [240, 113, 0], [242, 115, 0], [244, 117, 0], [246, 119, 0], [248, 121, 0], [250, 123, 0], [252, 125, 0], [255, 127, 0], [255, 129, 1], [255, 131, 3], [255, 133, 5], [255, 135, 7], [255, 137, 9], [255, 139, 11], [255, 141, 13], [255, 143, 15], [255, 145, 17], [255, 147, 19], [255, 149, 21], [255, 151, 23], [255, 153, 25], [255, 155, 27], [255, 157, 29], [255, 159, 31], [255, 161, 33], [255, 163, 35], [255, 165, 37], [255, 167, 39], [255, 169, 41], [255, 171, 43], [255, 173, 45], [255, 175, 47], [255, 177, 49], [255, 179, 51], [255, 181, 53], [255, 183, 55], [255, 185, 57], [255, 187, 59], [255, 189, 61], [255, 191, 63], [255, 193, 65], [255, 195, 67], [255, 197, 69], [255, 199, 71], [255, 201, 73], [255, 203, 75], [255, 205, 77], [255, 207, 79], [255, 209, 81], [255, 211, 83], [255, 213, 85], [255, 215, 87], [255, 217, 89], [255, 219, 91], [255, 221, 93], [255, 223, 95], [255, 225, 97], [255, 227, 99], [255, 229, 101], [255, 231, 103], [255, 233, 105], [255, 235, 107], [255, 237, 109], [255, 239, 111], [255, 241, 113], [255, 243, 115], [255, 245, 117], [255, 247, 119], [255, 249, 121], [255, 251, 123], [255, 253, 125], [255, 255, 127], [255, 255, 129], [255, 255, 131], [255, 255, 133], [255, 255, 135], [255, 255, 137], [255, 255, 139], [255, 255, 141], [255, 255, 143], [255, 255, 145], [255, 255, 147], [255, 255, 149], [255, 255, 151], [255, 255, 153], [255, 255, 155], [255, 255, 157], [255, 255, 159], [255, 255, 161], [255, 255, 163], [255, 255, 165], [255, 255, 167], [255, 255, 169], [255, 255, 171], [255, 255, 173], [255, 255, 175], [255, 255, 177], [255, 255, 179], [255, 255, 181], [255, 255, 183], [255, 255, 185], [255, 255, 187], [255, 255, 189], [255, 255, 191], [255, 255, 193], [255, 255, 195], [255, 255, 197], [255, 255, 199], [255, 255, 201], [255, 255, 203], [255, 255, 205], [255, 255, 207], [255, 255, 209], [255, 255, 211], [255, 255, 213], [255, 255, 215], [255, 255, 217], [255, 255, 219], [255, 255, 221], [255, 255, 223], [255, 255, 225], [255, 255, 227], [255, 255, 229], [255, 255, 231], [255, 255, 233], [255, 255, 235], [255, 255, 237], [255, 255, 239], [255, 255, 241], [255, 255, 243], [255, 255, 245], [255, 255, 247], [255, 255, 249], [255, 255, 251], [255, 255, 253], [255, 255, 255]],
            blueCm: [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 0, 9], [0, 0, 10], [0, 0, 11], [0, 0, 12], [0, 0, 13], [0, 0, 14], [0, 0, 15], [0, 0, 16], [0, 0, 17], [0, 0, 18], [0, 0, 19], [0, 0, 20], [0, 0, 21], [0, 0, 22], [0, 0, 23], [0, 0, 24], [0, 0, 25], [0, 0, 26], [0, 0, 27], [0, 0, 28], [0, 0, 29], [0, 0, 30], [0, 0, 31], [0, 0, 32], [0, 0, 33], [0, 0, 34], [0, 0, 35], [0, 0, 36], [0, 0, 37], [0, 0, 38], [0, 0, 39], [0, 0, 40], [0, 0, 41], [0, 0, 42], [0, 0, 43], [0, 0, 44], [0, 0, 45], [0, 0, 46], [0, 0, 47], [0, 0, 48], [0, 0, 49], [0, 0, 50], [0, 0, 51], [0, 0, 52], [0, 0, 53], [0, 0, 54], [0, 0, 55], [0, 0, 56], [0, 0, 57], [0, 0, 58], [0, 0, 59], [0, 0, 60], [0, 0, 61], [0, 0, 62], [0, 0, 63], [0, 0, 64], [0, 0, 65], [0, 0, 66], [0, 0, 67], [0, 0, 68], [0, 0, 69], [0, 0, 70], [0, 0, 71], [0, 0, 72], [0, 0, 73], [0, 0, 74], [0, 0, 75], [0, 0, 76], [0, 0, 77], [0, 0, 78], [0, 0, 79], [0, 0, 80], [0, 0, 81], [0, 0, 82], [0, 0, 83], [0, 0, 84], [0, 0, 85], [0, 0, 86], [0, 0, 87], [0, 0, 88], [0, 0, 89], [0, 0, 90], [0, 0, 91], [0, 0, 92], [0, 0, 93], [0, 0, 94], [0, 0, 95], [0, 0, 96], [0, 0, 97], [0, 0, 98], [0, 0, 99], [0, 0, 100], [0, 0, 101], [0, 0, 102], [0, 0, 103], [0, 0, 104], [0, 0, 105], [0, 0, 106], [0, 0, 107], [0, 0, 108], [0, 0, 109], [0, 0, 110], [0, 0, 111], [0, 0, 112], [0, 0, 113], [0, 0, 114], [0, 0, 115], [0, 0, 116], [0, 0, 117], [0, 0, 118], [0, 0, 119], [0, 0, 120], [0, 0, 121], [0, 0, 122], [0, 0, 123], [0, 0, 124], [0, 0, 125], [0, 0, 126], [0, 0, 127], [0, 0, 128], [0, 0, 129], [0, 0, 130], [0, 0, 131], [0, 0, 132], [0, 0, 133], [0, 0, 134], [0, 0, 135], [0, 0, 136], [0, 0, 137], [0, 0, 138], [0, 0, 139], [0, 0, 140], [0, 0, 141], [0, 0, 142], [0, 0, 143], [0, 0, 144], [0, 0, 145], [0, 0, 146], [0, 0, 147], [0, 0, 148], [0, 0, 149], [0, 0, 150], [0, 0, 151], [0, 0, 152], [0, 0, 153], [0, 0, 154], [0, 0, 155], [0, 0, 156], [0, 0, 157], [0, 0, 158], [0, 0, 159], [0, 0, 160], [0, 0, 161], [0, 0, 162], [0, 0, 163], [0, 0, 164], [0, 0, 165], [0, 0, 166], [0, 0, 167], [0, 0, 168], [0, 0, 169], [0, 0, 170], [0, 0, 171], [0, 0, 172], [0, 0, 173], [0, 0, 174], [0, 0, 175], [0, 0, 176], [0, 0, 177], [0, 0, 178], [0, 0, 179], [0, 0, 180], [0, 0, 181], [0, 0, 182], [0, 0, 183], [0, 0, 184], [0, 0, 185], [0, 0, 186], [0, 0, 187], [0, 0, 188], [0, 0, 189], [0, 0, 190], [0, 0, 191], [0, 0, 192], [0, 0, 193], [0, 0, 194], [0, 0, 195], [0, 0, 196], [0, 0, 197], [0, 0, 198], [0, 0, 199], [0, 0, 200], [0, 0, 201], [0, 0, 202], [0, 0, 203], [0, 0, 204], [0, 0, 205], [0, 0, 206], [0, 0, 207], [0, 0, 208], [0, 0, 209], [0, 0, 210], [0, 0, 211], [0, 0, 212], [0, 0, 213], [0, 0, 214], [0, 0, 215], [0, 0, 216], [0, 0, 217], [0, 0, 218], [0, 0, 219], [0, 0, 220], [0, 0, 221], [0, 0, 222], [0, 0, 223], [0, 0, 224], [0, 0, 225], [0, 0, 226], [0, 0, 227], [0, 0, 228], [0, 0, 229], [0, 0, 230], [0, 0, 231], [0, 0, 232], [0, 0, 233], [0, 0, 234], [0, 0, 235], [0, 0, 236], [0, 0, 237], [0, 0, 238], [0, 0, 239], [0, 0, 240], [0, 0, 241], [0, 0, 242], [0, 0, 243], [0, 0, 244], [0, 0, 245], [0, 0, 246], [0, 0, 247], [0, 0, 248], [0, 0, 249], [0, 0, 250], [0, 0, 251], [0, 0, 252], [0, 0, 253], [0, 0, 254], [0, 0, 255]],
            coolCm: [[0, 0, 0], [0, 0, 1], [0, 0, 3], [0, 0, 5], [0, 0, 7], [0, 0, 9], [0, 0, 11], [0, 0, 13], [0, 0, 15], [0, 0, 17], [0, 0, 18], [0, 0, 20], [0, 0, 22], [0, 0, 24], [0, 0, 26], [0, 0, 28], [0, 0, 30], [0, 0, 32], [0, 0, 34], [0, 0, 35], [0, 0, 37], [0, 0, 39], [0, 0, 41], [0, 0, 43], [0, 0, 45], [0, 0, 47], [0, 0, 49], [0, 0, 51], [0, 0, 52], [0, 0, 54], [0, 0, 56], [0, 0, 58], [0, 0, 60], [0, 0, 62], [0, 0, 64], [0, 0, 66], [0, 0, 68], [0, 0, 69], [0, 0, 71], [0, 0, 73], [0, 0, 75], [0, 0, 77], [0, 0, 79], [0, 0, 81], [0, 0, 83], [0, 0, 85], [0, 0, 86], [0, 0, 88], [0, 0, 90], [0, 0, 92], [0, 0, 94], [0, 0, 96], [0, 0, 98], [0, 0, 100], [0, 0, 102], [0, 0, 103], [0, 0, 105], [0, 1, 107], [0, 2, 109], [0, 4, 111], [0, 5, 113], [0, 6, 115], [0, 8, 117], [0, 9, 119], [0, 10, 120], [0, 12, 122], [0, 13, 124], [0, 14, 126], [0, 16, 128], [0, 17, 130], [0, 18, 132], [0, 20, 134], [0, 21, 136], [0, 23, 137], [0, 24, 139], [0, 25, 141], [0, 27, 143], [0, 28, 145], [1, 29, 147], [1, 31, 149], [1, 32, 151], [1, 33, 153], [1, 35, 154], [2, 36, 156], [2, 37, 158], [2, 39, 160], [2, 40, 162], [2, 42, 164], [3, 43, 166], [3, 44, 168], [3, 46, 170], [3, 47, 171], [4, 48, 173], [4, 50, 175], [4, 51, 177], [4, 52, 179], [4, 54, 181], [5, 55, 183], [5, 56, 185], [5, 58, 187], [5, 59, 188], [5, 61, 190], [6, 62, 192], [6, 63, 194], [6, 65, 196], [6, 66, 198], [7, 67, 200], [7, 69, 202], [7, 70, 204], [7, 71, 205], [7, 73, 207], [8, 74, 209], [8, 75, 211], [8, 77, 213], [8, 78, 215], [8, 80, 217], [9, 81, 219], [9, 82, 221], [9, 84, 222], [9, 85, 224], [9, 86, 226], [10, 88, 228], [10, 89, 230], [10, 90, 232], [10, 92, 234], [11, 93, 236], [11, 94, 238], [11, 96, 239], [11, 97, 241], [11, 99, 243], [12, 100, 245], [12, 101, 247], [12, 103, 249], [12, 104, 251], [12, 105, 253], [13, 107, 255], [13, 108, 255], [13, 109, 255], [13, 111, 255], [14, 112, 255], [14, 113, 255], [14, 115, 255], [14, 116, 255], [14, 118, 255], [15, 119, 255], [15, 120, 255], [15, 122, 255], [15, 123, 255], [15, 124, 255], [16, 126, 255], [16, 127, 255], [16, 128, 255], [16, 130, 255], [17, 131, 255], [17, 132, 255], [17, 134, 255], [17, 135, 255], [17, 136, 255], [18, 138, 255], [18, 139, 255], [18, 141, 255], [18, 142, 255], [18, 143, 255], [19, 145, 255], [19, 146, 255], [19, 147, 255], [19, 149, 255], [19, 150, 255], [20, 151, 255], [20, 153, 255], [20, 154, 255], [20, 155, 255], [21, 157, 255], [21, 158, 255], [21, 160, 255], [21, 161, 255], [21, 162, 255], [22, 164, 255], [22, 165, 255], [22, 166, 255], [22, 168, 255], [22, 169, 255], [23, 170, 255], [23, 172, 255], [23, 173, 255], [23, 174, 255], [24, 176, 255], [24, 177, 255], [24, 179, 255], [24, 180, 255], [24, 181, 255], [25, 183, 255], [25, 184, 255], [25, 185, 255], [29, 187, 255], [32, 188, 255], [36, 189, 255], [40, 191, 255], [44, 192, 255], [47, 193, 255], [51, 195, 255], [55, 196, 255], [58, 198, 255], [62, 199, 255], [66, 200, 255], [69, 202, 255], [73, 203, 255], [77, 204, 255], [81, 206, 255], [84, 207, 255], [88, 208, 255], [92, 210, 255], [95, 211, 255], [99, 212, 255], [103, 214, 255], [106, 215, 255], [110, 217, 255], [114, 218, 255], [118, 219, 255], [121, 221, 255], [125, 222, 255], [129, 223, 255], [132, 225, 255], [136, 226, 255], [140, 227, 255], [143, 229, 255], [147, 230, 255], [151, 231, 255], [155, 233, 255], [158, 234, 255], [162, 236, 255], [166, 237, 255], [169, 238, 255], [173, 240, 255], [177, 241, 255], [180, 242, 255], [184, 244, 255], [188, 245, 255], [192, 246, 255], [195, 248, 255], [199, 249, 255], [203, 250, 255], [206, 252, 255], [210, 253, 255], [214, 255, 255], [217, 255, 255], [221, 255, 255], [225, 255, 255], [229, 255, 255], [232, 255, 255], [236, 255, 255], [240, 255, 255], [243, 255, 255], [247, 255, 255], [251, 255, 255], [255, 255, 255]],
            cubehelix0Cm: [[0, 0, 0], [2, 1, 2], [5, 2, 5], [5, 2, 5], [6, 2, 6], [7, 2, 7], [10, 3, 10], [12, 5, 12], [13, 5, 14], [14, 5, 16], [15, 5, 17], [16, 6, 20], [17, 7, 22], [18, 8, 24], [19, 9, 26], [20, 10, 28], [21, 11, 30], [22, 12, 33], [22, 13, 34], [22, 14, 36], [22, 15, 38], [24, 16, 40], [25, 17, 43], [25, 18, 45], [25, 19, 46], [25, 20, 48], [25, 22, 50], [25, 23, 51], [25, 25, 53], [25, 26, 54], [25, 28, 56], [25, 28, 57], [25, 29, 59], [25, 30, 61], [25, 33, 62], [25, 35, 63], [25, 36, 65], [25, 37, 67], [25, 38, 68], [25, 40, 70], [25, 43, 71], [24, 45, 72], [23, 46, 73], [22, 48, 73], [22, 49, 75], [22, 51, 76], [22, 52, 76], [22, 54, 76], [22, 56, 76], [22, 57, 77], [22, 59, 78], [22, 61, 79], [21, 63, 79], [20, 66, 79], [20, 67, 79], [20, 68, 79], [20, 68, 79], [20, 71, 79], [20, 73, 79], [20, 75, 78], [20, 77, 77], [20, 79, 76], [20, 80, 76], [20, 81, 76], [21, 83, 75], [22, 85, 74], [22, 86, 73], [22, 89, 72], [22, 91, 71], [23, 92, 71], [24, 93, 71], [25, 94, 71], [26, 96, 70], [28, 99, 68], [28, 100, 68], [29, 101, 67], [30, 102, 66], [31, 102, 65], [32, 103, 64], [33, 104, 63], [35, 105, 62], [38, 107, 61], [39, 107, 60], [39, 108, 59], [40, 109, 58], [43, 110, 57], [45, 112, 56], [47, 113, 55], [49, 113, 54], [51, 114, 53], [54, 116, 52], [58, 117, 51], [60, 117, 50], [62, 117, 49], [63, 117, 48], [66, 118, 48], [68, 119, 48], [71, 119, 48], [73, 119, 48], [76, 119, 48], [79, 120, 47], [81, 121, 46], [84, 122, 45], [87, 122, 45], [91, 122, 45], [94, 122, 46], [96, 122, 47], [99, 122, 48], [103, 122, 48], [107, 122, 48], [109, 122, 49], [112, 122, 50], [114, 122, 51], [118, 122, 52], [122, 122, 53], [124, 122, 54], [127, 122, 55], [130, 122, 56], [133, 122, 57], [137, 122, 58], [140, 122, 60], [142, 122, 62], [145, 122, 63], [149, 122, 66], [153, 122, 68], [155, 121, 70], [158, 120, 72], [160, 119, 73], [162, 119, 75], [164, 119, 77], [165, 119, 79], [169, 119, 81], [173, 119, 84], [175, 119, 86], [176, 119, 89], [178, 119, 91], [181, 119, 95], [183, 119, 99], [186, 120, 102], [188, 121, 104], [191, 122, 107], [192, 122, 110], [193, 122, 114], [195, 122, 117], [197, 122, 119], [198, 122, 122], [200, 122, 126], [201, 122, 130], [202, 123, 132], [203, 124, 135], [204, 124, 137], [204, 125, 141], [205, 126, 144], [206, 127, 147], [207, 127, 151], [209, 127, 155], [209, 128, 158], [210, 129, 160], [211, 130, 163], [211, 131, 167], [211, 132, 170], [211, 133, 173], [211, 134, 175], [211, 135, 178], [211, 136, 182], [211, 137, 186], [211, 138, 188], [211, 139, 191], [211, 140, 193], [211, 142, 196], [211, 145, 198], [210, 146, 201], [209, 147, 204], [209, 147, 206], [209, 150, 209], [209, 153, 211], [208, 153, 213], [207, 154, 215], [206, 155, 216], [206, 157, 218], [206, 158, 220], [206, 160, 221], [205, 163, 224], [204, 165, 226], [203, 167, 228], [202, 169, 230], [201, 170, 232], [201, 172, 233], [201, 173, 234], [200, 175, 235], [199, 176, 236], [198, 178, 237], [197, 181, 238], [196, 183, 239], [196, 185, 239], [196, 187, 239], [196, 188, 239], [195, 191, 240], [193, 193, 242], [193, 194, 242], [193, 195, 242], [193, 196, 242], [193, 198, 242], [193, 199, 242], [193, 201, 242], [193, 204, 242], [193, 206, 242], [193, 208, 242], [193, 209, 242], [193, 211, 242], [193, 212, 242], [193, 214, 242], [194, 215, 242], [195, 217, 242], [196, 219, 242], [196, 220, 242], [196, 221, 242], [197, 223, 241], [198, 225, 240], [198, 226, 239], [200, 228, 239], [201, 229, 239], [202, 230, 239], [203, 231, 239], [204, 232, 239], [205, 233, 239], [206, 234, 239], [207, 235, 239], [208, 236, 239], [209, 237, 239], [210, 238, 239], [212, 238, 239], [214, 239, 239], [215, 240, 239], [216, 242, 239], [218, 243, 239], [220, 243, 239], [221, 244, 239], [224, 246, 239], [226, 247, 239], [228, 247, 240], [230, 247, 241], [232, 247, 242], [234, 248, 242], [237, 249, 242], [238, 249, 243], [240, 249, 243], [242, 249, 244], [243, 251, 246], [244, 252, 247], [246, 252, 249], [248, 252, 250], [249, 252, 252], [251, 253, 253], [253, 254, 254], [255, 255, 255]],
            cubehelix1Cm: [[0, 0, 0], [2, 0, 2], [5, 0, 5], [6, 0, 7], [8, 0, 10], [10, 0, 12], [12, 1, 15], [15, 2, 17], [17, 2, 20], [18, 2, 22], [20, 2, 25], [21, 2, 29], [22, 2, 33], [23, 3, 35], [24, 4, 38], [25, 5, 40], [25, 6, 44], [25, 7, 48], [26, 8, 51], [27, 9, 53], [28, 10, 56], [28, 11, 59], [28, 12, 63], [27, 14, 66], [26, 16, 68], [25, 17, 71], [25, 18, 73], [25, 19, 74], [25, 20, 76], [24, 22, 80], [22, 25, 84], [22, 27, 85], [21, 28, 87], [20, 30, 89], [19, 33, 91], [17, 35, 94], [16, 37, 95], [14, 39, 96], [12, 40, 96], [11, 43, 99], [10, 45, 102], [8, 47, 102], [6, 49, 103], [5, 51, 104], [2, 54, 104], [0, 58, 104], [0, 60, 104], [0, 62, 104], [0, 63, 104], [0, 66, 104], [0, 68, 104], [0, 71, 104], [0, 73, 104], [0, 76, 104], [0, 79, 103], [0, 81, 102], [0, 84, 102], [0, 86, 99], [0, 89, 96], [0, 91, 96], [0, 94, 95], [0, 96, 94], [0, 99, 91], [0, 102, 89], [0, 103, 86], [0, 105, 84], [0, 107, 81], [0, 109, 79], [0, 112, 76], [0, 113, 73], [0, 115, 71], [0, 117, 68], [0, 119, 65], [0, 122, 61], [0, 124, 58], [0, 125, 56], [0, 127, 53], [0, 128, 51], [0, 129, 48], [0, 130, 45], [0, 132, 42], [0, 135, 38], [0, 136, 35], [0, 136, 33], [0, 137, 30], [3, 138, 26], [7, 140, 22], [10, 140, 21], [12, 140, 19], [15, 140, 17], [19, 141, 14], [22, 142, 10], [26, 142, 8], [29, 142, 6], [33, 142, 5], [38, 142, 2], [43, 142, 0], [46, 142, 0], [50, 142, 0], [53, 142, 0], [57, 141, 0], [62, 141, 0], [66, 140, 0], [72, 140, 0], [79, 140, 0], [83, 139, 0], [87, 138, 0], [91, 137, 0], [98, 136, 0], [104, 135, 0], [108, 134, 0], [113, 133, 0], [117, 132, 0], [123, 131, 0], [130, 130, 0], [134, 129, 0], [138, 128, 0], [142, 127, 0], [149, 126, 0], [155, 124, 0], [159, 123, 0], [164, 121, 1], [168, 119, 2], [174, 118, 6], [181, 117, 10], [185, 116, 12], [189, 115, 15], [193, 114, 17], [197, 113, 21], [200, 113, 24], [204, 112, 28], [209, 110, 33], [214, 109, 38], [217, 108, 41], [221, 107, 45], [224, 107, 48], [228, 105, 54], [232, 104, 61], [234, 103, 64], [237, 102, 68], [239, 102, 71], [243, 102, 77], [247, 102, 84], [249, 101, 89], [250, 100, 94], [252, 99, 99], [253, 99, 105], [255, 99, 112], [255, 99, 117], [255, 99, 122], [255, 99, 127], [255, 99, 131], [255, 99, 136], [255, 99, 140], [255, 100, 147], [255, 102, 155], [255, 102, 159], [255, 102, 164], [255, 102, 168], [255, 103, 174], [255, 104, 181], [255, 105, 185], [255, 106, 189], [255, 107, 193], [255, 108, 200], [255, 109, 206], [255, 111, 210], [255, 113, 215], [255, 114, 219], [253, 117, 224], [252, 119, 229], [250, 120, 232], [249, 121, 236], [247, 122, 239], [244, 124, 244], [242, 127, 249], [240, 130, 251], [238, 132, 253], [237, 135, 255], [234, 136, 255], [232, 138, 255], [229, 140, 255], [226, 142, 255], [224, 145, 255], [222, 147, 255], [221, 150, 255], [219, 153, 255], [215, 156, 255], [211, 160, 255], [209, 162, 255], [208, 164, 255], [206, 165, 255], [204, 169, 255], [201, 173, 255], [199, 175, 255], [198, 178, 255], [196, 181, 255], [193, 183, 255], [191, 186, 255], [189, 188, 255], [187, 191, 255], [186, 193, 255], [185, 195, 255], [184, 197, 255], [183, 198, 255], [182, 202, 255], [181, 206, 255], [180, 208, 255], [179, 209, 255], [178, 211, 255], [177, 214, 255], [175, 216, 255], [175, 218, 255], [175, 220, 255], [175, 221, 255], [175, 224, 255], [175, 226, 255], [176, 228, 255], [177, 230, 255], [178, 232, 255], [179, 234, 255], [181, 237, 255], [181, 238, 255], [182, 238, 255], [183, 239, 255], [184, 240, 252], [186, 242, 249], [187, 243, 249], [189, 243, 248], [191, 244, 247], [192, 245, 246], [194, 246, 245], [196, 247, 244], [198, 248, 243], [201, 249, 242], [203, 250, 242], [204, 251, 242], [206, 252, 242], [210, 252, 240], [214, 252, 239], [216, 252, 240], [219, 252, 241], [221, 252, 242], [224, 253, 242], [226, 255, 242], [229, 255, 243], [232, 255, 243], [234, 255, 244], [238, 255, 246], [242, 255, 247], [243, 255, 248], [245, 255, 249], [247, 255, 249], [249, 255, 251], [252, 255, 253], [255, 255, 255]],
            greenCm: [[0, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 0], [0, 12, 0], [0, 13, 0], [0, 14, 0], [0, 15, 0], [0, 16, 0], [0, 17, 0], [0, 18, 0], [0, 19, 0], [0, 20, 0], [0, 21, 0], [0, 22, 0], [0, 23, 0], [0, 24, 0], [0, 25, 0], [0, 26, 0], [0, 27, 0], [0, 28, 0], [0, 29, 0], [0, 30, 0], [0, 31, 0], [0, 32, 0], [0, 33, 0], [0, 34, 0], [0, 35, 0], [0, 36, 0], [0, 37, 0], [0, 38, 0], [0, 39, 0], [0, 40, 0], [0, 41, 0], [0, 42, 0], [0, 43, 0], [0, 44, 0], [0, 45, 0], [0, 46, 0], [0, 47, 0], [0, 48, 0], [0, 49, 0], [0, 50, 0], [0, 51, 0], [0, 52, 0], [0, 53, 0], [0, 54, 0], [0, 55, 0], [0, 56, 0], [0, 57, 0], [0, 58, 0], [0, 59, 0], [0, 60, 0], [0, 61, 0], [0, 62, 0], [0, 63, 0], [0, 64, 0], [0, 65, 0], [0, 66, 0], [0, 67, 0], [0, 68, 0], [0, 69, 0], [0, 70, 0], [0, 71, 0], [0, 72, 0], [0, 73, 0], [0, 74, 0], [0, 75, 0], [0, 76, 0], [0, 77, 0], [0, 78, 0], [0, 79, 0], [0, 80, 0], [0, 81, 0], [0, 82, 0], [0, 83, 0], [0, 84, 0], [0, 85, 0], [0, 86, 0], [0, 87, 0], [0, 88, 0], [0, 89, 0], [0, 90, 0], [0, 91, 0], [0, 92, 0], [0, 93, 0], [0, 94, 0], [0, 95, 0], [0, 96, 0], [0, 97, 0], [0, 98, 0], [0, 99, 0], [0, 100, 0], [0, 101, 0], [0, 102, 0], [0, 103, 0], [0, 104, 0], [0, 105, 0], [0, 106, 0], [0, 107, 0], [0, 108, 0], [0, 109, 0], [0, 110, 0], [0, 111, 0], [0, 112, 0], [0, 113, 0], [0, 114, 0], [0, 115, 0], [0, 116, 0], [0, 117, 0], [0, 118, 0], [0, 119, 0], [0, 120, 0], [0, 121, 0], [0, 122, 0], [0, 123, 0], [0, 124, 0], [0, 125, 0], [0, 126, 0], [0, 127, 0], [0, 128, 0], [0, 129, 0], [0, 130, 0], [0, 131, 0], [0, 132, 0], [0, 133, 0], [0, 134, 0], [0, 135, 0], [0, 136, 0], [0, 137, 0], [0, 138, 0], [0, 139, 0], [0, 140, 0], [0, 141, 0], [0, 142, 0], [0, 143, 0], [0, 144, 0], [0, 145, 0], [0, 146, 0], [0, 147, 0], [0, 148, 0], [0, 149, 0], [0, 150, 0], [0, 151, 0], [0, 152, 0], [0, 153, 0], [0, 154, 0], [0, 155, 0], [0, 156, 0], [0, 157, 0], [0, 158, 0], [0, 159, 0], [0, 160, 0], [0, 161, 0], [0, 162, 0], [0, 163, 0], [0, 164, 0], [0, 165, 0], [0, 166, 0], [0, 167, 0], [0, 168, 0], [0, 169, 0], [0, 170, 0], [0, 171, 0], [0, 172, 0], [0, 173, 0], [0, 174, 0], [0, 175, 0], [0, 176, 0], [0, 177, 0], [0, 178, 0], [0, 179, 0], [0, 180, 0], [0, 181, 0], [0, 182, 0], [0, 183, 0], [0, 184, 0], [0, 185, 0], [0, 186, 0], [0, 187, 0], [0, 188, 0], [0, 189, 0], [0, 190, 0], [0, 191, 0], [0, 192, 0], [0, 193, 0], [0, 194, 0], [0, 195, 0], [0, 196, 0], [0, 197, 0], [0, 198, 0], [0, 199, 0], [0, 200, 0], [0, 201, 0], [0, 202, 0], [0, 203, 0], [0, 204, 0], [0, 205, 0], [0, 206, 0], [0, 207, 0], [0, 208, 0], [0, 209, 0], [0, 210, 0], [0, 211, 0], [0, 212, 0], [0, 213, 0], [0, 214, 0], [0, 215, 0], [0, 216, 0], [0, 217, 0], [0, 218, 0], [0, 219, 0], [0, 220, 0], [0, 221, 0], [0, 222, 0], [0, 223, 0], [0, 224, 0], [0, 225, 0], [0, 226, 0], [0, 227, 0], [0, 228, 0], [0, 229, 0], [0, 230, 0], [0, 231, 0], [0, 232, 0], [0, 233, 0], [0, 234, 0], [0, 235, 0], [0, 236, 0], [0, 237, 0], [0, 238, 0], [0, 239, 0], [0, 240, 0], [0, 241, 0], [0, 242, 0], [0, 243, 0], [0, 244, 0], [0, 245, 0], [0, 246, 0], [0, 247, 0], [0, 248, 0], [0, 249, 0], [0, 250, 0], [0, 251, 0], [0, 252, 0], [0, 253, 0], [0, 254, 0], [0, 255, 0]],
            greyCm: [[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6], [7, 7, 7], [8, 8, 8], [9, 9, 9], [10, 10, 10], [11, 11, 11], [12, 12, 12], [13, 13, 13], [14, 14, 14], [15, 15, 15], [16, 16, 16], [17, 17, 17], [18, 18, 18], [19, 19, 19], [20, 20, 20], [21, 21, 21], [22, 22, 22], [23, 23, 23], [24, 24, 24], [25, 25, 25], [26, 26, 26], [27, 27, 27], [28, 28, 28], [29, 29, 29], [30, 30, 30], [31, 31, 31], [32, 32, 32], [33, 33, 33], [34, 34, 34], [35, 35, 35], [36, 36, 36], [37, 37, 37], [38, 38, 38], [39, 39, 39], [40, 40, 40], [41, 41, 41], [42, 42, 42], [43, 43, 43], [44, 44, 44], [45, 45, 45], [46, 46, 46], [47, 47, 47], [48, 48, 48], [49, 49, 49], [50, 50, 50], [51, 51, 51], [52, 52, 52], [53, 53, 53], [54, 54, 54], [55, 55, 55], [56, 56, 56], [57, 57, 57], [58, 58, 58], [59, 59, 59], [60, 60, 60], [61, 61, 61], [62, 62, 62], [63, 63, 63], [64, 64, 64], [65, 65, 65], [66, 66, 66], [67, 67, 67], [68, 68, 68], [69, 69, 69], [70, 70, 70], [71, 71, 71], [72, 72, 72], [73, 73, 73], [74, 74, 74], [75, 75, 75], [76, 76, 76], [77, 77, 77], [78, 78, 78], [79, 79, 79], [80, 80, 80], [81, 81, 81], [82, 82, 82], [83, 83, 83], [84, 84, 84], [85, 85, 85], [86, 86, 86], [87, 87, 87], [88, 88, 88], [89, 89, 89], [90, 90, 90], [91, 91, 91], [92, 92, 92], [93, 93, 93], [94, 94, 94], [95, 95, 95], [96, 96, 96], [97, 97, 97], [98, 98, 98], [99, 99, 99], [100, 100, 100], [101, 101, 101], [102, 102, 102], [103, 103, 103], [104, 104, 104], [105, 105, 105], [106, 106, 106], [107, 107, 107], [108, 108, 108], [109, 109, 109], [110, 110, 110], [111, 111, 111], [112, 112, 112], [113, 113, 113], [114, 114, 114], [115, 115, 115], [116, 116, 116], [117, 117, 117], [118, 118, 118], [119, 119, 119], [120, 120, 120], [121, 121, 121], [122, 122, 122], [123, 123, 123], [124, 124, 124], [125, 125, 125], [126, 126, 126], [127, 127, 127], [128, 128, 128], [129, 129, 129], [130, 130, 130], [131, 131, 131], [132, 132, 132], [133, 133, 133], [134, 134, 134], [135, 135, 135], [136, 136, 136], [137, 137, 137], [138, 138, 138], [139, 139, 139], [140, 140, 140], [141, 141, 141], [142, 142, 142], [143, 143, 143], [144, 144, 144], [145, 145, 145], [146, 146, 146], [147, 147, 147], [148, 148, 148], [149, 149, 149], [150, 150, 150], [151, 151, 151], [152, 152, 152], [153, 153, 153], [154, 154, 154], [155, 155, 155], [156, 156, 156], [157, 157, 157], [158, 158, 158], [159, 159, 159], [160, 160, 160], [161, 161, 161], [162, 162, 162], [163, 163, 163], [164, 164, 164], [165, 165, 165], [166, 166, 166], [167, 167, 167], [168, 168, 168], [169, 169, 169], [170, 170, 170], [171, 171, 171], [172, 172, 172], [173, 173, 173], [174, 174, 174], [175, 175, 175], [176, 176, 176], [177, 177, 177], [178, 178, 178], [179, 179, 179], [180, 180, 180], [181, 181, 181], [182, 182, 182], [183, 183, 183], [184, 184, 184], [185, 185, 185], [186, 186, 186], [187, 187, 187], [188, 188, 188], [189, 189, 189], [190, 190, 190], [191, 191, 191], [192, 192, 192], [193, 193, 193], [194, 194, 194], [195, 195, 195], [196, 196, 196], [197, 197, 197], [198, 198, 198], [199, 199, 199], [200, 200, 200], [201, 201, 201], [202, 202, 202], [203, 203, 203], [204, 204, 204], [205, 205, 205], [206, 206, 206], [207, 207, 207], [208, 208, 208], [209, 209, 209], [210, 210, 210], [211, 211, 211], [212, 212, 212], [213, 213, 213], [214, 214, 214], [215, 215, 215], [216, 216, 216], [217, 217, 217], [218, 218, 218], [219, 219, 219], [220, 220, 220], [221, 221, 221], [222, 222, 222], [223, 223, 223], [224, 224, 224], [225, 225, 225], [226, 226, 226], [227, 227, 227], [228, 228, 228], [229, 229, 229], [230, 230, 230], [231, 231, 231], [232, 232, 232], [233, 233, 233], [234, 234, 234], [235, 235, 235], [236, 236, 236], [237, 237, 237], [238, 238, 238], [239, 239, 239], [240, 240, 240], [241, 241, 241], [242, 242, 242], [243, 243, 243], [244, 244, 244], [245, 245, 245], [246, 246, 246], [247, 247, 247], [248, 248, 248], [249, 249, 249], [250, 250, 250], [251, 251, 251], [252, 252, 252], [253, 253, 253], [254, 254, 254], [255, 255, 255]],
            heCm: [[0, 0, 0], [42, 0, 10], [85, 0, 21], [127, 0, 31], [127, 0, 47], [127, 0, 63], [127, 0, 79], [127, 0, 95], [127, 0, 102], [127, 0, 109], [127, 0, 116], [127, 0, 123], [127, 0, 131], [127, 0, 138], [127, 0, 145], [127, 0, 152], [127, 0, 159], [127, 8, 157], [127, 17, 155], [127, 25, 153], [127, 34, 151], [127, 42, 149], [127, 51, 147], [127, 59, 145], [127, 68, 143], [127, 76, 141], [127, 85, 139], [127, 93, 136], [127, 102, 134], [127, 110, 132], [127, 119, 130], [127, 127, 128], [127, 129, 126], [127, 131, 124], [127, 133, 122], [127, 135, 120], [127, 137, 118], [127, 139, 116], [127, 141, 114], [127, 143, 112], [127, 145, 110], [127, 147, 108], [127, 149, 106], [127, 151, 104], [127, 153, 102], [127, 155, 100], [127, 157, 98], [127, 159, 96], [127, 161, 94], [127, 163, 92], [127, 165, 90], [127, 167, 88], [127, 169, 86], [127, 171, 84], [127, 173, 82], [127, 175, 80], [127, 177, 77], [127, 179, 75], [127, 181, 73], [127, 183, 71], [127, 185, 69], [127, 187, 67], [127, 189, 65], [127, 191, 63], [128, 191, 64], [129, 191, 65], [130, 191, 66], [131, 192, 67], [132, 192, 68], [133, 192, 69], [134, 192, 70], [135, 193, 71], [136, 193, 72], [137, 193, 73], [138, 193, 74], [139, 194, 75], [140, 194, 76], [141, 194, 77], [142, 194, 78], [143, 195, 79], [144, 195, 80], [145, 195, 81], [146, 195, 82], [147, 196, 83], [148, 196, 84], [149, 196, 85], [150, 196, 86], [151, 196, 87], [152, 197, 88], [153, 197, 89], [154, 197, 90], [155, 197, 91], [156, 198, 92], [157, 198, 93], [158, 198, 94], [159, 198, 95], [160, 199, 96], [161, 199, 97], [162, 199, 98], [163, 199, 99], [164, 200, 100], [165, 200, 101], [166, 200, 102], [167, 200, 103], [168, 201, 104], [169, 201, 105], [170, 201, 106], [171, 201, 107], [172, 202, 108], [173, 202, 109], [174, 202, 110], [175, 202, 111], [176, 202, 112], [177, 203, 113], [178, 203, 114], [179, 203, 115], [180, 203, 116], [181, 204, 117], [182, 204, 118], [183, 204, 119], [184, 204, 120], [185, 205, 121], [186, 205, 122], [187, 205, 123], [188, 205, 124], [189, 206, 125], [190, 206, 126], [191, 206, 127], [191, 206, 128], [192, 207, 129], [192, 207, 130], [193, 208, 131], [193, 208, 132], [194, 208, 133], [194, 209, 134], [195, 209, 135], [195, 209, 136], [196, 210, 137], [196, 210, 138], [197, 211, 139], [197, 211, 140], [198, 211, 141], [198, 212, 142], [199, 212, 143], [199, 212, 144], [200, 213, 145], [200, 213, 146], [201, 214, 147], [201, 214, 148], [202, 214, 149], [202, 215, 150], [203, 215, 151], [203, 216, 152], [204, 216, 153], [204, 216, 154], [205, 217, 155], [205, 217, 156], [206, 217, 157], [206, 218, 158], [207, 218, 159], [207, 219, 160], [208, 219, 161], [208, 219, 162], [209, 220, 163], [209, 220, 164], [210, 220, 165], [210, 221, 166], [211, 221, 167], [211, 222, 168], [212, 222, 169], [212, 222, 170], [213, 223, 171], [213, 223, 172], [214, 223, 173], [214, 224, 174], [215, 224, 175], [215, 225, 176], [216, 225, 177], [216, 225, 178], [217, 226, 179], [217, 226, 180], [218, 226, 181], [218, 227, 182], [219, 227, 183], [219, 228, 184], [220, 228, 185], [220, 228, 186], [221, 229, 187], [221, 229, 188], [222, 230, 189], [222, 230, 190], [223, 230, 191], [223, 231, 192], [224, 231, 193], [224, 231, 194], [225, 232, 195], [225, 232, 196], [226, 233, 197], [226, 233, 198], [227, 233, 199], [227, 234, 200], [228, 234, 201], [228, 234, 202], [229, 235, 203], [229, 235, 204], [230, 236, 205], [230, 236, 206], [231, 236, 207], [231, 237, 208], [232, 237, 209], [232, 237, 210], [233, 238, 211], [233, 238, 212], [234, 239, 213], [234, 239, 214], [235, 239, 215], [235, 240, 216], [236, 240, 217], [236, 240, 218], [237, 241, 219], [237, 241, 220], [238, 242, 221], [238, 242, 222], [239, 242, 223], [239, 243, 224], [240, 243, 225], [240, 244, 226], [241, 244, 227], [241, 244, 228], [242, 245, 229], [242, 245, 230], [243, 245, 231], [243, 246, 232], [244, 246, 233], [244, 247, 234], [245, 247, 235], [245, 247, 236], [246, 248, 237], [246, 248, 238], [247, 248, 239], [247, 249, 240], [248, 249, 241], [248, 250, 242], [249, 250, 243], [249, 250, 244], [250, 251, 245], [250, 251, 246], [251, 251, 247], [251, 252, 248], [252, 252, 249], [252, 253, 250], [253, 253, 251], [253, 253, 252], [254, 254, 253], [254, 254, 254], [255, 255, 255]],
            heatCm: [[0, 0, 0], [2, 1, 0], [5, 2, 0], [8, 3, 0], [11, 4, 0], [14, 5, 0], [17, 6, 0], [20, 7, 0], [23, 8, 0], [26, 9, 0], [29, 10, 0], [32, 11, 0], [35, 12, 0], [38, 13, 0], [41, 14, 0], [44, 15, 0], [47, 16, 0], [50, 17, 0], [53, 18, 0], [56, 19, 0], [59, 20, 0], [62, 21, 0], [65, 22, 0], [68, 23, 0], [71, 24, 0], [74, 25, 0], [77, 26, 0], [80, 27, 0], [83, 28, 0], [85, 29, 0], [88, 30, 0], [91, 31, 0], [94, 32, 0], [97, 33, 0], [100, 34, 0], [103, 35, 0], [106, 36, 0], [109, 37, 0], [112, 38, 0], [115, 39, 0], [118, 40, 0], [121, 41, 0], [124, 42, 0], [127, 43, 0], [130, 44, 0], [133, 45, 0], [136, 46, 0], [139, 47, 0], [142, 48, 0], [145, 49, 0], [148, 50, 0], [151, 51, 0], [154, 52, 0], [157, 53, 0], [160, 54, 0], [163, 55, 0], [166, 56, 0], [169, 57, 0], [171, 58, 0], [174, 59, 0], [177, 60, 0], [180, 61, 0], [183, 62, 0], [186, 63, 0], [189, 64, 0], [192, 65, 0], [195, 66, 0], [198, 67, 0], [201, 68, 0], [204, 69, 0], [207, 70, 0], [210, 71, 0], [213, 72, 0], [216, 73, 0], [219, 74, 0], [222, 75, 0], [225, 76, 0], [228, 77, 0], [231, 78, 0], [234, 79, 0], [237, 80, 0], [240, 81, 0], [243, 82, 0], [246, 83, 0], [249, 84, 0], [252, 85, 0], [255, 86, 0], [255, 87, 0], [255, 88, 0], [255, 89, 0], [255, 90, 0], [255, 91, 0], [255, 92, 0], [255, 93, 0], [255, 94, 0], [255, 95, 0], [255, 96, 0], [255, 97, 0], [255, 98, 0], [255, 99, 0], [255, 100, 0], [255, 101, 0], [255, 102, 0], [255, 103, 0], [255, 104, 0], [255, 105, 0], [255, 106, 0], [255, 107, 0], [255, 108, 0], [255, 109, 0], [255, 110, 0], [255, 111, 0], [255, 112, 0], [255, 113, 0], [255, 114, 0], [255, 115, 0], [255, 116, 0], [255, 117, 0], [255, 118, 0], [255, 119, 0], [255, 120, 0], [255, 121, 0], [255, 122, 0], [255, 123, 0], [255, 124, 0], [255, 125, 0], [255, 126, 0], [255, 127, 0], [255, 128, 0], [255, 129, 0], [255, 130, 0], [255, 131, 0], [255, 132, 0], [255, 133, 0], [255, 134, 0], [255, 135, 0], [255, 136, 0], [255, 137, 0], [255, 138, 0], [255, 139, 0], [255, 140, 0], [255, 141, 0], [255, 142, 0], [255, 143, 0], [255, 144, 0], [255, 145, 0], [255, 146, 0], [255, 147, 0], [255, 148, 0], [255, 149, 0], [255, 150, 0], [255, 151, 0], [255, 152, 0], [255, 153, 0], [255, 154, 0], [255, 155, 0], [255, 156, 0], [255, 157, 0], [255, 158, 0], [255, 159, 0], [255, 160, 0], [255, 161, 0], [255, 162, 0], [255, 163, 0], [255, 164, 0], [255, 165, 0], [255, 166, 3], [255, 167, 6], [255, 168, 9], [255, 169, 12], [255, 170, 15], [255, 171, 18], [255, 172, 21], [255, 173, 24], [255, 174, 27], [255, 175, 30], [255, 176, 33], [255, 177, 36], [255, 178, 39], [255, 179, 42], [255, 180, 45], [255, 181, 48], [255, 182, 51], [255, 183, 54], [255, 184, 57], [255, 185, 60], [255, 186, 63], [255, 187, 66], [255, 188, 69], [255, 189, 72], [255, 190, 75], [255, 191, 78], [255, 192, 81], [255, 193, 85], [255, 194, 88], [255, 195, 91], [255, 196, 94], [255, 197, 97], [255, 198, 100], [255, 199, 103], [255, 200, 106], [255, 201, 109], [255, 202, 112], [255, 203, 115], [255, 204, 118], [255, 205, 121], [255, 206, 124], [255, 207, 127], [255, 208, 130], [255, 209, 133], [255, 210, 136], [255, 211, 139], [255, 212, 142], [255, 213, 145], [255, 214, 148], [255, 215, 151], [255, 216, 154], [255, 217, 157], [255, 218, 160], [255, 219, 163], [255, 220, 166], [255, 221, 170], [255, 222, 173], [255, 223, 176], [255, 224, 179], [255, 225, 182], [255, 226, 185], [255, 227, 188], [255, 228, 191], [255, 229, 194], [255, 230, 197], [255, 231, 200], [255, 232, 203], [255, 233, 206], [255, 234, 209], [255, 235, 212], [255, 236, 215], [255, 237, 218], [255, 238, 221], [255, 239, 224], [255, 240, 227], [255, 241, 230], [255, 242, 233], [255, 243, 236], [255, 244, 239], [255, 245, 242], [255, 246, 245], [255, 247, 248], [255, 248, 251], [255, 249, 255], [255, 250, 255], [255, 251, 255], [255, 252, 255], [255, 253, 255], [255, 254, 255], [255, 255, 255]],
            rainbowCm: [[255, 0, 255], [250, 0, 255], [245, 0, 255], [240, 0, 255], [235, 0, 255], [230, 0, 255], [225, 0, 255], [220, 0, 255], [215, 0, 255], [210, 0, 255], [205, 0, 255], [200, 0, 255], [195, 0, 255], [190, 0, 255], [185, 0, 255], [180, 0, 255], [175, 0, 255], [170, 0, 255], [165, 0, 255], [160, 0, 255], [155, 0, 255], [150, 0, 255], [145, 0, 255], [140, 0, 255], [135, 0, 255], [130, 0, 255], [125, 0, 255], [120, 0, 255], [115, 0, 255], [110, 0, 255], [105, 0, 255], [100, 0, 255], [95, 0, 255], [90, 0, 255], [85, 0, 255], [80, 0, 255], [75, 0, 255], [70, 0, 255], [65, 0, 255], [60, 0, 255], [55, 0, 255], [50, 0, 255], [45, 0, 255], [40, 0, 255], [35, 0, 255], [30, 0, 255], [25, 0, 255], [20, 0, 255], [15, 0, 255], [10, 0, 255], [5, 0, 255], [0, 0, 255], [0, 5, 255], [0, 10, 255], [0, 15, 255], [0, 20, 255], [0, 25, 255], [0, 30, 255], [0, 35, 255], [0, 40, 255], [0, 45, 255], [0, 50, 255], [0, 55, 255], [0, 60, 255], [0, 65, 255], [0, 70, 255], [0, 75, 255], [0, 80, 255], [0, 85, 255], [0, 90, 255], [0, 95, 255], [0, 100, 255], [0, 105, 255], [0, 110, 255], [0, 115, 255], [0, 120, 255], [0, 125, 255], [0, 130, 255], [0, 135, 255], [0, 140, 255], [0, 145, 255], [0, 150, 255], [0, 155, 255], [0, 160, 255], [0, 165, 255], [0, 170, 255], [0, 175, 255], [0, 180, 255], [0, 185, 255], [0, 190, 255], [0, 195, 255], [0, 200, 255], [0, 205, 255], [0, 210, 255], [0, 215, 255], [0, 220, 255], [0, 225, 255], [0, 230, 255], [0, 235, 255], [0, 240, 255], [0, 245, 255], [0, 250, 255], [0, 255, 255], [0, 255, 250], [0, 255, 245], [0, 255, 240], [0, 255, 235], [0, 255, 230], [0, 255, 225], [0, 255, 220], [0, 255, 215], [0, 255, 210], [0, 255, 205], [0, 255, 200], [0, 255, 195], [0, 255, 190], [0, 255, 185], [0, 255, 180], [0, 255, 175], [0, 255, 170], [0, 255, 165], [0, 255, 160], [0, 255, 155], [0, 255, 150], [0, 255, 145], [0, 255, 140], [0, 255, 135], [0, 255, 130], [0, 255, 125], [0, 255, 120], [0, 255, 115], [0, 255, 110], [0, 255, 105], [0, 255, 100], [0, 255, 95], [0, 255, 90], [0, 255, 85], [0, 255, 80], [0, 255, 75], [0, 255, 70], [0, 255, 65], [0, 255, 60], [0, 255, 55], [0, 255, 50], [0, 255, 45], [0, 255, 40], [0, 255, 35], [0, 255, 30], [0, 255, 25], [0, 255, 20], [0, 255, 15], [0, 255, 10], [0, 255, 5], [0, 255, 0], [5, 255, 0], [10, 255, 0], [15, 255, 0], [20, 255, 0], [25, 255, 0], [30, 255, 0], [35, 255, 0], [40, 255, 0], [45, 255, 0], [50, 255, 0], [55, 255, 0], [60, 255, 0], [65, 255, 0], [70, 255, 0], [75, 255, 0], [80, 255, 0], [85, 255, 0], [90, 255, 0], [95, 255, 0], [100, 255, 0], [105, 255, 0], [110, 255, 0], [115, 255, 0], [120, 255, 0], [125, 255, 0], [130, 255, 0], [135, 255, 0], [140, 255, 0], [145, 255, 0], [150, 255, 0], [155, 255, 0], [160, 255, 0], [165, 255, 0], [170, 255, 0], [175, 255, 0], [180, 255, 0], [185, 255, 0], [190, 255, 0], [195, 255, 0], [200, 255, 0], [205, 255, 0], [210, 255, 0], [215, 255, 0], [220, 255, 0], [225, 255, 0], [230, 255, 0], [235, 255, 0], [240, 255, 0], [245, 255, 0], [250, 255, 0], [255, 255, 0], [255, 250, 0], [255, 245, 0], [255, 240, 0], [255, 235, 0], [255, 230, 0], [255, 225, 0], [255, 220, 0], [255, 215, 0], [255, 210, 0], [255, 205, 0], [255, 200, 0], [255, 195, 0], [255, 190, 0], [255, 185, 0], [255, 180, 0], [255, 175, 0], [255, 170, 0], [255, 165, 0], [255, 160, 0], [255, 155, 0], [255, 150, 0], [255, 145, 0], [255, 140, 0], [255, 135, 0], [255, 130, 0], [255, 125, 0], [255, 120, 0], [255, 115, 0], [255, 110, 0], [255, 105, 0], [255, 100, 0], [255, 95, 0], [255, 90, 0], [255, 85, 0], [255, 80, 0], [255, 75, 0], [255, 70, 0], [255, 65, 0], [255, 60, 0], [255, 55, 0], [255, 50, 0], [255, 45, 0], [255, 40, 0], [255, 35, 0], [255, 30, 0], [255, 25, 0], [255, 20, 0], [255, 15, 0], [255, 10, 0], [255, 5, 0], [255, 0, 0]],
            redCm: [[0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0], [4, 0, 0], [5, 0, 0], [6, 0, 0], [7, 0, 0], [8, 0, 0], [9, 0, 0], [10, 0, 0], [11, 0, 0], [12, 0, 0], [13, 0, 0], [14, 0, 0], [15, 0, 0], [16, 0, 0], [17, 0, 0], [18, 0, 0], [19, 0, 0], [20, 0, 0], [21, 0, 0], [22, 0, 0], [23, 0, 0], [24, 0, 0], [25, 0, 0], [26, 0, 0], [27, 0, 0], [28, 0, 0], [29, 0, 0], [30, 0, 0], [31, 0, 0], [32, 0, 0], [33, 0, 0], [34, 0, 0], [35, 0, 0], [36, 0, 0], [37, 0, 0], [38, 0, 0], [39, 0, 0], [40, 0, 0], [41, 0, 0], [42, 0, 0], [43, 0, 0], [44, 0, 0], [45, 0, 0], [46, 0, 0], [47, 0, 0], [48, 0, 0], [49, 0, 0], [50, 0, 0], [51, 0, 0], [52, 0, 0], [53, 0, 0], [54, 0, 0], [55, 0, 0], [56, 0, 0], [57, 0, 0], [58, 0, 0], [59, 0, 0], [60, 0, 0], [61, 0, 0], [62, 0, 0], [63, 0, 0], [64, 0, 0], [65, 0, 0], [66, 0, 0], [67, 0, 0], [68, 0, 0], [69, 0, 0], [70, 0, 0], [71, 0, 0], [72, 0, 0], [73, 0, 0], [74, 0, 0], [75, 0, 0], [76, 0, 0], [77, 0, 0], [78, 0, 0], [79, 0, 0], [80, 0, 0], [81, 0, 0], [82, 0, 0], [83, 0, 0], [84, 0, 0], [85, 0, 0], [86, 0, 0], [87, 0, 0], [88, 0, 0], [89, 0, 0], [90, 0, 0], [91, 0, 0], [92, 0, 0], [93, 0, 0], [94, 0, 0], [95, 0, 0], [96, 0, 0], [97, 0, 0], [98, 0, 0], [99, 0, 0], [100, 0, 0], [101, 0, 0], [102, 0, 0], [103, 0, 0], [104, 0, 0], [105, 0, 0], [106, 0, 0], [107, 0, 0], [108, 0, 0], [109, 0, 0], [110, 0, 0], [111, 0, 0], [112, 0, 0], [113, 0, 0], [114, 0, 0], [115, 0, 0], [116, 0, 0], [117, 0, 0], [118, 0, 0], [119, 0, 0], [120, 0, 0], [121, 0, 0], [122, 0, 0], [123, 0, 0], [124, 0, 0], [125, 0, 0], [126, 0, 0], [127, 0, 0], [128, 0, 0], [129, 0, 0], [130, 0, 0], [131, 0, 0], [132, 0, 0], [133, 0, 0], [134, 0, 0], [135, 0, 0], [136, 0, 0], [137, 0, 0], [138, 0, 0], [139, 0, 0], [140, 0, 0], [141, 0, 0], [142, 0, 0], [143, 0, 0], [144, 0, 0], [145, 0, 0], [146, 0, 0], [147, 0, 0], [148, 0, 0], [149, 0, 0], [150, 0, 0], [151, 0, 0], [152, 0, 0], [153, 0, 0], [154, 0, 0], [155, 0, 0], [156, 0, 0], [157, 0, 0], [158, 0, 0], [159, 0, 0], [160, 0, 0], [161, 0, 0], [162, 0, 0], [163, 0, 0], [164, 0, 0], [165, 0, 0], [166, 0, 0], [167, 0, 0], [168, 0, 0], [169, 0, 0], [170, 0, 0], [171, 0, 0], [172, 0, 0], [173, 0, 0], [174, 0, 0], [175, 0, 0], [176, 0, 0], [177, 0, 0], [178, 0, 0], [179, 0, 0], [180, 0, 0], [181, 0, 0], [182, 0, 0], [183, 0, 0], [184, 0, 0], [185, 0, 0], [186, 0, 0], [187, 0, 0], [188, 0, 0], [189, 0, 0], [190, 0, 0], [191, 0, 0], [192, 0, 0], [193, 0, 0], [194, 0, 0], [195, 0, 0], [196, 0, 0], [197, 0, 0], [198, 0, 0], [199, 0, 0], [200, 0, 0], [201, 0, 0], [202, 0, 0], [203, 0, 0], [204, 0, 0], [205, 0, 0], [206, 0, 0], [207, 0, 0], [208, 0, 0], [209, 0, 0], [210, 0, 0], [211, 0, 0], [212, 0, 0], [213, 0, 0], [214, 0, 0], [215, 0, 0], [216, 0, 0], [217, 0, 0], [218, 0, 0], [219, 0, 0], [220, 0, 0], [221, 0, 0], [222, 0, 0], [223, 0, 0], [224, 0, 0], [225, 0, 0], [226, 0, 0], [227, 0, 0], [228, 0, 0], [229, 0, 0], [230, 0, 0], [231, 0, 0], [232, 0, 0], [233, 0, 0], [234, 0, 0], [235, 0, 0], [236, 0, 0], [237, 0, 0], [238, 0, 0], [239, 0, 0], [240, 0, 0], [241, 0, 0], [242, 0, 0], [243, 0, 0], [244, 0, 0], [245, 0, 0], [246, 0, 0], [247, 0, 0], [248, 0, 0], [249, 0, 0], [250, 0, 0], [251, 0, 0], [252, 0, 0], [253, 0, 0], [254, 0, 0], [255, 0, 0]],
            standardCm: [[0, 0, 0], [0, 0, 3], [1, 1, 6], [2, 2, 9], [3, 3, 12], [4, 4, 15], [5, 5, 18], [6, 6, 21], [7, 7, 24], [8, 8, 27], [9, 9, 30], [10, 10, 33], [10, 10, 36], [11, 11, 39], [12, 12, 42], [13, 13, 45], [14, 14, 48], [15, 15, 51], [16, 16, 54], [17, 17, 57], [18, 18, 60], [19, 19, 63], [20, 20, 66], [20, 20, 69], [21, 21, 72], [22, 22, 75], [23, 23, 78], [24, 24, 81], [25, 25, 85], [26, 26, 88], [27, 27, 91], [28, 28, 94], [29, 29, 97], [30, 30, 100], [30, 30, 103], [31, 31, 106], [32, 32, 109], [33, 33, 112], [34, 34, 115], [35, 35, 118], [36, 36, 121], [37, 37, 124], [38, 38, 127], [39, 39, 130], [40, 40, 133], [40, 40, 136], [41, 41, 139], [42, 42, 142], [43, 43, 145], [44, 44, 148], [45, 45, 151], [46, 46, 154], [47, 47, 157], [48, 48, 160], [49, 49, 163], [50, 50, 166], [51, 51, 170], [51, 51, 173], [52, 52, 176], [53, 53, 179], [54, 54, 182], [55, 55, 185], [56, 56, 188], [57, 57, 191], [58, 58, 194], [59, 59, 197], [60, 60, 200], [61, 61, 203], [61, 61, 206], [62, 62, 209], [63, 63, 212], [64, 64, 215], [65, 65, 218], [66, 66, 221], [67, 67, 224], [68, 68, 227], [69, 69, 230], [70, 70, 233], [71, 71, 236], [71, 71, 239], [72, 72, 242], [73, 73, 245], [74, 74, 248], [75, 75, 251], [76, 76, 255], [0, 78, 0], [1, 80, 1], [2, 82, 2], [3, 84, 3], [4, 87, 4], [5, 89, 5], [6, 91, 6], [7, 93, 7], [8, 95, 8], [9, 97, 9], [9, 99, 9], [10, 101, 10], [11, 103, 11], [12, 105, 12], [13, 108, 13], [14, 110, 14], [15, 112, 15], [16, 114, 16], [17, 116, 17], [18, 118, 18], [18, 120, 18], [19, 122, 19], [20, 124, 20], [21, 126, 21], [22, 129, 22], [23, 131, 23], [24, 133, 24], [25, 135, 25], [26, 137, 26], [27, 139, 27], [27, 141, 27], [28, 143, 28], [29, 145, 29], [30, 147, 30], [31, 150, 31], [32, 152, 32], [33, 154, 33], [34, 156, 34], [35, 158, 35], [36, 160, 36], [36, 162, 36], [37, 164, 37], [38, 166, 38], [39, 168, 39], [40, 171, 40], [41, 173, 41], [42, 175, 42], [43, 177, 43], [44, 179, 44], [45, 181, 45], [45, 183, 45], [46, 185, 46], [47, 187, 47], [48, 189, 48], [49, 192, 49], [50, 194, 50], [51, 196, 51], [52, 198, 52], [53, 200, 53], [54, 202, 54], [54, 204, 54], [55, 206, 55], [56, 208, 56], [57, 210, 57], [58, 213, 58], [59, 215, 59], [60, 217, 60], [61, 219, 61], [62, 221, 62], [63, 223, 63], [63, 225, 63], [64, 227, 64], [65, 229, 65], [66, 231, 66], [67, 234, 67], [68, 236, 68], [69, 238, 69], [70, 240, 70], [71, 242, 71], [72, 244, 72], [72, 246, 72], [73, 248, 73], [74, 250, 74], [75, 252, 75], [76, 255, 76], [78, 0, 0], [80, 1, 1], [82, 2, 2], [84, 3, 3], [86, 4, 4], [88, 5, 5], [91, 6, 6], [93, 7, 7], [95, 8, 8], [97, 8, 8], [99, 9, 9], [101, 10, 10], [103, 11, 11], [105, 12, 12], [107, 13, 13], [109, 14, 14], [111, 15, 15], [113, 16, 16], [115, 16, 16], [118, 17, 17], [120, 18, 18], [122, 19, 19], [124, 20, 20], [126, 21, 21], [128, 22, 22], [130, 23, 23], [132, 24, 24], [134, 24, 24], [136, 25, 25], [138, 26, 26], [140, 27, 27], [142, 28, 28], [144, 29, 29], [147, 30, 30], [149, 31, 31], [151, 32, 32], [153, 32, 32], [155, 33, 33], [157, 34, 34], [159, 35, 35], [161, 36, 36], [163, 37, 37], [165, 38, 38], [167, 39, 39], [169, 40, 40], [171, 40, 40], [174, 41, 41], [176, 42, 42], [178, 43, 43], [180, 44, 44], [182, 45, 45], [184, 46, 46], [186, 47, 47], [188, 48, 48], [190, 48, 48], [192, 49, 49], [194, 50, 50], [196, 51, 51], [198, 52, 52], [201, 53, 53], [203, 54, 54], [205, 55, 55], [207, 56, 56], [209, 56, 56], [211, 57, 57], [213, 58, 58], [215, 59, 59], [217, 60, 60], [219, 61, 61], [221, 62, 62], [223, 63, 63], [225, 64, 64], [228, 64, 64], [230, 65, 65], [232, 66, 66], [234, 67, 67], [236, 68, 68], [238, 69, 69], [240, 70, 70], [242, 71, 71], [244, 72, 72], [246, 72, 72], [248, 73, 73], [250, 74, 74], [252, 75, 75], [255, 76, 76]]
          };
          var cmapOptions = '';
          Object.keys(cmaps).forEach(function (c) {
            cmapOptions += '<option value=\"' + c + '\">' + c + '</option>';
          });
          var $html = $('<div>' + '        Colormap: <select id=\"cmapSelect\">' + cmapOptions + '        </select><br>' + '        Center: <span id=\"cmapCenter\"></span>' + '</div>');
          var cmapUpdate = function () {
            var val = $('#cmapSelect').val();
            $('#cmapSelect').change(function () {
              updateCallback(val);
            });
            return cmaps[val];
          };
          var spinnerSlider = new SpinnerSlider({
            $element: $html.find('#cmapCenter'),
            init: 128,
            min: 1,
            sliderMax: 254,
            step: 1,
            updateCallback: updateCallback
          });
          return {
            html: $html, getParams: function () {
              return spinnerSlider.getValue();
            }, getFilter: function () {                     /*eslint new-cap: 0*/
              return OpenSeadragon.Filters.COLORMAP(cmapUpdate(), spinnerSlider.getValue());
            }, sync: true
          };
        }
    },
    {
	        name: 'Contrast',
	        help: 'Range is from 0 to infinity, although sane values are from 0 ' +
	            'to 4 or 5. Values between 0 and 1 will lessen the contrast ' +
	            'while values greater than 1 will increase it.',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 1.3,
	                min: 0,
	                sliderMax: 4,
	                step: 0.1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.CONTRAST(
	                        spinnerSlider.getValue());
	                },
	                sync: true
	            };
	        }
	    }, {
	        name: 'Exposure',
	        help: 'Range is -100 to 100. Values < 0 will decrease ' +
	            'exposure while values > 0 will increase exposure',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 10,
	                min: -100,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.exposure(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Gamma',
	        help: 'Range is from 0 to infinity, although sane values ' +
	            'are from 0 to 4 or 5. Values between 0 and 1 will ' +
	            'lessen the contrast while values greater than 1 will increase it.',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 0.5,
	                min: 0,
	                sliderMax: 5,
	                step: 0.1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return OpenSeadragon.Filters.GAMMA(value);
	                }
	            };
	        }
	    }, {
	        name: 'Hue',
	        help: 'hue value is between 0 to 100 representing the ' +
	            'percentage of Hue shift in the 0 to 360 range',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 20,
	                min: 0,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.hue(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Saturation',
	        help: 'saturation value has to be between -100 and 100',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 50,
	                min: -100,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.saturation(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Vibrance',
	        help: 'vibrance value has to be between -100 and 100',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 50,
	                min: -100,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.vibrance(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Sepia',
	        help: 'sepia value has to be between 0 and 100',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 50,
	                min: 0,
	                max: 100,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.sepia(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Noise',
	        help: 'Noise cannot be smaller than 0',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 50,
	                min: 0,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    var value = spinnerSlider.getValue();
	                    return function(context, callback) {
	                        caman(context.canvas, function() {
	                            this.noise(value);
	                            this.render(callback); // don't forget to call the callback.
	                        });
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Greyscale',
	        generate: function() {
	            return {
	                html: '',
	                getParams: function() {
	                    return '';
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.GREYSCALE();
	                },
	                sync: true
	            };
	        }
	    }, {
	        name: 'Sobel Edge',
	        generate: function() {
	            return {
	                html: '',
	                getParams: function() {
	                    return '';
	                },
	                getFilter: function() {
	                    return function(context, callback) {
	                        var imgData = context.getImageData(
	                            0, 0, context.canvas.width, context.canvas.height);
	                        var pixels = imgData.data;
	                        var originalPixels = context.getImageData(0, 0, context.canvas.width, context.canvas.height).data;
	                        var oneRowOffset = context.canvas.width * 4;
	                        var onePixelOffset = 4;
	                        var Gy, Gx;
	                        var idx = 0;
	                        for (var i = 1; i < context.canvas.height - 1; i += 1) {
	                            idx = oneRowOffset * i + 4;
	                            for (var j = 1; j < context.canvas.width - 1; j += 1) {
	                                Gy = originalPixels[idx - onePixelOffset + oneRowOffset] + 2 * originalPixels[idx + oneRowOffset] + originalPixels[idx + onePixelOffset + oneRowOffset];
	                                Gy = Gy - (originalPixels[idx - onePixelOffset - oneRowOffset] + 2 * originalPixels[idx - oneRowOffset] + originalPixels[idx + onePixelOffset - oneRowOffset]);
	                                Gx = originalPixels[idx + onePixelOffset - oneRowOffset] + 2 * originalPixels[idx + onePixelOffset] + originalPixels[idx + onePixelOffset + oneRowOffset];
	                                Gx = Gx - (originalPixels[idx - onePixelOffset - oneRowOffset] + 2 * originalPixels[idx - onePixelOffset] + originalPixels[idx - onePixelOffset + oneRowOffset]);
	                                pixels[idx] = Math.sqrt(Gx * Gx + Gy * Gy); // 0.5*Math.abs(Gx) + 0.5*Math.abs(Gy);//100*Math.atan(Gy,Gx);
	                                pixels[idx + 1] = 0;
	                                pixels[idx + 2] = 0;
	                                idx += 4;
	                            }
	                        }
	                        context.putImageData(imgData, 0, 0);
	                        callback();
	                    };
	                }
	            };
	        }
	    }, {
	        name: 'Brightness',
	        help: 'Brightness must be between -255 (darker) and 255 (brighter).',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 50,
	                min: -255,
	                max: 255,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.BRIGHTNESS(
	                        spinnerSlider.getValue());
	                },
	                sync: true
	            };
	        }
	    }, {
	        name: 'Erosion',
	        help: 'The erosion kernel size must be an odd number.',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinner = new Spinner({
	                $element: $html,
	                init: 3,
	                min: 3,
	                step: 2,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinner.getValue();
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.MORPHOLOGICAL_OPERATION(
	                        spinner.getValue(), Math.min);
	                }
	            };
	        }
	    }, {
	        name: 'Dilation',
	        help: 'The dilation kernel size must be an odd number.',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinner = new Spinner({
	                $element: $html,
	                init: 3,
	                min: 3,
	                step: 2,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinner.getValue();
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.MORPHOLOGICAL_OPERATION(
	                        spinner.getValue(), Math.max);
	                }
	            };
	        }
	    }, {
	        name: 'Thresholding',
	        help: 'The threshold must be between 0 and 255.',
	        generate: function(updateCallback) {
	            var $html = $('<div></div>');
	            var spinnerSlider = new SpinnerSlider({
	                $element: $html,
	                init: 127,
	                min: 0,
	                max: 255,
	                step: 1,
	                updateCallback: updateCallback
	            });
	            return {
	                html: $html,
	                getParams: function() {
	                    return spinnerSlider.getValue();
	                },
	                getFilter: function() {
	                    return OpenSeadragon.Filters.THRESHOLDING(
	                        spinnerSlider.getValue());
	                },
	                sync: true
	            };
	        }
	    }];
	availableFilters.sort(function(f1, f2) {
	    return f1.name.localeCompare(f2.name);
	});

	var idIncrement = 0;
	var hashTable = {};

	availableFilters.forEach(function(filter) {
	    var $li = $('<li></li>');
	    var $plus = $('<img src="images/plus.png" alt="+" class="button">');
	    $li.append($plus);
	    $li.append(filter.name);
	    $li.appendTo($('#available'));
	    $plus.click(function() {
	        var id = 'selected_' + idIncrement++;
	        var generatedFilter = filter.generate(updateFilters);
	        hashTable[id] = {
	            name: filter.name,
	            generatedFilter: generatedFilter
	        };
	        var $li = $('<li id="' + id + '"><div class="wdzt-table-layout"><div class="wdzt-row-layout"></div></div></li>');
	        var $minus = $('<div class="wdzt-cell-layout"><img src="images/minus.png" alt="-" class="button"></div>');
	        $li.find('.wdzt-row-layout').append($minus);
	        $li.find('.wdzt-row-layout').append('<div class="wdzt-cell-layout filterLabel">' + filter.name + '</div>');
	        if (filter.help) {
	            var $help = $('<div class="wdzt-cell-layout"><img src="images/help-browser-2.png" alt="help" title="' +
	                filter.help + '"></div>');
	            $help.tooltip();
	            $li.find('.wdzt-row-layout').append($help);
	        }
	        $li.find('.wdzt-row-layout').append(
	            $('<div class="wdzt-cell-layout wdzt-full-width"></div>')
	            .append(generatedFilter.html));
	        $minus.click(function() {
	            delete hashTable[id];
	            $li.remove();
	            updateFilters();
	        });
	        $li.appendTo($('#selected'));
	        updateFilters();
	    });
	});

	$('#selected').sortable({
	    containment: 'parent',
	    axis: 'y',
	    tolerance: 'pointer',
	    update: updateFilters
	});

	function updateFilters() {
	    var filters = [];
	    var sync = true;
	    $('#selected li').each(function() {
	        var id = this.id;
	        var filter = hashTable[id];
	        filters.push(filter.generatedFilter.getFilter());
	        sync &= filter.generatedFilter.sync;
	    });
	    viewer.setFilterOptions({
	        filters: {
	            processors: filters
	        },
	        loadMode: sync ? 'sync' : 'async'
	    });
	}



/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "index.html";

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "style.css";

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var jQuery = __webpack_require__(4);

	/*! jQuery UI - v1.10.3 - 2013-05-03
	* http://jqueryui.com
	* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.effect.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
	* Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */
	(function( $, undefined ) {

	var uuid = 0,
		runiqueId = /^ui-id-\d+$/;

	// $.ui might exist from components with no dependencies, e.g., $.ui.position
	$.ui = $.ui || {};

	$.extend( $.ui, {
		version: "1.10.3",

		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});

	// plugins
	$.fn.extend({
		focus: (function( orig ) {
			return function( delay, fn ) {
				return typeof delay === "number" ?
					this.each(function() {
						var elem = this;
						setTimeout(function() {
							$( elem ).focus();
							if ( fn ) {
								fn.call( elem );
							}
						}, delay );
					}) :
					orig.apply( this, arguments );
			};
		})( $.fn.focus ),

		scrollParent: function() {
			var scrollParent;
			if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				scrollParent = this.parents().filter(function() {
					return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			} else {
				scrollParent = this.parents().filter(function() {
					return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			}

			return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
		},

		zIndex: function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}

			if ( this.length ) {
				var elem = $( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}

			return 0;
		},

		uniqueId: function() {
			return this.each(function() {
				if ( !this.id ) {
					this.id = "ui-id-" + (++uuid);
				}
			});
		},

		removeUniqueId: function() {
			return this.each(function() {
				if ( runiqueId.test( this.id ) ) {
					$( this ).removeAttr( "id" );
				}
			});
		}
	});

	// selectors
	function focusable( element, isTabIndexNotNaN ) {
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			map = element.parentNode;
			mapName = map.name;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName ) ?
			!element.disabled :
			"a" === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible( element );
	}

	function visible( element ) {
		return $.expr.filters.visible( element ) &&
			!$( element ).parents().addBack().filter(function() {
				return $.css( this, "visibility" ) === "hidden";
			}).length;
	}

	$.extend( $.expr[ ":" ], {
		data: $.expr.createPseudo ?
			$.expr.createPseudo(function( dataName ) {
				return function( elem ) {
					return !!$.data( elem, dataName );
				};
			}) :
			// support: jQuery <1.8
			function( elem, i, match ) {
				return !!$.data( elem, match[ 3 ] );
			},

		focusable: function( element ) {
			return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
		},

		tabbable: function( element ) {
			var tabIndex = $.attr( element, "tabindex" ),
				isTabIndexNaN = isNaN( tabIndex );
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
		}
	});

	// support: jQuery <1.8
	if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
		$.each( [ "Width", "Height" ], function( i, name ) {
			var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
				type = name.toLowerCase(),
				orig = {
					innerWidth: $.fn.innerWidth,
					innerHeight: $.fn.innerHeight,
					outerWidth: $.fn.outerWidth,
					outerHeight: $.fn.outerHeight
				};

			function reduce( elem, size, border, margin ) {
				$.each( side, function() {
					size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
					if ( border ) {
						size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
					}
					if ( margin ) {
						size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
					}
				});
				return size;
			}

			$.fn[ "inner" + name ] = function( size ) {
				if ( size === undefined ) {
					return orig[ "inner" + name ].call( this );
				}

				return this.each(function() {
					$( this ).css( type, reduce( this, size ) + "px" );
				});
			};

			$.fn[ "outer" + name] = function( size, margin ) {
				if ( typeof size !== "number" ) {
					return orig[ "outer" + name ].call( this, size );
				}

				return this.each(function() {
					$( this).css( type, reduce( this, size, true, margin ) + "px" );
				});
			};
		});
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
	if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
		$.fn.removeData = (function( removeData ) {
			return function( key ) {
				if ( arguments.length ) {
					return removeData.call( this, $.camelCase( key ) );
				} else {
					return removeData.call( this );
				}
			};
		})( $.fn.removeData );
	}





	// deprecated
	$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

	$.support.selectstart = "onselectstart" in document.createElement( "div" );
	$.fn.extend({
		disableSelection: function() {
			return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
				".ui-disableSelection", function( event ) {
					event.preventDefault();
				});
		},

		enableSelection: function() {
			return this.unbind( ".ui-disableSelection" );
		}
	});

	$.extend( $.ui, {
		// $.ui.plugin is deprecated. Use $.widget() extensions instead.
		plugin: {
			add: function( module, option, set ) {
				var i,
					proto = $.ui[ module ].prototype;
				for ( i in set ) {
					proto.plugins[ i ] = proto.plugins[ i ] || [];
					proto.plugins[ i ].push( [ option, set[ i ] ] );
				}
			},
			call: function( instance, name, args ) {
				var i,
					set = instance.plugins[ name ];
				if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
					return;
				}

				for ( i = 0; i < set.length; i++ ) {
					if ( instance.options[ set[ i ][ 0 ] ] ) {
						set[ i ][ 1 ].apply( instance.element, args );
					}
				}
			}
		},

		// only used by resizable
		hasScroll: function( el, a ) {

			//If overflow is hidden, the element might have extra content, but the user wants to hide it
			if ( $( el ).css( "overflow" ) === "hidden") {
				return false;
			}

			var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
				has = false;

			if ( el[ scroll ] > 0 ) {
				return true;
			}

			// TODO: determine which cases actually cause this to happen
			// if the element doesn't have the scroll set, see if it's possible to
			// set the scroll
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
			return has;
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	var uuid = 0,
		slice = Array.prototype.slice,
		_cleanData = $.cleanData;
	$.cleanData = function( elems ) {
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			try {
				$( elem ).triggerHandler( "remove" );
			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		_cleanData( elems );
	};

	$.widget = function( name, base, prototype ) {
		var fullName, existingConstructor, constructor, basePrototype,
			// proxiedPrototype allows the provided prototype to remain unmodified
			// so that it can be used as a mixin for multiple widgets (#8876)
			proxiedPrototype = {},
			namespace = name.split( "." )[ 0 ];

		name = name.split( "." )[ 1 ];
		fullName = namespace + "-" + name;

		if ( !prototype ) {
			prototype = base;
			base = $.Widget;
		}

		// create selector for plugin
		$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
			return !!$.data( elem, fullName );
		};

		$[ namespace ] = $[ namespace ] || {};
		existingConstructor = $[ namespace ][ name ];
		constructor = $[ namespace ][ name ] = function( options, element ) {
			// allow instantiation without "new" keyword
			if ( !this._createWidget ) {
				return new constructor( options, element );
			}

			// allow instantiation without initializing for simple inheritance
			// must use "new" keyword (the code above always passes args)
			if ( arguments.length ) {
				this._createWidget( options, element );
			}
		};
		// extend with the existing constructor to carry over any static properties
		$.extend( constructor, existingConstructor, {
			version: prototype.version,
			// copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: $.extend( {}, prototype ),
			// track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		});

		basePrototype = new base();
		// we need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = $.widget.extend( {}, basePrototype.options );
		$.each( prototype, function( prop, value ) {
			if ( !$.isFunction( value ) ) {
				proxiedPrototype[ prop ] = value;
				return;
			}
			proxiedPrototype[ prop ] = (function() {
				var _super = function() {
						return base.prototype[ prop ].apply( this, arguments );
					},
					_superApply = function( args ) {
						return base.prototype[ prop ].apply( this, args );
					};
				return function() {
					var __super = this._super,
						__superApply = this._superApply,
						returnValue;

					this._super = _super;
					this._superApply = _superApply;

					returnValue = value.apply( this, arguments );

					this._super = __super;
					this._superApply = __superApply;

					return returnValue;
				};
			})();
		});
		constructor.prototype = $.widget.extend( basePrototype, {
			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		});

		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if ( existingConstructor ) {
			$.each( existingConstructor._childConstructors, function( i, child ) {
				var childPrototype = child.prototype;

				// redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
			});
			// remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		} else {
			base._childConstructors.push( constructor );
		}

		$.widget.bridge( name, constructor );
	};

	$.widget.extend = function( target ) {
		var input = slice.call( arguments, 1 ),
			inputIndex = 0,
			inputLength = input.length,
			key,
			value;
		for ( ; inputIndex < inputLength; inputIndex++ ) {
			for ( key in input[ inputIndex ] ) {
				value = input[ inputIndex ][ key ];
				if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
					// Clone objects
					if ( $.isPlainObject( value ) ) {
						target[ key ] = $.isPlainObject( target[ key ] ) ?
							$.widget.extend( {}, target[ key ], value ) :
							// Don't extend strings, arrays, etc. with objects
							$.widget.extend( {}, value );
					// Copy everything else by reference
					} else {
						target[ key ] = value;
					}
				}
			}
		}
		return target;
	};

	$.widget.bridge = function( name, object ) {
		var fullName = object.prototype.widgetFullName || name;
		$.fn[ name ] = function( options ) {
			var isMethodCall = typeof options === "string",
				args = slice.call( arguments, 1 ),
				returnValue = this;

			// allow multiple hashes to be passed on init
			options = !isMethodCall && args.length ?
				$.widget.extend.apply( null, [ options ].concat(args) ) :
				options;

			if ( isMethodCall ) {
				this.each(function() {
					var methodValue,
						instance = $.data( this, fullName );
					if ( !instance ) {
						return $.error( "cannot call methods on " + name + " prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}
					if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name + " widget instance" );
					}
					methodValue = instance[ options ].apply( instance, args );
					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				});
			} else {
				this.each(function() {
					var instance = $.data( this, fullName );
					if ( instance ) {
						instance.option( options || {} )._init();
					} else {
						$.data( this, fullName, new object( options, this ) );
					}
				});
			}

			return returnValue;
		};
	};

	$.Widget = function( /* options, element */ ) {};
	$.Widget._childConstructors = [];

	$.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			disabled: false,

			// callbacks
			create: null
		},
		_createWidget: function( options, element ) {
			element = $( element || this.defaultElement || this )[ 0 ];
			this.element = $( element );
			this.uuid = uuid++;
			this.eventNamespace = "." + this.widgetName + this.uuid;
			this.options = $.widget.extend( {},
				this.options,
				this._getCreateOptions(),
				options );

			this.bindings = $();
			this.hoverable = $();
			this.focusable = $();

			if ( element !== this ) {
				$.data( element, this.widgetFullName, this );
				this._on( true, this.element, {
					remove: function( event ) {
						if ( event.target === element ) {
							this.destroy();
						}
					}
				});
				this.document = $( element.style ?
					// element within the document
					element.ownerDocument :
					// element is window or document
					element.document || element );
				this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
			}

			this._create();
			this._trigger( "create", null, this._getCreateEventData() );
			this._init();
		},
		_getCreateOptions: $.noop,
		_getCreateEventData: $.noop,
		_create: $.noop,
		_init: $.noop,

		destroy: function() {
			this._destroy();
			// we can probably remove the unbind calls in 2.0
			// all event bindings should go through this._on()
			this.element
				.unbind( this.eventNamespace )
				// 1.9 BC for #7810
				// TODO remove dual storage
				.removeData( this.widgetName )
				.removeData( this.widgetFullName )
				// support: jquery <1.6.3
				// http://bugs.jquery.com/ticket/9413
				.removeData( $.camelCase( this.widgetFullName ) );
			this.widget()
				.unbind( this.eventNamespace )
				.removeAttr( "aria-disabled" )
				.removeClass(
					this.widgetFullName + "-disabled " +
					"ui-state-disabled" );

			// clean up events and states
			this.bindings.unbind( this.eventNamespace );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		},
		_destroy: $.noop,

		widget: function() {
			return this.element;
		},

		option: function( key, value ) {
			var options = key,
				parts,
				curOption,
				i;

			if ( arguments.length === 0 ) {
				// don't return a reference to the internal hash
				return $.widget.extend( {}, this.options );
			}

			if ( typeof key === "string" ) {
				// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
				options = {};
				parts = key.split( "." );
				key = parts.shift();
				if ( parts.length ) {
					curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
					for ( i = 0; i < parts.length - 1; i++ ) {
						curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
						curOption = curOption[ parts[ i ] ];
					}
					key = parts.pop();
					if ( value === undefined ) {
						return curOption[ key ] === undefined ? null : curOption[ key ];
					}
					curOption[ key ] = value;
				} else {
					if ( value === undefined ) {
						return this.options[ key ] === undefined ? null : this.options[ key ];
					}
					options[ key ] = value;
				}
			}

			this._setOptions( options );

			return this;
		},
		_setOptions: function( options ) {
			var key;

			for ( key in options ) {
				this._setOption( key, options[ key ] );
			}

			return this;
		},
		_setOption: function( key, value ) {
			this.options[ key ] = value;

			if ( key === "disabled" ) {
				this.widget()
					.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
				this.hoverable.removeClass( "ui-state-hover" );
				this.focusable.removeClass( "ui-state-focus" );
			}

			return this;
		},

		enable: function() {
			return this._setOption( "disabled", false );
		},
		disable: function() {
			return this._setOption( "disabled", true );
		},

		_on: function( suppressDisabledCheck, element, handlers ) {
			var delegateElement,
				instance = this;

			// no suppressDisabledCheck flag, shuffle arguments
			if ( typeof suppressDisabledCheck !== "boolean" ) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}

			// no element argument, shuffle and use this.element
			if ( !handlers ) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			} else {
				// accept selectors, DOM elements
				element = delegateElement = $( element );
				this.bindings = this.bindings.add( element );
			}

			$.each( handlers, function( event, handler ) {
				function handlerProxy() {
					// allow widgets to customize the disabled handling
					// - disabled as an array instead of boolean
					// - disabled class as method for disabling individual parts
					if ( !suppressDisabledCheck &&
							( instance.options.disabled === true ||
								$( this ).hasClass( "ui-state-disabled" ) ) ) {
						return;
					}
					return ( typeof handler === "string" ? instance[ handler ] : handler )
						.apply( instance, arguments );
				}

				// copy the guid so direct unbinding works
				if ( typeof handler !== "string" ) {
					handlerProxy.guid = handler.guid =
						handler.guid || handlerProxy.guid || $.guid++;
				}

				var match = event.match( /^(\w+)\s*(.*)$/ ),
					eventName = match[1] + instance.eventNamespace,
					selector = match[2];
				if ( selector ) {
					delegateElement.delegate( selector, eventName, handlerProxy );
				} else {
					element.bind( eventName, handlerProxy );
				}
			});
		},

		_off: function( element, eventName ) {
			eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
			element.unbind( eventName ).undelegate( eventName );
		},

		_delay: function( handler, delay ) {
			function handlerProxy() {
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}
			var instance = this;
			return setTimeout( handlerProxy, delay || 0 );
		},

		_hoverable: function( element ) {
			this.hoverable = this.hoverable.add( element );
			this._on( element, {
				mouseenter: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-hover" );
				},
				mouseleave: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-hover" );
				}
			});
		},

		_focusable: function( element ) {
			this.focusable = this.focusable.add( element );
			this._on( element, {
				focusin: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-focus" );
				},
				focusout: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-focus" );
				}
			});
		},

		_trigger: function( type, event, data ) {
			var prop, orig,
				callback = this.options[ type ];

			data = data || {};
			event = $.Event( event );
			event.type = ( type === this.widgetEventPrefix ?
				type :
				this.widgetEventPrefix + type ).toLowerCase();
			// the original event may come from any element
			// so we need to reset the target on the new event
			event.target = this.element[ 0 ];

			// copy original event properties over to the new event
			orig = event.originalEvent;
			if ( orig ) {
				for ( prop in orig ) {
					if ( !( prop in event ) ) {
						event[ prop ] = orig[ prop ];
					}
				}
			}

			this.element.trigger( event, data );
			return !( $.isFunction( callback ) &&
				callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
				event.isDefaultPrevented() );
		}
	};

	$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
		$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
			if ( typeof options === "string" ) {
				options = { effect: options };
			}
			var hasOptions,
				effectName = !options ?
					method :
					options === true || typeof options === "number" ?
						defaultEffect :
						options.effect || defaultEffect;
			options = options || {};
			if ( typeof options === "number" ) {
				options = { duration: options };
			}
			hasOptions = !$.isEmptyObject( options );
			options.complete = callback;
			if ( options.delay ) {
				element.delay( options.delay );
			}
			if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
				element[ method ]( options );
			} else if ( effectName !== method && element[ effectName ] ) {
				element[ effectName ]( options.duration, options.easing, callback );
			} else {
				element.queue(function( next ) {
					$( this )[ method ]();
					if ( callback ) {
						callback.call( element[ 0 ] );
					}
					next();
				});
			}
		};
	});

	})( jQuery );

	(function( $, undefined ) {

	var mouseHandled = false;
	$( document ).mouseup( function() {
		mouseHandled = false;
	});

	$.widget("ui.mouse", {
		version: "1.10.3",
		options: {
			cancel: "input,textarea,button,select,option",
			distance: 1,
			delay: 0
		},
		_mouseInit: function() {
			var that = this;

			this.element
				.bind("mousedown."+this.widgetName, function(event) {
					return that._mouseDown(event);
				})
				.bind("click."+this.widgetName, function(event) {
					if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
						$.removeData(event.target, that.widgetName + ".preventClickEvent");
						event.stopImmediatePropagation();
						return false;
					}
				});

			this.started = false;
		},

		// TODO: make sure destroying one instance of mouse doesn't mess with
		// other instances of mouse
		_mouseDestroy: function() {
			this.element.unbind("."+this.widgetName);
			if ( this._mouseMoveDelegate ) {
				$(document)
					.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
					.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
			}
		},

		_mouseDown: function(event) {
			// don't let more than one widget handle mouseStart
			if( mouseHandled ) { return; }

			// we may have missed mouseup (out of window)
			(this._mouseStarted && this._mouseUp(event));

			this._mouseDownEvent = event;

			var that = this,
				btnIsLeft = (event.which === 1),
				// event.target.nodeName works around a bug in IE 8 with
				// disabled inputs (#7620)
				elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
			if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
				return true;
			}

			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function() {
					that.mouseDelayMet = true;
				}, this.options.delay);
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted = (this._mouseStart(event) !== false);
				if (!this._mouseStarted) {
					event.preventDefault();
					return true;
				}
			}

			// Click event may never have fired (Gecko & Opera)
			if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
				$.removeData(event.target, this.widgetName + ".preventClickEvent");
			}

			// these delegates are required to keep context
			this._mouseMoveDelegate = function(event) {
				return that._mouseMove(event);
			};
			this._mouseUpDelegate = function(event) {
				return that._mouseUp(event);
			};
			$(document)
				.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

			event.preventDefault();

			mouseHandled = true;
			return true;
		},

		_mouseMove: function(event) {
			// IE mouseup check - mouseup happened when mouse was out of window
			if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
				return this._mouseUp(event);
			}

			if (this._mouseStarted) {
				this._mouseDrag(event);
				return event.preventDefault();
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted =
					(this._mouseStart(this._mouseDownEvent, event) !== false);
				(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
			}

			return !this._mouseStarted;
		},

		_mouseUp: function(event) {
			$(document)
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

			if (this._mouseStarted) {
				this._mouseStarted = false;

				if (event.target === this._mouseDownEvent.target) {
					$.data(event.target, this.widgetName + ".preventClickEvent", true);
				}

				this._mouseStop(event);
			}

			return false;
		},

		_mouseDistanceMet: function(event) {
			return (Math.max(
					Math.abs(this._mouseDownEvent.pageX - event.pageX),
					Math.abs(this._mouseDownEvent.pageY - event.pageY)
				) >= this.options.distance
			);
		},

		_mouseDelayMet: function(/* event */) {
			return this.mouseDelayMet;
		},

		// These are placeholder methods, to be overriden by extending plugin
		_mouseStart: function(/* event */) {},
		_mouseDrag: function(/* event */) {},
		_mouseStop: function(/* event */) {},
		_mouseCapture: function(/* event */) { return true; }
	});

	})(jQuery);

	(function( $, undefined ) {

	$.widget("ui.draggable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "drag",
		options: {
			addClasses: true,
			appendTo: "parent",
			axis: false,
			connectToSortable: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			grid: false,
			handle: false,
			helper: "original",
			iframeFix: false,
			opacity: false,
			refreshPositions: false,
			revert: false,
			revertDuration: 500,
			scope: "default",
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			snap: false,
			snapMode: "both",
			snapTolerance: 20,
			stack: false,
			zIndex: false,

			// callbacks
			drag: null,
			start: null,
			stop: null
		},
		_create: function() {

			if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
				this.element[0].style.position = "relative";
			}
			if (this.options.addClasses){
				this.element.addClass("ui-draggable");
			}
			if (this.options.disabled){
				this.element.addClass("ui-draggable-disabled");
			}

			this._mouseInit();

		},

		_destroy: function() {
			this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
			this._mouseDestroy();
		},

		_mouseCapture: function(event) {

			var o = this.options;

			// among others, prevent a drag on a resizable-handle
			if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
				return false;
			}

			//Quit if we're not on a valid handle
			this.handle = this._getHandle(event);
			if (!this.handle) {
				return false;
			}

			$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
				$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
				.css({
					width: this.offsetWidth+"px", height: this.offsetHeight+"px",
					position: "absolute", opacity: "0.001", zIndex: 1000
				})
				.css($(this).offset())
				.appendTo("body");
			});

			return true;

		},

		_mouseStart: function(event) {

			var o = this.options;

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			this.helper.addClass("ui-draggable-dragging");

			//Cache the helper size
			this._cacheHelperProportions();

			//If ddmanager is used for droppables, set the global draggable
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Store the helper's css position
			this.cssPosition = this.helper.css( "position" );
			this.scrollParent = this.helper.scrollParent();
			this.offsetParent = this.helper.offsetParent();
			this.offsetParentCssPosition = this.offsetParent.css( "position" );

			//The element's absolute position on the page minus margins
			this.offset = this.positionAbs = this.element.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			//Reset scroll cache
			this.offset.scroll = false;

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			//Generate the original position
			this.originalPosition = this.position = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Set a containment if given in the options
			this._setContainment();

			//Trigger event + callbacks
			if(this._trigger("start", event) === false) {
				this._clear();
				return false;
			}

			//Recache the helper size
			this._cacheHelperProportions();

			//Prepare the droppable offsets
			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}


			this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

			//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
			if ( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStart(this, event);
			}

			return true;
		},

		_mouseDrag: function(event, noPropagation) {
			// reset any necessary cached properties (see #5009)
			if ( this.offsetParentCssPosition === "fixed" ) {
				this.offset.parent = this._getParentOffset();
			}

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			//Call plugins and callbacks and use the resulting position if something is returned
			if (!noPropagation) {
				var ui = this._uiHash();
				if(this._trigger("drag", event, ui) === false) {
					this._mouseUp({});
					return false;
				}
				this.position = ui.position;
			}

			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			return false;
		},

		_mouseStop: function(event) {

			//If we are using droppables, inform the manager about the drop
			var that = this,
				dropped = false;
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				dropped = $.ui.ddmanager.drop(this, event);
			}

			//if a drop comes from outside (a sortable)
			if(this.dropped) {
				dropped = this.dropped;
				this.dropped = false;
			}

			//if the original element is no longer in the DOM don't bother to continue (see #8269)
			if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
				return false;
			}

			if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
				$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
					if(that._trigger("stop", event) !== false) {
						that._clear();
					}
				});
			} else {
				if(this._trigger("stop", event) !== false) {
					this._clear();
				}
			}

			return false;
		},

		_mouseUp: function(event) {
			//Remove frame helpers
			$("div.ui-draggable-iframeFix").each(function() {
				this.parentNode.removeChild(this);
			});

			//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
			if( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStop(this, event);
			}

			return $.ui.mouse.prototype._mouseUp.call(this, event);
		},

		cancel: function() {

			if(this.helper.is(".ui-draggable-dragging")) {
				this._mouseUp({});
			} else {
				this._clear();
			}

			return this;

		},

		_getHandle: function(event) {
			return this.options.handle ?
				!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
				true;
		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

			if(!helper.parents("body").length) {
				helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
			}

			if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
				helper.css("position", "absolute");
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {

			//Get the offsetParent and cache its position
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			//This needs to be actually done for all browsers, since pageX/pageY includes this information
			//Ugly IE fix
			if((this.offsetParent[0] === document.body) ||
				(this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.element.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"),10) || 0),
				top: (parseInt(this.element.css("marginTop"),10) || 0),
				right: (parseInt(this.element.css("marginRight"),10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var over, c, ce,
				o = this.options;

			if ( !o.containment ) {
				this.containment = null;
				return;
			}

			if ( o.containment === "window" ) {
				this.containment = [
					$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
					$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
					$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
					$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}

			if ( o.containment === "document") {
				this.containment = [
					0,
					0,
					$( document ).width() - this.helperProportions.width - this.margins.left,
					( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}

			if ( o.containment.constructor === Array ) {
				this.containment = o.containment;
				return;
			}

			if ( o.containment === "parent" ) {
				o.containment = this.helper[ 0 ].parentNode;
			}

			c = $( o.containment );
			ce = c[ 0 ];

			if( !ce ) {
				return;
			}

			over = c.css( "overflow" ) !== "hidden";

			this.containment = [
				( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
				( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
				( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
				( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
			];
			this.relative_container = c;
		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}

			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

			//Cache the scroll
			if (!this.offset.scroll) {
				this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
			}

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
				)
			};

		},

		_generatePosition: function(event) {

			var containment, co, top, left,
				o = this.options,
				scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
				pageX = event.pageX,
				pageY = event.pageY;

			//Cache the scroll
			if (!this.offset.scroll) {
				this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
			}

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			// If we are not dragging yet, we won't check for options
			if ( this.originalPosition ) {
				if ( this.containment ) {
					if ( this.relative_container ){
						co = this.relative_container.offset();
						containment = [
							this.containment[ 0 ] + co.left,
							this.containment[ 1 ] + co.top,
							this.containment[ 2 ] + co.left,
							this.containment[ 3 ] + co.top
						];
					}
					else {
						containment = this.containment;
					}

					if(event.pageX - this.offset.click.left < containment[0]) {
						pageX = containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < containment[1]) {
						pageY = containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > containment[2]) {
						pageX = containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > containment[3]) {
						pageY = containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
					top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
					pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
					pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																	// The absolute mouse position
					this.offset.click.top	-												// Click offset (relative to the element)
					this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
				),
				left: (
					pageX -																	// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
				)
			};

		},

		_clear: function() {
			this.helper.removeClass("ui-draggable-dragging");
			if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
				this.helper.remove();
			}
			this.helper = null;
			this.cancelHelperRemoval = false;
		},

		// From now on bulk stuff - mainly helpers

		_trigger: function(type, event, ui) {
			ui = ui || this._uiHash();
			$.ui.plugin.call(this, type, [event, ui]);
			//The absolute position has to be recalculated after plugins
			if(type === "drag") {
				this.positionAbs = this._convertPositionTo("absolute");
			}
			return $.Widget.prototype._trigger.call(this, type, event, ui);
		},

		plugins: {},

		_uiHash: function() {
			return {
				helper: this.helper,
				position: this.position,
				originalPosition: this.originalPosition,
				offset: this.positionAbs
			};
		}

	});

	$.ui.plugin.add("draggable", "connectToSortable", {
		start: function(event, ui) {

			var inst = $(this).data("ui-draggable"), o = inst.options,
				uiSortable = $.extend({}, ui, { item: inst.element });
			inst.sortables = [];
			$(o.connectToSortable).each(function() {
				var sortable = $.data(this, "ui-sortable");
				if (sortable && !sortable.options.disabled) {
					inst.sortables.push({
						instance: sortable,
						shouldRevert: sortable.options.revert
					});
					sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
					sortable._trigger("activate", event, uiSortable);
				}
			});

		},
		stop: function(event, ui) {

			//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
			var inst = $(this).data("ui-draggable"),
				uiSortable = $.extend({}, ui, { item: inst.element });

			$.each(inst.sortables, function() {
				if(this.instance.isOver) {

					this.instance.isOver = 0;

					inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
					this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

					//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
					if(this.shouldRevert) {
						this.instance.options.revert = this.shouldRevert;
					}

					//Trigger the stop of the sortable
					this.instance._mouseStop(event);

					this.instance.options.helper = this.instance.options._helper;

					//If the helper has been the original item, restore properties in the sortable
					if(inst.options.helper === "original") {
						this.instance.currentItem.css({ top: "auto", left: "auto" });
					}

				} else {
					this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
					this.instance._trigger("deactivate", event, uiSortable);
				}

			});

		},
		drag: function(event, ui) {

			var inst = $(this).data("ui-draggable"), that = this;

			$.each(inst.sortables, function() {

				var innermostIntersecting = false,
					thisSortable = this;

				//Copy over some variables to allow calling the sortable's native _intersectsWith
				this.instance.positionAbs = inst.positionAbs;
				this.instance.helperProportions = inst.helperProportions;
				this.instance.offset.click = inst.offset.click;

				if(this.instance._intersectsWith(this.instance.containerCache)) {
					innermostIntersecting = true;
					$.each(inst.sortables, function () {
						this.instance.positionAbs = inst.positionAbs;
						this.instance.helperProportions = inst.helperProportions;
						this.instance.offset.click = inst.offset.click;
						if (this !== thisSortable &&
							this.instance._intersectsWith(this.instance.containerCache) &&
							$.contains(thisSortable.instance.element[0], this.instance.element[0])
						) {
							innermostIntersecting = false;
						}
						return innermostIntersecting;
					});
				}


				if(innermostIntersecting) {
					//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
					if(!this.instance.isOver) {

						this.instance.isOver = 1;
						//Now we fake the start of dragging for the sortable instance,
						//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
						//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
						this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
						this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
						this.instance.options.helper = function() { return ui.helper[0]; };

						event.target = this.instance.currentItem[0];
						this.instance._mouseCapture(event, true);
						this.instance._mouseStart(event, true, true);

						//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
						this.instance.offset.click.top = inst.offset.click.top;
						this.instance.offset.click.left = inst.offset.click.left;
						this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
						this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

						inst._trigger("toSortable", event);
						inst.dropped = this.instance.element; //draggable revert needs that
						//hack so receive/update callbacks work (mostly)
						inst.currentItem = inst.element;
						this.instance.fromOutside = inst;

					}

					//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
					if(this.instance.currentItem) {
						this.instance._mouseDrag(event);
					}

				} else {

					//If it doesn't intersect with the sortable, and it intersected before,
					//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
					if(this.instance.isOver) {

						this.instance.isOver = 0;
						this.instance.cancelHelperRemoval = true;

						//Prevent reverting on this forced stop
						this.instance.options.revert = false;

						// The out event needs to be triggered independently
						this.instance._trigger("out", event, this.instance._uiHash(this.instance));

						this.instance._mouseStop(event, true);
						this.instance.options.helper = this.instance.options._helper;

						//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
						this.instance.currentItem.remove();
						if(this.instance.placeholder) {
							this.instance.placeholder.remove();
						}

						inst._trigger("fromSortable", event);
						inst.dropped = false; //draggable revert needs that
					}

				}

			});

		}
	});

	$.ui.plugin.add("draggable", "cursor", {
		start: function() {
			var t = $("body"), o = $(this).data("ui-draggable").options;
			if (t.css("cursor")) {
				o._cursor = t.css("cursor");
			}
			t.css("cursor", o.cursor);
		},
		stop: function() {
			var o = $(this).data("ui-draggable").options;
			if (o._cursor) {
				$("body").css("cursor", o._cursor);
			}
		}
	});

	$.ui.plugin.add("draggable", "opacity", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("opacity")) {
				o._opacity = t.css("opacity");
			}
			t.css("opacity", o.opacity);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._opacity) {
				$(ui.helper).css("opacity", o._opacity);
			}
		}
	});

	$.ui.plugin.add("draggable", "scroll", {
		start: function() {
			var i = $(this).data("ui-draggable");
			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
				i.overflowOffset = i.scrollParent.offset();
			}
		},
		drag: function( event ) {

			var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

				if(!o.axis || o.axis !== "x") {
					if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
					}
				}

				if(!o.axis || o.axis !== "y") {
					if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
					}
				}

			} else {

				if(!o.axis || o.axis !== "x") {
					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}
				}

				if(!o.axis || o.axis !== "y") {
					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(i, event);
			}

		}
	});

	$.ui.plugin.add("draggable", "snap", {
		start: function() {

			var i = $(this).data("ui-draggable"),
				o = i.options;

			i.snapElements = [];

			$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
				var $t = $(this),
					$o = $t.offset();
				if(this !== i.element[0]) {
					i.snapElements.push({
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					});
				}
			});

		},
		drag: function(event, ui) {

			var ts, bs, ls, rs, l, r, t, b, i, first,
				inst = $(this).data("ui-draggable"),
				o = inst.options,
				d = o.snapTolerance,
				x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
				y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

			for (i = inst.snapElements.length - 1; i >= 0; i--){

				l = inst.snapElements[i].left;
				r = l + inst.snapElements[i].width;
				t = inst.snapElements[i].top;
				b = t + inst.snapElements[i].height;

				if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
					if(inst.snapElements[i].snapping) {
						(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
					}
					inst.snapElements[i].snapping = false;
					continue;
				}

				if(o.snapMode !== "inner") {
					ts = Math.abs(t - y2) <= d;
					bs = Math.abs(b - y1) <= d;
					ls = Math.abs(l - x2) <= d;
					rs = Math.abs(r - x1) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
					}
				}

				first = (ts || bs || ls || rs);

				if(o.snapMode !== "outer") {
					ts = Math.abs(t - y1) <= d;
					bs = Math.abs(b - y2) <= d;
					ls = Math.abs(l - x1) <= d;
					rs = Math.abs(r - x2) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
					}
				}

				if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
					(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

			}

		}
	});

	$.ui.plugin.add("draggable", "stack", {
		start: function() {
			var min,
				o = this.data("ui-draggable").options,
				group = $.makeArray($(o.stack)).sort(function(a,b) {
					return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
				});

			if (!group.length) { return; }

			min = parseInt($(group[0]).css("zIndex"), 10) || 0;
			$(group).each(function(i) {
				$(this).css("zIndex", min + i);
			});
			this.css("zIndex", (min + group.length));
		}
	});

	$.ui.plugin.add("draggable", "zIndex", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("zIndex")) {
				o._zIndex = t.css("zIndex");
			}
			t.css("zIndex", o.zIndex);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._zIndex) {
				$(ui.helper).css("zIndex", o._zIndex);
			}
		}
	});

	})(jQuery);

	(function( $, undefined ) {

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	$.widget("ui.droppable", {
		version: "1.10.3",
		widgetEventPrefix: "drop",
		options: {
			accept: "*",
			activeClass: false,
			addClasses: true,
			greedy: false,
			hoverClass: false,
			scope: "default",
			tolerance: "intersect",

			// callbacks
			activate: null,
			deactivate: null,
			drop: null,
			out: null,
			over: null
		},
		_create: function() {

			var o = this.options,
				accept = o.accept;

			this.isover = false;
			this.isout = true;

			this.accept = $.isFunction(accept) ? accept : function(d) {
				return d.is(accept);
			};

			//Store the droppable's proportions
			this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

			// Add the reference and positions to the manager
			$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
			$.ui.ddmanager.droppables[o.scope].push(this);

			(o.addClasses && this.element.addClass("ui-droppable"));

		},

		_destroy: function() {
			var i = 0,
				drop = $.ui.ddmanager.droppables[this.options.scope];

			for ( ; i < drop.length; i++ ) {
				if ( drop[i] === this ) {
					drop.splice(i, 1);
				}
			}

			this.element.removeClass("ui-droppable ui-droppable-disabled");
		},

		_setOption: function(key, value) {

			if(key === "accept") {
				this.accept = $.isFunction(value) ? value : function(d) {
					return d.is(value);
				};
			}
			$.Widget.prototype._setOption.apply(this, arguments);
		},

		_activate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.addClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("activate", event, this.ui(draggable));
			}
		},

		_deactivate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("deactivate", event, this.ui(draggable));
			}
		},

		_over: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.addClass(this.options.hoverClass);
				}
				this._trigger("over", event, this.ui(draggable));
			}

		},

		_out: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("out", event, this.ui(draggable));
			}

		},

		_drop: function(event,custom) {

			var draggable = custom || $.ui.ddmanager.current,
				childrenIntersection = false;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return false;
			}

			this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
				var inst = $.data(this, "ui-droppable");
				if(
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
					$.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
				) { childrenIntersection = true; return false; }
			});
			if(childrenIntersection) {
				return false;
			}

			if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.activeClass) {
					this.element.removeClass(this.options.activeClass);
				}
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("drop", event, this.ui(draggable));
				return this.element;
			}

			return false;

		},

		ui: function(c) {
			return {
				draggable: (c.currentItem || c.element),
				helper: c.helper,
				position: c.position,
				offset: c.positionAbs
			};
		}

	});

	$.ui.intersect = function(draggable, droppable, toleranceMode) {

		if (!droppable.offset) {
			return false;
		}

		var draggableLeft, draggableTop,
			x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
			y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left, r = l + droppable.proportions.width,
			t = droppable.offset.top, b = t + droppable.proportions.height;

		switch (toleranceMode) {
			case "fit":
				return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
			case "intersect":
				return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
					x2 - (draggable.helperProportions.width / 2) < r && // Left Half
					t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
					y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
			case "pointer":
				draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
				draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
				return isOverAxis( draggableTop, t, droppable.proportions.height ) && isOverAxis( draggableLeft, l, droppable.proportions.width );
			case "touch":
				return (
					(y1 >= t && y1 <= b) ||	// Top edge touching
					(y2 >= t && y2 <= b) ||	// Bottom edge touching
					(y1 < t && y2 > b)		// Surrounded vertically
				) && (
					(x1 >= l && x1 <= r) ||	// Left edge touching
					(x2 >= l && x2 <= r) ||	// Right edge touching
					(x1 < l && x2 > r)		// Surrounded horizontally
				);
			default:
				return false;
			}

	};

	/*
		This manager tracks offsets of draggables and droppables
	*/
	$.ui.ddmanager = {
		current: null,
		droppables: { "default": [] },
		prepareOffsets: function(t, event) {

			var i, j,
				m = $.ui.ddmanager.droppables[t.options.scope] || [],
				type = event ? event.type : null, // workaround for #2317
				list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

			droppablesLoop: for (i = 0; i < m.length; i++) {

				//No disabled and non-accepted
				if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
					continue;
				}

				// Filter out elements in the current dragged item
				for (j=0; j < list.length; j++) {
					if(list[j] === m[i].element[0]) {
						m[i].proportions.height = 0;
						continue droppablesLoop;
					}
				}

				m[i].visible = m[i].element.css("display") !== "none";
				if(!m[i].visible) {
					continue;
				}

				//Activate the droppable if used directly from draggables
				if(type === "mousedown") {
					m[i]._activate.call(m[i], event);
				}

				m[i].offset = m[i].element.offset();
				m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

			}

		},
		drop: function(draggable, event) {

			var dropped = false;
			// Create a copy of the droppables in case the list changes during the drop (#9116)
			$.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

				if(!this.options) {
					return;
				}
				if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
					dropped = this._drop.call(this, event) || dropped;
				}

				if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
					this.isout = true;
					this.isover = false;
					this._deactivate.call(this, event);
				}

			});
			return dropped;

		},
		dragStart: function( draggable, event ) {
			//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
			draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
				if( !draggable.options.refreshPositions ) {
					$.ui.ddmanager.prepareOffsets( draggable, event );
				}
			});
		},
		drag: function(draggable, event) {

			//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
			if(draggable.options.refreshPositions) {
				$.ui.ddmanager.prepareOffsets(draggable, event);
			}

			//Run through all droppables and check their positions based on specific tolerance options
			$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

				if(this.options.disabled || this.greedyChild || !this.visible) {
					return;
				}

				var parentInstance, scope, parent,
					intersects = $.ui.intersect(draggable, this, this.options.tolerance),
					c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
				if(!c) {
					return;
				}

				if (this.options.greedy) {
					// find droppable parents with same scope
					scope = this.options.scope;
					parent = this.element.parents(":data(ui-droppable)").filter(function () {
						return $.data(this, "ui-droppable").options.scope === scope;
					});

					if (parent.length) {
						parentInstance = $.data(parent[0], "ui-droppable");
						parentInstance.greedyChild = (c === "isover");
					}
				}

				// we just moved into a greedy child
				if (parentInstance && c === "isover") {
					parentInstance.isover = false;
					parentInstance.isout = true;
					parentInstance._out.call(parentInstance, event);
				}

				this[c] = true;
				this[c === "isout" ? "isover" : "isout"] = false;
				this[c === "isover" ? "_over" : "_out"].call(this, event);

				// we just moved out of a greedy child
				if (parentInstance && c === "isout") {
					parentInstance.isout = false;
					parentInstance.isover = true;
					parentInstance._over.call(parentInstance, event);
				}
			});

		},
		dragStop: function( draggable, event ) {
			draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
			//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
			if( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		}
	};

	})(jQuery);

	(function( $, undefined ) {

	function num(v) {
		return parseInt(v, 10) || 0;
	}

	function isNumber(value) {
		return !isNaN(parseInt(value, 10));
	}

	$.widget("ui.resizable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "resize",
		options: {
			alsoResize: false,
			animate: false,
			animateDuration: "slow",
			animateEasing: "swing",
			aspectRatio: false,
			autoHide: false,
			containment: false,
			ghost: false,
			grid: false,
			handles: "e,s,se",
			helper: false,
			maxHeight: null,
			maxWidth: null,
			minHeight: 10,
			minWidth: 10,
			// See #7960
			zIndex: 90,

			// callbacks
			resize: null,
			start: null,
			stop: null
		},
		_create: function() {

			var n, i, handle, axis, hname,
				that = this,
				o = this.options;
			this.element.addClass("ui-resizable");

			$.extend(this, {
				_aspectRatio: !!(o.aspectRatio),
				aspectRatio: o.aspectRatio,
				originalElement: this.element,
				_proportionallyResizeElements: [],
				_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
			});

			//Wrap the element if it cannot hold child nodes
			if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

				//Create a wrapper element and set the wrapper to the new current internal element
				this.element.wrap(
					$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
						position: this.element.css("position"),
						width: this.element.outerWidth(),
						height: this.element.outerHeight(),
						top: this.element.css("top"),
						left: this.element.css("left")
					})
				);

				//Overwrite the original this.element
				this.element = this.element.parent().data(
					"ui-resizable", this.element.data("ui-resizable")
				);

				this.elementIsWrapper = true;

				//Move margins to the wrapper
				this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
				this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

				//Prevent Safari textarea resize
				this.originalResizeStyle = this.originalElement.css("resize");
				this.originalElement.css("resize", "none");

				//Push the actual element to our proportionallyResize internal array
				this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

				// avoid IE jump (hard set the margin)
				this.originalElement.css({ margin: this.originalElement.css("margin") });

				// fix handlers offset
				this._proportionallyResize();

			}

			this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
			if(this.handles.constructor === String) {

				if ( this.handles === "all") {
					this.handles = "n,e,s,w,se,sw,ne,nw";
				}

				n = this.handles.split(",");
				this.handles = {};

				for(i = 0; i < n.length; i++) {

					handle = $.trim(n[i]);
					hname = "ui-resizable-"+handle;
					axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

					// Apply zIndex to all handles - see #7960
					axis.css({ zIndex: o.zIndex });

					//TODO : What's going on here?
					if ("se" === handle) {
						axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
					}

					//Insert into internal handles object and append to element
					this.handles[handle] = ".ui-resizable-"+handle;
					this.element.append(axis);
				}

			}

			this._renderAxis = function(target) {

				var i, axis, padPos, padWrapper;

				target = target || this.element;

				for(i in this.handles) {

					if(this.handles[i].constructor === String) {
						this.handles[i] = $(this.handles[i], this.element).show();
					}

					//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
					if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

						axis = $(this.handles[i], this.element);

						//Checking the correct pad and border
						padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

						//The padding type i have to apply...
						padPos = [ "padding",
							/ne|nw|n/.test(i) ? "Top" :
							/se|sw|s/.test(i) ? "Bottom" :
							/^e$/.test(i) ? "Right" : "Left" ].join("");

						target.css(padPos, padWrapper);

						this._proportionallyResize();

					}

					//TODO: What's that good for? There's not anything to be executed left
					if(!$(this.handles[i]).length) {
						continue;
					}
				}
			};

			//TODO: make renderAxis a prototype function
			this._renderAxis(this.element);

			this._handles = $(".ui-resizable-handle", this.element)
				.disableSelection();

			//Matching axis name
			this._handles.mouseover(function() {
				if (!that.resizing) {
					if (this.className) {
						axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
					}
					//Axis, default = se
					that.axis = axis && axis[1] ? axis[1] : "se";
				}
			});

			//If we want to auto hide the elements
			if (o.autoHide) {
				this._handles.hide();
				$(this.element)
					.addClass("ui-resizable-autohide")
					.mouseenter(function() {
						if (o.disabled) {
							return;
						}
						$(this).removeClass("ui-resizable-autohide");
						that._handles.show();
					})
					.mouseleave(function(){
						if (o.disabled) {
							return;
						}
						if (!that.resizing) {
							$(this).addClass("ui-resizable-autohide");
							that._handles.hide();
						}
					});
			}

			//Initialize the mouse interaction
			this._mouseInit();

		},

		_destroy: function() {

			this._mouseDestroy();

			var wrapper,
				_destroy = function(exp) {
					$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
						.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
				};

			//TODO: Unwrap at same DOM position
			if (this.elementIsWrapper) {
				_destroy(this.element);
				wrapper = this.element;
				this.originalElement.css({
					position: wrapper.css("position"),
					width: wrapper.outerWidth(),
					height: wrapper.outerHeight(),
					top: wrapper.css("top"),
					left: wrapper.css("left")
				}).insertAfter( wrapper );
				wrapper.remove();
			}

			this.originalElement.css("resize", this.originalResizeStyle);
			_destroy(this.originalElement);

			return this;
		},

		_mouseCapture: function(event) {
			var i, handle,
				capture = false;

			for (i in this.handles) {
				handle = $(this.handles[i])[0];
				if (handle === event.target || $.contains(handle, event.target)) {
					capture = true;
				}
			}

			return !this.options.disabled && capture;
		},

		_mouseStart: function(event) {

			var curleft, curtop, cursor,
				o = this.options,
				iniPos = this.element.position(),
				el = this.element;

			this.resizing = true;

			// bugfix for http://dev.jquery.com/ticket/1749
			if ( (/absolute/).test( el.css("position") ) ) {
				el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
			} else if (el.is(".ui-draggable")) {
				el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
			}

			this._renderProxy();

			curleft = num(this.helper.css("left"));
			curtop = num(this.helper.css("top"));

			if (o.containment) {
				curleft += $(o.containment).scrollLeft() || 0;
				curtop += $(o.containment).scrollTop() || 0;
			}

			//Store needed variables
			this.offset = this.helper.offset();
			this.position = { left: curleft, top: curtop };
			this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalPosition = { left: curleft, top: curtop };
			this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
			this.originalMousePosition = { left: event.pageX, top: event.pageY };

			//Aspect Ratio
			this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

			cursor = $(".ui-resizable-" + this.axis).css("cursor");
			$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

			el.addClass("ui-resizable-resizing");
			this._propagate("start", event);
			return true;
		},

		_mouseDrag: function(event) {

			//Increase performance, avoid regex
			var data,
				el = this.helper, props = {},
				smp = this.originalMousePosition,
				a = this.axis,
				prevTop = this.position.top,
				prevLeft = this.position.left,
				prevWidth = this.size.width,
				prevHeight = this.size.height,
				dx = (event.pageX-smp.left)||0,
				dy = (event.pageY-smp.top)||0,
				trigger = this._change[a];

			if (!trigger) {
				return false;
			}

			// Calculate the attrs that will be change
			data = trigger.apply(this, [event, dx, dy]);

			// Put this in the mouseDrag handler since the user can start pressing shift while resizing
			this._updateVirtualBoundaries(event.shiftKey);
			if (this._aspectRatio || event.shiftKey) {
				data = this._updateRatio(data, event);
			}

			data = this._respectSize(data, event);

			this._updateCache(data);

			// plugins callbacks need to be called first
			this._propagate("resize", event);

			if (this.position.top !== prevTop) {
				props.top = this.position.top + "px";
			}
			if (this.position.left !== prevLeft) {
				props.left = this.position.left + "px";
			}
			if (this.size.width !== prevWidth) {
				props.width = this.size.width + "px";
			}
			if (this.size.height !== prevHeight) {
				props.height = this.size.height + "px";
			}
			el.css(props);

			if (!this._helper && this._proportionallyResizeElements.length) {
				this._proportionallyResize();
			}

			// Call the user callback if the element was resized
			if ( ! $.isEmptyObject(props) ) {
				this._trigger("resize", event, this.ui());
			}

			return false;
		},

		_mouseStop: function(event) {

			this.resizing = false;
			var pr, ista, soffseth, soffsetw, s, left, top,
				o = this.options, that = this;

			if(this._helper) {

				pr = this._proportionallyResizeElements;
				ista = pr.length && (/textarea/i).test(pr[0].nodeName);
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
				soffsetw = ista ? 0 : that.sizeDiff.width;

				s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

				if (!o.animate) {
					this.element.css($.extend(s, { top: top, left: left }));
				}

				that.helper.height(that.size.height);
				that.helper.width(that.size.width);

				if (this._helper && !o.animate) {
					this._proportionallyResize();
				}
			}

			$("body").css("cursor", "auto");

			this.element.removeClass("ui-resizable-resizing");

			this._propagate("stop", event);

			if (this._helper) {
				this.helper.remove();
			}

			return false;

		},

		_updateVirtualBoundaries: function(forceAspectRatio) {
			var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
				o = this.options;

			b = {
				minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
				maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
				minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
				maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
			};

			if(this._aspectRatio || forceAspectRatio) {
				// We want to create an enclosing box whose aspect ration is the requested one
				// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
				pMinWidth = b.minHeight * this.aspectRatio;
				pMinHeight = b.minWidth / this.aspectRatio;
				pMaxWidth = b.maxHeight * this.aspectRatio;
				pMaxHeight = b.maxWidth / this.aspectRatio;

				if(pMinWidth > b.minWidth) {
					b.minWidth = pMinWidth;
				}
				if(pMinHeight > b.minHeight) {
					b.minHeight = pMinHeight;
				}
				if(pMaxWidth < b.maxWidth) {
					b.maxWidth = pMaxWidth;
				}
				if(pMaxHeight < b.maxHeight) {
					b.maxHeight = pMaxHeight;
				}
			}
			this._vBoundaries = b;
		},

		_updateCache: function(data) {
			this.offset = this.helper.offset();
			if (isNumber(data.left)) {
				this.position.left = data.left;
			}
			if (isNumber(data.top)) {
				this.position.top = data.top;
			}
			if (isNumber(data.height)) {
				this.size.height = data.height;
			}
			if (isNumber(data.width)) {
				this.size.width = data.width;
			}
		},

		_updateRatio: function( data ) {

			var cpos = this.position,
				csize = this.size,
				a = this.axis;

			if (isNumber(data.height)) {
				data.width = (data.height * this.aspectRatio);
			} else if (isNumber(data.width)) {
				data.height = (data.width / this.aspectRatio);
			}

			if (a === "sw") {
				data.left = cpos.left + (csize.width - data.width);
				data.top = null;
			}
			if (a === "nw") {
				data.top = cpos.top + (csize.height - data.height);
				data.left = cpos.left + (csize.width - data.width);
			}

			return data;
		},

		_respectSize: function( data ) {

			var o = this._vBoundaries,
				a = this.axis,
				ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
				isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
				dw = this.originalPosition.left + this.originalSize.width,
				dh = this.position.top + this.size.height,
				cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
			if (isminw) {
				data.width = o.minWidth;
			}
			if (isminh) {
				data.height = o.minHeight;
			}
			if (ismaxw) {
				data.width = o.maxWidth;
			}
			if (ismaxh) {
				data.height = o.maxHeight;
			}

			if (isminw && cw) {
				data.left = dw - o.minWidth;
			}
			if (ismaxw && cw) {
				data.left = dw - o.maxWidth;
			}
			if (isminh && ch) {
				data.top = dh - o.minHeight;
			}
			if (ismaxh && ch) {
				data.top = dh - o.maxHeight;
			}

			// fixing jump error on top/left - bug #2330
			if (!data.width && !data.height && !data.left && data.top) {
				data.top = null;
			} else if (!data.width && !data.height && !data.top && data.left) {
				data.left = null;
			}

			return data;
		},

		_proportionallyResize: function() {

			if (!this._proportionallyResizeElements.length) {
				return;
			}

			var i, j, borders, paddings, prel,
				element = this.helper || this.element;

			for ( i=0; i < this._proportionallyResizeElements.length; i++) {

				prel = this._proportionallyResizeElements[i];

				if (!this.borderDif) {
					this.borderDif = [];
					borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
					paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

					for ( j = 0; j < borders.length; j++ ) {
						this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
					}
				}

				prel.css({
					height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
					width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
				});

			}

		},

		_renderProxy: function() {

			var el = this.element, o = this.options;
			this.elementOffset = el.offset();

			if(this._helper) {

				this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

				this.helper.addClass(this._helper).css({
					width: this.element.outerWidth() - 1,
					height: this.element.outerHeight() - 1,
					position: "absolute",
					left: this.elementOffset.left +"px",
					top: this.elementOffset.top +"px",
					zIndex: ++o.zIndex //TODO: Don't modify option
				});

				this.helper
					.appendTo("body")
					.disableSelection();

			} else {
				this.helper = this.element;
			}

		},

		_change: {
			e: function(event, dx) {
				return { width: this.originalSize.width + dx };
			},
			w: function(event, dx) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { left: sp.left + dx, width: cs.width - dx };
			},
			n: function(event, dx, dy) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { top: sp.top + dy, height: cs.height - dy };
			},
			s: function(event, dx, dy) {
				return { height: this.originalSize.height + dy };
			},
			se: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			sw: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			},
			ne: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			nw: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			}
		},

		_propagate: function(n, event) {
			$.ui.plugin.call(this, n, [event, this.ui()]);
			(n !== "resize" && this._trigger(n, event, this.ui()));
		},

		plugins: {},

		ui: function() {
			return {
				originalElement: this.originalElement,
				element: this.element,
				helper: this.helper,
				position: this.position,
				size: this.size,
				originalSize: this.originalSize,
				originalPosition: this.originalPosition
			};
		}

	});

	/*
	 * Resizable Extensions
	 */

	$.ui.plugin.add("resizable", "animate", {

		stop: function( event ) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				pr = that._proportionallyResizeElements,
				ista = pr.length && (/textarea/i).test(pr[0].nodeName),
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
				soffsetw = ista ? 0 : that.sizeDiff.width,
				style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			that.element.animate(
				$.extend(style, top && left ? { top: top, left: left } : {}), {
					duration: o.animateDuration,
					easing: o.animateEasing,
					step: function() {

						var data = {
							width: parseInt(that.element.css("width"), 10),
							height: parseInt(that.element.css("height"), 10),
							top: parseInt(that.element.css("top"), 10),
							left: parseInt(that.element.css("left"), 10)
						};

						if (pr && pr.length) {
							$(pr[0]).css({ width: data.width, height: data.height });
						}

						// propagating resize, and updating values for each animation step
						that._updateCache(data);
						that._propagate("resize", event);

					}
				}
			);
		}

	});

	$.ui.plugin.add("resizable", "containment", {

		start: function() {
			var element, p, co, ch, cw, width, height,
				that = $(this).data("ui-resizable"),
				o = that.options,
				el = that.element,
				oc = o.containment,
				ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

			if (!ce) {
				return;
			}

			that.containerElement = $(ce);

			if (/document/.test(oc) || oc === document) {
				that.containerOffset = { left: 0, top: 0 };
				that.containerPosition = { left: 0, top: 0 };

				that.parentData = {
					element: $(document), left: 0, top: 0,
					width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
				};
			}

			// i'm a node, so compute top, left, right, bottom
			else {
				element = $(ce);
				p = [];
				$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

				that.containerOffset = element.offset();
				that.containerPosition = element.position();
				that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

				co = that.containerOffset;
				ch = that.containerSize.height;
				cw = that.containerSize.width;
				width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
				height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

				that.parentData = {
					element: ce, left: co.left, top: co.top, width: width, height: height
				};
			}
		},

		resize: function( event ) {
			var woset, hoset, isParent, isOffsetRelative,
				that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset, cp = that.position,
				pRatio = that._aspectRatio || event.shiftKey,
				cop = { top:0, left:0 }, ce = that.containerElement;

			if (ce[0] !== document && (/static/).test(ce.css("position"))) {
				cop = co;
			}

			if (cp.left < (that._helper ? co.left : 0)) {
				that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
				that.position.left = o.helper ? co.left : 0;
			}

			if (cp.top < (that._helper ? co.top : 0)) {
				that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
				that.position.top = that._helper ? co.top : 0;
			}

			that.offset.left = that.parentData.left+that.position.left;
			that.offset.top = that.parentData.top+that.position.top;

			woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
			hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

			isParent = that.containerElement.get(0) === that.element.parent().get(0);
			isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

			if(isParent && isOffsetRelative) {
				woset -= that.parentData.left;
			}

			if (woset + that.size.width >= that.parentData.width) {
				that.size.width = that.parentData.width - woset;
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
			}

			if (hoset + that.size.height >= that.parentData.height) {
				that.size.height = that.parentData.height - hoset;
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
			}
		},

		stop: function(){
			var that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset,
				cop = that.containerPosition,
				ce = that.containerElement,
				helper = $(that.helper),
				ho = helper.offset(),
				w = helper.outerWidth() - that.sizeDiff.width,
				h = helper.outerHeight() - that.sizeDiff.height;

			if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

			if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

		}
	});

	$.ui.plugin.add("resizable", "alsoResize", {

		start: function () {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				_store = function (exp) {
					$(exp).each(function() {
						var el = $(this);
						el.data("ui-resizable-alsoresize", {
							width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
							left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
						});
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
				if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
				else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
			}else{
				_store(o.alsoResize);
			}
		},

		resize: function (event, ui) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				os = that.originalSize,
				op = that.originalPosition,
				delta = {
					height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
					top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
				},

				_alsoResize = function (exp, c) {
					$(exp).each(function() {
						var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
							css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

						$.each(css, function (i, prop) {
							var sum = (start[prop]||0) + (delta[prop]||0);
							if (sum && sum >= 0) {
								style[prop] = sum || null;
							}
						});

						el.css(style);
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
				$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
			}else{
				_alsoResize(o.alsoResize);
			}
		},

		stop: function () {
			$(this).removeData("resizable-alsoresize");
		}
	});

	$.ui.plugin.add("resizable", "ghost", {

		start: function() {

			var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

			that.ghost = that.originalElement.clone();
			that.ghost
				.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
				.addClass("ui-resizable-ghost")
				.addClass(typeof o.ghost === "string" ? o.ghost : "");

			that.ghost.appendTo(that.helper);

		},

		resize: function(){
			var that = $(this).data("ui-resizable");
			if (that.ghost) {
				that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
			}
		},

		stop: function() {
			var that = $(this).data("ui-resizable");
			if (that.ghost && that.helper) {
				that.helper.get(0).removeChild(that.ghost.get(0));
			}
		}

	});

	$.ui.plugin.add("resizable", "grid", {

		resize: function() {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				cs = that.size,
				os = that.originalSize,
				op = that.originalPosition,
				a = that.axis,
				grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
				gridX = (grid[0]||1),
				gridY = (grid[1]||1),
				ox = Math.round((cs.width - os.width) / gridX) * gridX,
				oy = Math.round((cs.height - os.height) / gridY) * gridY,
				newWidth = os.width + ox,
				newHeight = os.height + oy,
				isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
				isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
				isMinWidth = o.minWidth && (o.minWidth > newWidth),
				isMinHeight = o.minHeight && (o.minHeight > newHeight);

			o.grid = grid;

			if (isMinWidth) {
				newWidth = newWidth + gridX;
			}
			if (isMinHeight) {
				newHeight = newHeight + gridY;
			}
			if (isMaxWidth) {
				newWidth = newWidth - gridX;
			}
			if (isMaxHeight) {
				newHeight = newHeight - gridY;
			}

			if (/^(se|s|e)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
			} else if (/^(ne)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else if (/^(sw)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.left = op.left - ox;
			} else {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
				that.position.left = op.left - ox;
			}
		}

	});

	})(jQuery);

	(function( $, undefined ) {

	$.widget("ui.selectable", $.ui.mouse, {
		version: "1.10.3",
		options: {
			appendTo: "body",
			autoRefresh: true,
			distance: 0,
			filter: "*",
			tolerance: "touch",

			// callbacks
			selected: null,
			selecting: null,
			start: null,
			stop: null,
			unselected: null,
			unselecting: null
		},
		_create: function() {
			var selectees,
				that = this;

			this.element.addClass("ui-selectable");

			this.dragged = false;

			// cache selectee children based on filter
			this.refresh = function() {
				selectees = $(that.options.filter, that.element[0]);
				selectees.addClass("ui-selectee");
				selectees.each(function() {
					var $this = $(this),
						pos = $this.offset();
					$.data(this, "selectable-item", {
						element: this,
						$element: $this,
						left: pos.left,
						top: pos.top,
						right: pos.left + $this.outerWidth(),
						bottom: pos.top + $this.outerHeight(),
						startselected: false,
						selected: $this.hasClass("ui-selected"),
						selecting: $this.hasClass("ui-selecting"),
						unselecting: $this.hasClass("ui-unselecting")
					});
				});
			};
			this.refresh();

			this.selectees = selectees.addClass("ui-selectee");

			this._mouseInit();

			this.helper = $("<div class='ui-selectable-helper'></div>");
		},

		_destroy: function() {
			this.selectees
				.removeClass("ui-selectee")
				.removeData("selectable-item");
			this.element
				.removeClass("ui-selectable ui-selectable-disabled");
			this._mouseDestroy();
		},

		_mouseStart: function(event) {
			var that = this,
				options = this.options;

			this.opos = [event.pageX, event.pageY];

			if (this.options.disabled) {
				return;
			}

			this.selectees = $(options.filter, this.element[0]);

			this._trigger("start", event);

			$(options.appendTo).append(this.helper);
			// position helper (lasso)
			this.helper.css({
				"left": event.pageX,
				"top": event.pageY,
				"width": 0,
				"height": 0
			});

			if (options.autoRefresh) {
				this.refresh();
			}

			this.selectees.filter(".ui-selected").each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.startselected = true;
				if (!event.metaKey && !event.ctrlKey) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
					selectee.$element.addClass("ui-unselecting");
					selectee.unselecting = true;
					// selectable UNSELECTING callback
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
			});

			$(event.target).parents().addBack().each(function() {
				var doSelect,
					selectee = $.data(this, "selectable-item");
				if (selectee) {
					doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
					selectee.$element
						.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
						.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
					selectee.unselecting = !doSelect;
					selectee.selecting = doSelect;
					selectee.selected = doSelect;
					// selectable (UN)SELECTING callback
					if (doSelect) {
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					} else {
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
					return false;
				}
			});

		},

		_mouseDrag: function(event) {

			this.dragged = true;

			if (this.options.disabled) {
				return;
			}

			var tmp,
				that = this,
				options = this.options,
				x1 = this.opos[0],
				y1 = this.opos[1],
				x2 = event.pageX,
				y2 = event.pageY;

			if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
			if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
			this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

			this.selectees.each(function() {
				var selectee = $.data(this, "selectable-item"),
					hit = false;

				//prevent helper from being selected if appendTo: selectable
				if (!selectee || selectee.element === that.element[0]) {
					return;
				}

				if (options.tolerance === "touch") {
					hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
				} else if (options.tolerance === "fit") {
					hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
				}

				if (hit) {
					// SELECT
					if (selectee.selected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;
					}
					if (selectee.unselecting) {
						selectee.$element.removeClass("ui-unselecting");
						selectee.unselecting = false;
					}
					if (!selectee.selecting) {
						selectee.$element.addClass("ui-selecting");
						selectee.selecting = true;
						// selectable SELECTING callback
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					}
				} else {
					// UNSELECT
					if (selectee.selecting) {
						if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							selectee.$element.addClass("ui-selected");
							selectee.selected = true;
						} else {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							if (selectee.startselected) {
								selectee.$element.addClass("ui-unselecting");
								selectee.unselecting = true;
							}
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
					if (selectee.selected) {
						if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
							selectee.$element.removeClass("ui-selected");
							selectee.selected = false;

							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
				}
			});

			return false;
		},

		_mouseStop: function(event) {
			var that = this;

			this.dragged = false;

			$(".ui-unselecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-unselecting");
				selectee.unselecting = false;
				selectee.startselected = false;
				that._trigger("unselected", event, {
					unselected: selectee.element
				});
			});
			$(".ui-selecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
				selectee.selecting = false;
				selectee.selected = true;
				selectee.startselected = true;
				that._trigger("selected", event, {
					selected: selectee.element
				});
			});
			this._trigger("stop", event);

			this.helper.remove();

			return false;
		}

	});

	})(jQuery);

	(function( $, undefined ) {

	/*jshint loopfunc: true */

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	function isFloating(item) {
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	}

	$.widget("ui.sortable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "sort",
		ready: false,
		options: {
			appendTo: "parent",
			axis: false,
			connectWith: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			dropOnEmpty: true,
			forcePlaceholderSize: false,
			forceHelperSize: false,
			grid: false,
			handle: false,
			helper: "original",
			items: "> *",
			opacity: false,
			placeholder: false,
			revert: false,
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			scope: "default",
			tolerance: "intersect",
			zIndex: 1000,

			// callbacks
			activate: null,
			beforeStop: null,
			change: null,
			deactivate: null,
			out: null,
			over: null,
			receive: null,
			remove: null,
			sort: null,
			start: null,
			stop: null,
			update: null
		},
		_create: function() {

			var o = this.options;
			this.containerCache = {};
			this.element.addClass("ui-sortable");

			//Get the items
			this.refresh();

			//Let's determine if the items are being displayed horizontally
			this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

			//Let's determine the parent's offset
			this.offset = this.element.offset();

			//Initialize mouse events for interaction
			this._mouseInit();

			//We're ready to go
			this.ready = true;

		},

		_destroy: function() {
			this.element
				.removeClass("ui-sortable ui-sortable-disabled");
			this._mouseDestroy();

			for ( var i = this.items.length - 1; i >= 0; i-- ) {
				this.items[i].item.removeData(this.widgetName + "-item");
			}

			return this;
		},

		_setOption: function(key, value){
			if ( key === "disabled" ) {
				this.options[ key ] = value;

				this.widget().toggleClass( "ui-sortable-disabled", !!value );
			} else {
				// Don't call widget base _setOption for disable as it adds ui-state-disabled class
				$.Widget.prototype._setOption.apply(this, arguments);
			}
		},

		_mouseCapture: function(event, overrideHandle) {
			var currentItem = null,
				validHandle = false,
				that = this;

			if (this.reverting) {
				return false;
			}

			if(this.options.disabled || this.options.type === "static") {
				return false;
			}

			//We have to refresh the items data once first
			this._refreshItems(event);

			//Find out if the clicked node (or one of its parents) is a actual item in this.items
			$(event.target).parents().each(function() {
				if($.data(this, that.widgetName + "-item") === that) {
					currentItem = $(this);
					return false;
				}
			});
			if($.data(event.target, that.widgetName + "-item") === that) {
				currentItem = $(event.target);
			}

			if(!currentItem) {
				return false;
			}
			if(this.options.handle && !overrideHandle) {
				$(this.options.handle, currentItem).find("*").addBack().each(function() {
					if(this === event.target) {
						validHandle = true;
					}
				});
				if(!validHandle) {
					return false;
				}
			}

			this.currentItem = currentItem;
			this._removeCurrentsFromItems();
			return true;

		},

		_mouseStart: function(event, overrideHandle, noActivation) {

			var i, body,
				o = this.options;

			this.currentContainer = this;

			//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
			this.refreshPositions();

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			//Cache the helper size
			this._cacheHelperProportions();

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Get the next scrolling parent
			this.scrollParent = this.helper.scrollParent();

			//The element's absolute position on the page minus margins
			this.offset = this.currentItem.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			// Only after we got the offset, we can change the helper's position to absolute
			// TODO: Still need to figure out a way to make relative sorting possible
			this.helper.css("position", "absolute");
			this.cssPosition = this.helper.css("position");

			//Generate the original position
			this.originalPosition = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Cache the former DOM position
			this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

			//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
			if(this.helper[0] !== this.currentItem[0]) {
				this.currentItem.hide();
			}

			//Create the placeholder
			this._createPlaceholder();

			//Set a containment if given in the options
			if(o.containment) {
				this._setContainment();
			}

			if( o.cursor && o.cursor !== "auto" ) { // cursor option
				body = this.document.find( "body" );

				// support: IE
				this.storedCursor = body.css( "cursor" );
				body.css( "cursor", o.cursor );

				this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
			}

			if(o.opacity) { // opacity option
				if (this.helper.css("opacity")) {
					this._storedOpacity = this.helper.css("opacity");
				}
				this.helper.css("opacity", o.opacity);
			}

			if(o.zIndex) { // zIndex option
				if (this.helper.css("zIndex")) {
					this._storedZIndex = this.helper.css("zIndex");
				}
				this.helper.css("zIndex", o.zIndex);
			}

			//Prepare scrolling
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
				this.overflowOffset = this.scrollParent.offset();
			}

			//Call callbacks
			this._trigger("start", event, this._uiHash());

			//Recache the helper size
			if(!this._preserveHelperProportions) {
				this._cacheHelperProportions();
			}


			//Post "activate" events to possible containers
			if( !noActivation ) {
				for ( i = this.containers.length - 1; i >= 0; i-- ) {
					this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
				}
			}

			//Prepare possible droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}

			this.dragging = true;

			this.helper.addClass("ui-sortable-helper");
			this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
			return true;

		},

		_mouseDrag: function(event) {
			var i, item, itemElement, intersection,
				o = this.options,
				scrolled = false;

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			if (!this.lastPositionAbs) {
				this.lastPositionAbs = this.positionAbs;
			}

			//Do scrolling
			if(this.options.scroll) {
				if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

					if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
					}

					if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
					}

				} else {

					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}

					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}

				}

				if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
					$.ui.ddmanager.prepareOffsets(this, event);
				}
			}

			//Regenerate the absolute position used for position checks
			this.positionAbs = this._convertPositionTo("absolute");

			//Set the helper position
			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}

			//Rearrange
			for (i = this.items.length - 1; i >= 0; i--) {

				//Cache variables and intersection, continue if no intersection
				item = this.items[i];
				itemElement = item.item[0];
				intersection = this._intersectsWithPointer(item);
				if (!intersection) {
					continue;
				}

				// Only put the placeholder inside the current Container, skip all
				// items form other containers. This works because when moving
				// an item from one container to another the
				// currentContainer is switched before the placeholder is moved.
				//
				// Without this moving items in "sub-sortables" can cause the placeholder to jitter
				// beetween the outer and inner container.
				if (item.instance !== this.currentContainer) {
					continue;
				}

				// cannot intersect with itself
				// no useless actions that have been done before
				// no action if the item moved is the parent of the item checked
				if (itemElement !== this.currentItem[0] &&
					this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
					!$.contains(this.placeholder[0], itemElement) &&
					(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
				) {

					this.direction = intersection === 1 ? "down" : "up";

					if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
						this._rearrange(event, item);
					} else {
						break;
					}

					this._trigger("change", event, this._uiHash());
					break;
				}
			}

			//Post events to containers
			this._contactContainers(event);

			//Interconnect with droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			//Call callbacks
			this._trigger("sort", event, this._uiHash());

			this.lastPositionAbs = this.positionAbs;
			return false;

		},

		_mouseStop: function(event, noPropagation) {

			if(!event) {
				return;
			}

			//If we are using droppables, inform the manager about the drop
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				$.ui.ddmanager.drop(this, event);
			}

			if(this.options.revert) {
				var that = this,
					cur = this.placeholder.offset(),
					axis = this.options.axis,
					animation = {};

				if ( !axis || axis === "x" ) {
					animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
				}
				if ( !axis || axis === "y" ) {
					animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
				}
				this.reverting = true;
				$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
					that._clear(event);
				});
			} else {
				this._clear(event, noPropagation);
			}

			return false;

		},

		cancel: function() {

			if(this.dragging) {

				this._mouseUp({ target: null });

				if(this.options.helper === "original") {
					this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
				} else {
					this.currentItem.show();
				}

				//Post deactivating events to containers
				for (var i = this.containers.length - 1; i >= 0; i--){
					this.containers[i]._trigger("deactivate", null, this._uiHash(this));
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", null, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			if (this.placeholder) {
				//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
				if(this.placeholder[0].parentNode) {
					this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
				}
				if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
					this.helper.remove();
				}

				$.extend(this, {
					helper: null,
					dragging: false,
					reverting: false,
					_noFinalSort: null
				});

				if(this.domPosition.prev) {
					$(this.domPosition.prev).after(this.currentItem);
				} else {
					$(this.domPosition.parent).prepend(this.currentItem);
				}
			}

			return this;

		},

		serialize: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				str = [];
			o = o || {};

			$(items).each(function() {
				var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
				if (res) {
					str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
				}
			});

			if(!str.length && o.key) {
				str.push(o.key + "=");
			}

			return str.join("&");

		},

		toArray: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				ret = [];

			o = o || {};

			items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
			return ret;

		},

		/* Be careful with the following core functions */
		_intersectsWith: function(item) {

			var x1 = this.positionAbs.left,
				x2 = x1 + this.helperProportions.width,
				y1 = this.positionAbs.top,
				y2 = y1 + this.helperProportions.height,
				l = item.left,
				r = l + item.width,
				t = item.top,
				b = t + item.height,
				dyClick = this.offset.click.top,
				dxClick = this.offset.click.left,
				isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
				isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
				isOverElement = isOverElementHeight && isOverElementWidth;

			if ( this.options.tolerance === "pointer" ||
				this.options.forcePointerForContainers ||
				(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
			) {
				return isOverElement;
			} else {

				return (l < x1 + (this.helperProportions.width / 2) && // Right Half
					x2 - (this.helperProportions.width / 2) < r && // Left Half
					t < y1 + (this.helperProportions.height / 2) && // Bottom Half
					y2 - (this.helperProportions.height / 2) < b ); // Top Half

			}
		},

		_intersectsWithPointer: function(item) {

			var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
				isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
				isOverElement = isOverElementHeight && isOverElementWidth,
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (!isOverElement) {
				return false;
			}

			return this.floating ?
				( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
				: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

		},

		_intersectsWithSides: function(item) {

			var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
				isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (this.floating && horizontalDirection) {
				return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
			} else {
				return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
			}

		},

		_getDragVerticalDirection: function() {
			var delta = this.positionAbs.top - this.lastPositionAbs.top;
			return delta !== 0 && (delta > 0 ? "down" : "up");
		},

		_getDragHorizontalDirection: function() {
			var delta = this.positionAbs.left - this.lastPositionAbs.left;
			return delta !== 0 && (delta > 0 ? "right" : "left");
		},

		refresh: function(event) {
			this._refreshItems(event);
			this.refreshPositions();
			return this;
		},

		_connectWith: function() {
			var options = this.options;
			return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
		},

		_getItemsAsjQuery: function(connected) {

			var i, j, cur, inst,
				items = [],
				queries = [],
				connectWith = this._connectWith();

			if(connectWith && connected) {
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for ( j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
						}
					}
				}
			}

			queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

			for (i = queries.length - 1; i >= 0; i--){
				queries[i][0].each(function() {
					items.push(this);
				});
			}

			return $(items);

		},

		_removeCurrentsFromItems: function() {

			var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

			this.items = $.grep(this.items, function (item) {
				for (var j=0; j < list.length; j++) {
					if(list[j] === item.item[0]) {
						return false;
					}
				}
				return true;
			});

		},

		_refreshItems: function(event) {

			this.items = [];
			this.containers = [this];

			var i, j, cur, inst, targetData, _queries, item, queriesLength,
				items = this.items,
				queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
				connectWith = this._connectWith();

			if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for (j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
							this.containers.push(inst);
						}
					}
				}
			}

			for (i = queries.length - 1; i >= 0; i--) {
				targetData = queries[i][1];
				_queries = queries[i][0];

				for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
					item = $(_queries[j]);

					item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

					items.push({
						item: item,
						instance: targetData,
						width: 0, height: 0,
						left: 0, top: 0
					});
				}
			}

		},

		refreshPositions: function(fast) {

			//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
			if(this.offsetParent && this.helper) {
				this.offset.parent = this._getParentOffset();
			}

			var i, item, t, p;

			for (i = this.items.length - 1; i >= 0; i--){
				item = this.items[i];

				//We ignore calculating positions of all connected containers when we're not over them
				if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
					continue;
				}

				t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

				if (!fast) {
					item.width = t.outerWidth();
					item.height = t.outerHeight();
				}

				p = t.offset();
				item.left = p.left;
				item.top = p.top;
			}

			if(this.options.custom && this.options.custom.refreshContainers) {
				this.options.custom.refreshContainers.call(this);
			} else {
				for (i = this.containers.length - 1; i >= 0; i--){
					p = this.containers[i].element.offset();
					this.containers[i].containerCache.left = p.left;
					this.containers[i].containerCache.top = p.top;
					this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
					this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
				}
			}

			return this;
		},

		_createPlaceholder: function(that) {
			that = that || this;
			var className,
				o = that.options;

			if(!o.placeholder || o.placeholder.constructor === String) {
				className = o.placeholder;
				o.placeholder = {
					element: function() {

						var nodeName = that.currentItem[0].nodeName.toLowerCase(),
							element = $( "<" + nodeName + ">", that.document[0] )
								.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
								.removeClass("ui-sortable-helper");

						if ( nodeName === "tr" ) {
							that.currentItem.children().each(function() {
								$( "<td>&#160;</td>", that.document[0] )
									.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
									.appendTo( element );
							});
						} else if ( nodeName === "img" ) {
							element.attr( "src", that.currentItem.attr( "src" ) );
						}

						if ( !className ) {
							element.css( "visibility", "hidden" );
						}

						return element;
					},
					update: function(container, p) {

						// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
						// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
						if(className && !o.forcePlaceholderSize) {
							return;
						}

						//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
						if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
						if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
					}
				};
			}

			//Create the placeholder
			that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

			//Append it after the actual current item
			that.currentItem.after(that.placeholder);

			//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
			o.placeholder.update(that, that.placeholder);

		},

		_contactContainers: function(event) {
			var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,
				innermostContainer = null,
				innermostIndex = null;

			// get innermost container that intersects with item
			for (i = this.containers.length - 1; i >= 0; i--) {

				// never consider a container that's located within the item itself
				if($.contains(this.currentItem[0], this.containers[i].element[0])) {
					continue;
				}

				if(this._intersectsWith(this.containers[i].containerCache)) {

					// if we've already found a container and it's more "inner" than this, then continue
					if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
						continue;
					}

					innermostContainer = this.containers[i];
					innermostIndex = i;

				} else {
					// container doesn't intersect. trigger "out" event if necessary
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", event, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			// if no intersecting containers found, return
			if(!innermostContainer) {
				return;
			}

			// move the item into the container if it's not there already
			if(this.containers.length === 1) {
				if (!this.containers[innermostIndex].containerCache.over) {
					this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
					this.containers[innermostIndex].containerCache.over = 1;
				}
			} else {

				//When entering a new container, we will find the item with the least distance and append our item near it
				dist = 10000;
				itemWithLeastDistance = null;
				floating = innermostContainer.floating || isFloating(this.currentItem);
				posProperty = floating ? "left" : "top";
				sizeProperty = floating ? "width" : "height";
				base = this.positionAbs[posProperty] + this.offset.click[posProperty];
				for (j = this.items.length - 1; j >= 0; j--) {
					if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
						continue;
					}
					if(this.items[j].item[0] === this.currentItem[0]) {
						continue;
					}
					if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
						continue;
					}
					cur = this.items[j].item.offset()[posProperty];
					nearBottom = false;
					if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
						nearBottom = true;
						cur += this.items[j][sizeProperty];
					}

					if(Math.abs(cur - base) < dist) {
						dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
						this.direction = nearBottom ? "up": "down";
					}
				}

				//Check if dropOnEmpty is enabled
				if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
					return;
				}

				if(this.currentContainer === this.containers[innermostIndex]) {
					return;
				}

				itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
				this._trigger("change", event, this._uiHash());
				this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
				this.currentContainer = this.containers[innermostIndex];

				//Update the placeholder
				this.options.placeholder.update(this.currentContainer, this.placeholder);

				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}


		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

			//Add the helper to the DOM if that didn't happen already
			if(!helper.parents("body").length) {
				$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
			}

			if(helper[0] === this.currentItem[0]) {
				this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
			}

			if(!helper[0].style.width || o.forceHelperSize) {
				helper.width(this.currentItem.width());
			}
			if(!helper[0].style.height || o.forceHelperSize) {
				helper.height(this.currentItem.height());
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {


			//Get the offsetParent and cache its position
			this.offsetParent = this.helper.offsetParent();
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			// This needs to be actually done for all browsers, since pageX/pageY includes this information
			// with an ugly IE fix
			if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.currentItem.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
				top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var ce, co, over,
				o = this.options;
			if(o.containment === "parent") {
				o.containment = this.helper[0].parentNode;
			}
			if(o.containment === "document" || o.containment === "window") {
				this.containment = [
					0 - this.offset.relative.left - this.offset.parent.left,
					0 - this.offset.relative.top - this.offset.parent.top,
					$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
					($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
				];
			}

			if(!(/^(document|window|parent)$/).test(o.containment)) {
				ce = $(o.containment)[0];
				co = $(o.containment).offset();
				over = ($(ce).css("overflow") !== "hidden");

				this.containment = [
					co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
					co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
					co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
					co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
				];
			}

		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}
			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
				)
			};

		},

		_generatePosition: function(event) {

			var top, left,
				o = this.options,
				pageX = event.pageX,
				pageY = event.pageY,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			// This is another very weird special case that only happens for relative elements:
			// 1. If the css position is relative
			// 2. and the scroll parent is the document or similar to the offset parent
			// we have to refresh the relative offset during the scroll so there are no jumps
			if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
				this.offset.relative = this._getRelativeOffset();
			}

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			if(this.originalPosition) { //If we are not dragging yet, we won't check for options

				if(this.containment) {
					if(event.pageX - this.offset.click.left < this.containment[0]) {
						pageX = this.containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < this.containment[1]) {
						pageY = this.containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > this.containment[2]) {
						pageX = this.containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > this.containment[3]) {
						pageY = this.containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
					pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
					pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																// The absolute mouse position
					this.offset.click.top -													// Click offset (relative to the element)
					this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
				),
				left: (
					pageX -																// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
				)
			};

		},

		_rearrange: function(event, i, a, hardRefresh) {

			a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

			//Various things done here to improve the performance:
			// 1. we create a setTimeout, that calls refreshPositions
			// 2. on the instance, we have a counter variable, that get's higher after every append
			// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
			// 4. this lets only the last addition to the timeout stack through
			this.counter = this.counter ? ++this.counter : 1;
			var counter = this.counter;

			this._delay(function() {
				if(counter === this.counter) {
					this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
				}
			});

		},

		_clear: function(event, noPropagation) {

			this.reverting = false;
			// We delay all events that have to be triggered to after the point where the placeholder has been removed and
			// everything else normalized again
			var i,
				delayedTriggers = [];

			// We first have to update the dom position of the actual currentItem
			// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
			if(!this._noFinalSort && this.currentItem.parent().length) {
				this.placeholder.before(this.currentItem);
			}
			this._noFinalSort = null;

			if(this.helper[0] === this.currentItem[0]) {
				for(i in this._storedCSS) {
					if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
						this._storedCSS[i] = "";
					}
				}
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			if(this.fromOutside && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
			}
			if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
			}

			// Check if the items Container has Changed and trigger appropriate
			// events.
			if (this !== this.currentContainer) {
				if(!noPropagation) {
					delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
					delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
					delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
				}
			}


			//Post events to containers
			for (i = this.containers.length - 1; i >= 0; i--){
				if(!noPropagation) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				}
				if(this.containers[i].containerCache.over) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
					this.containers[i].containerCache.over = 0;
				}
			}

			//Do what was originally in plugins
			if ( this.storedCursor ) {
				this.document.find( "body" ).css( "cursor", this.storedCursor );
				this.storedStylesheet.remove();
			}
			if(this._storedOpacity) {
				this.helper.css("opacity", this._storedOpacity);
			}
			if(this._storedZIndex) {
				this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
			}

			this.dragging = false;
			if(this.cancelHelperRemoval) {
				if(!noPropagation) {
					this._trigger("beforeStop", event, this._uiHash());
					for (i=0; i < delayedTriggers.length; i++) {
						delayedTriggers[i].call(this, event);
					} //Trigger all delayed events
					this._trigger("stop", event, this._uiHash());
				}

				this.fromOutside = false;
				return false;
			}

			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
			}

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

			if(this.helper[0] !== this.currentItem[0]) {
				this.helper.remove();
			}
			this.helper = null;

			if(!noPropagation) {
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return true;

		},

		_trigger: function() {
			if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
				this.cancel();
			}
		},

		_uiHash: function(_inst) {
			var inst = _inst || this;
			return {
				helper: inst.helper,
				placeholder: inst.placeholder || $([]),
				position: inst.position,
				originalPosition: inst.originalPosition,
				offset: inst.positionAbs,
				item: inst.currentItem,
				sender: _inst ? _inst.element : null
			};
		}

	});

	})(jQuery);

	(function($, undefined) {

	var dataSpace = "ui-effects-";

	$.effects = {
		effect: {}
	};

	/*!
	 * jQuery Color Animations v2.1.2
	 * https://github.com/jquery/jquery-color
	 *
	 * Copyright 2013 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * Date: Wed Jan 16 08:47:09 2013 -0600
	 */
	(function( jQuery, undefined ) {

		var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [{
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ] * 2.55,
						execResult[ 2 ] * 2.55,
						execResult[ 3 ] * 2.55,
						execResult[ 4 ]
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ] / 100,
						execResult[ 3 ] / 100,
						execResult[ 4 ]
					];
				}
			}],

		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				props: {
					red: {
						idx: 0,
						type: "byte"
					},
					green: {
						idx: 1,
						type: "byte"
					},
					blue: {
						idx: 2,
						type: "byte"
					}
				}
			},

			hsla: {
				props: {
					hue: {
						idx: 0,
						type: "degrees"
					},
					saturation: {
						idx: 1,
						type: "percent"
					},
					lightness: {
						idx: 2,
						type: "percent"
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				max: 255
			},
			"percent": {
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		support = color.support = {},

		// element for support tests
		supportElem = jQuery( "<p>" )[ 0 ],

		// colors = jQuery.Color.names
		colors,

		// local aliases of functions called often
		each = jQuery.each;

	// determine rgba support immediately
	supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
	support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

	// define cache name and alpha properties
	// for rgba and hsla spaces
	each( spaces, function( spaceName, space ) {
		space.cache = "_" + spaceName;
		space.props.alpha = {
			idx: 3,
			type: "percent",
			def: 1
		};
	});

	function clamp( value, prop, allowEmpty ) {
		var type = propTypes[ prop.type ] || {};

		if ( value == null ) {
			return (allowEmpty || !prop.def) ? null : prop.def;
		}

		// ~~ is an short way of doing floor for positive numbers
		value = type.floor ? ~~value : parseFloat( value );

		// IE will pass in empty strings as value for alpha,
		// which will hit this case
		if ( isNaN( value ) ) {
			return prop.def;
		}

		if ( type.mod ) {
			// we add mod before modding to make sure that negatives values
			// get converted properly: -10 -> 350
			return (value + type.mod) % type.mod;
		}

		// for now all property types without mod have min and max
		return 0 > value ? 0 : type.max < value ? type.max : value;
	}

	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];

		string = string.toLowerCase();

		each( stringParsers, function( i, parser ) {
			var parsed,
				match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				spaceName = parser.space || "rgba";

			if ( values ) {
				parsed = inst[ spaceName ]( values );

				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
				rgba = inst._rgba = parsed._rgba;

				// exit each( stringParsers ) here because we matched
				return false;
			}
		});

		// Found a stringParser that handled it
		if ( rgba.length ) {

			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( rgba.join() === "0,0,0,0" ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}

		// named colors
		return colors[ string ];
	}

	color.fn = jQuery.extend( color.prototype, {
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red.jquery || red.nodeType ) {
				red = jQuery( red ).css( green );
				green = undefined;
			}

			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [];

			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}

			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}

			if ( type === "array" ) {
				each( spaces.rgba.props, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}

			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						var cache = space.cache;
						each( space.props, function( key, prop ) {

							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {

								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( key === "alpha" || red[ key ] == null ) {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}

							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});

						// everything defined but alpha?
						if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
							// use the default of 1
							inst[ cache ][ 3 ] = 1;
							if ( space.from ) {
								inst._rgba = space.from( inst[ cache ] );
							}
						}
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				inst = this;

			each( spaces, function( _, space ) {
				var localCache,
					isCache = is[ space.cache ];
				if (isCache) {
					localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				startColor = this.alpha() === 0 ? color( "transparent" ) : this,
				start = startColor[ space.cache ] || space.to( startColor._rgba ),
				result = start.slice();

			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};

				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}

			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;

			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});

			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}

			return prefix + rgba.join() + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}

					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});

			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join() + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();

			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}

			return "#" + jQuery.map( rgba, function( v ) {

				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	});
	color.fn.parse.prototype = color.fn;

	// hsla conversions adapted from:
	// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + (q - p) * h * 6;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + (q - p) * ((2/3) - h) * 6;
		}
		return p;
	}

	spaces.hsla.to = function ( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;

		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}

		// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
		// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
		if ( diff === 0 ) {
			s = 0;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};

	spaces.hsla.from = function ( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q;

		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};


	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;

		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {

			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}

			var ret,
				type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice();

			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});

			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};

		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;

				if ( vtype === "undefined" ) {
					return cur;
				}

				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});

	// add cssHook and .fx.step function for each named hook.
	// accept a space separated string of properties
	color.hook = function( hook ) {
		var hooks = hook.split( " " );
		each( hooks, function( i, hook ) {
			jQuery.cssHooks[ hook ] = {
				set: function( elem, value ) {
					var parsed, curElem,
						backgroundColor = "";

					if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
						value = color( parsed || value );
						if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
							curElem = hook === "backgroundColor" ? elem.parentNode : elem;
							while (
								(backgroundColor === "" || backgroundColor === "transparent") &&
								curElem && curElem.style
							) {
								try {
									backgroundColor = jQuery.css( curElem, "backgroundColor" );
									curElem = curElem.parentNode;
								} catch ( e ) {
								}
							}

							value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
								backgroundColor :
								"_default" );
						}

						value = value.toRgbaString();
					}
					try {
						elem.style[ hook ] = value;
					} catch( e ) {
						// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
					}
				}
			};
			jQuery.fx.step[ hook ] = function( fx ) {
				if ( !fx.colorInit ) {
					fx.start = color( fx.elem, hook );
					fx.end = color( fx.end );
					fx.colorInit = true;
				}
				jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
			};
		});

	};

	color.hook( stepHooks );

	jQuery.cssHooks.borderColor = {
		expand: function( value ) {
			var expanded = {};

			each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
				expanded[ "border" + part + "Color" ] = value;
			});
			return expanded;
		}
	};

	// Basic color names only.
	// Usage of any of the other color names requires adding yourself or including
	// jquery.color.svg-names.js.
	colors = jQuery.Color.names = {
		// 4.1. Basic color keywords
		aqua: "#00ffff",
		black: "#000000",
		blue: "#0000ff",
		fuchsia: "#ff00ff",
		gray: "#808080",
		green: "#008000",
		lime: "#00ff00",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		purple: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		teal: "#008080",
		white: "#ffffff",
		yellow: "#ffff00",

		// 4.2.3. "transparent" color keyword
		transparent: [ null, null, null, 0 ],

		_default: "#ffffff"
	};

	})( jQuery );


	/******************************************************************************/
	/****************************** CLASS ANIMATIONS ******************************/
	/******************************************************************************/
	(function() {

	var classAnimationActions = [ "add", "remove", "toggle" ],
		shorthandStyles = {
			border: 1,
			borderBottom: 1,
			borderColor: 1,
			borderLeft: 1,
			borderRight: 1,
			borderTop: 1,
			borderWidth: 1,
			margin: 1,
			padding: 1
		};

	$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	});

	function getElementStyles( elem ) {
		var key, len,
			style = elem.ownerDocument.defaultView ?
				elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
				elem.currentStyle,
			styles = {};

		if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
			len = style.length;
			while ( len-- ) {
				key = style[ len ];
				if ( typeof style[ key ] === "string" ) {
					styles[ $.camelCase( key ) ] = style[ key ];
				}
			}
		// support: Opera, IE <9
		} else {
			for ( key in style ) {
				if ( typeof style[ key ] === "string" ) {
					styles[ key ] = style[ key ];
				}
			}
		}

		return styles;
	}


	function styleDifference( oldStyle, newStyle ) {
		var diff = {},
			name, value;

		for ( name in newStyle ) {
			value = newStyle[ name ];
			if ( oldStyle[ name ] !== value ) {
				if ( !shorthandStyles[ name ] ) {
					if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
						diff[ name ] = value;
					}
				}
			}
		}

		return diff;
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	$.effects.animateClass = function( value, duration, easing, callback ) {
		var o = $.speed( duration, easing, callback );

		return this.queue( function() {
			var animated = $( this ),
				baseClass = animated.attr( "class" ) || "",
				applyClassChange,
				allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

			// map the animated objects to store the original styles.
			allAnimations = allAnimations.map(function() {
				var el = $( this );
				return {
					el: el,
					start: getElementStyles( this )
				};
			});

			// apply class change
			applyClassChange = function() {
				$.each( classAnimationActions, function(i, action) {
					if ( value[ action ] ) {
						animated[ action + "Class" ]( value[ action ] );
					}
				});
			};
			applyClassChange();

			// map all animated objects again - calculate new styles and diff
			allAnimations = allAnimations.map(function() {
				this.end = getElementStyles( this.el[ 0 ] );
				this.diff = styleDifference( this.start, this.end );
				return this;
			});

			// apply original class
			animated.attr( "class", baseClass );

			// map all animated objects again - this time collecting a promise
			allAnimations = allAnimations.map(function() {
				var styleInfo = this,
					dfd = $.Deferred(),
					opts = $.extend({}, o, {
						queue: false,
						complete: function() {
							dfd.resolve( styleInfo );
						}
					});

				this.el.animate( this.diff, opts );
				return dfd.promise();
			});

			// once all animations have completed:
			$.when.apply( $, allAnimations.get() ).done(function() {

				// set the final class
				applyClassChange();

				// for each animated element,
				// clear all css properties that were animated
				$.each( arguments, function() {
					var el = this.el;
					$.each( this.diff, function(key) {
						el.css( key, "" );
					});
				});

				// this is guarnteed to be there if you use jQuery.speed()
				// it also handles dequeuing the next anim...
				o.complete.call( animated[ 0 ] );
			});
		});
	};

	$.fn.extend({
		addClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return speed ?
					$.effects.animateClass.call( this,
						{ add: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.addClass ),

		removeClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return arguments.length > 1 ?
					$.effects.animateClass.call( this,
						{ remove: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.removeClass ),

		toggleClass: (function( orig ) {
			return function( classNames, force, speed, easing, callback ) {
				if ( typeof force === "boolean" || force === undefined ) {
					if ( !speed ) {
						// without speed parameter
						return orig.apply( this, arguments );
					} else {
						return $.effects.animateClass.call( this,
							(force ? { add: classNames } : { remove: classNames }),
							speed, easing, callback );
					}
				} else {
					// without force parameter
					return $.effects.animateClass.call( this,
						{ toggle: classNames }, force, speed, easing );
				}
			};
		})( $.fn.toggleClass ),

		switchClass: function( remove, add, speed, easing, callback) {
			return $.effects.animateClass.call( this, {
				add: add,
				remove: remove
			}, speed, easing, callback );
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EFFECTS **********************************/
	/******************************************************************************/

	(function() {

	$.extend( $.effects, {
		version: "1.10.3",

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			for( var i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i;
			for( i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					// support: jQuery 1.6.2
					// http://bugs.jquery.com/ticket/9917
					// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
					// We can't differentiate between "" and 0 here, so we just assume
					// empty string since it's likely to be a more common value...
					if ( val === undefined ) {
						val = "";
					}
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if (mode === "toggle") {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Translates a [top,left] array into a baseline value
		// this should be a little more flexible in the future to handle a string & hash
		getBaseline: function( origin, original ) {
			var y, x;
			switch ( origin[ 0 ] ) {
				case "top": y = 0; break;
				case "middle": y = 0.5; break;
				case "bottom": y = 1; break;
				default: y = origin[ 0 ] / original.height;
			}
			switch ( origin[ 1 ] ) {
				case "left": x = 0; break;
				case "center": x = 0.5; break;
				case "right": x = 1; break;
				default: x = origin[ 1 ] / original.width;
			}
			return {
				x: x,
				y: y
			};
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// if the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" )) {
				return element.parent();
			}

			// wrap the element
			var props = {
					width: element.outerWidth(true),
					height: element.outerHeight(true),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css({
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					}),
				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}

			wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

			// transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css({ position: "relative" });
				element.css({ position: "relative" });
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				});
				$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				});
				element.css({
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				});
			}
			element.css(size);

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).focus();
				}
			}


			return element;
		},

		setTransition: function( element, list, factor, value ) {
			value = value || {};
			$.each( list, function( i, x ) {
				var unit = element.cssUnit( x );
				if ( unit[ 0 ] > 0 ) {
					value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
				}
			});
			return value;
		}
	});

	// return an effect options object for the given parameters:
	function _normalizeArguments( effect, options, speed, callback ) {

		// allow passing all options as the first parameter
		if ( $.isPlainObject( effect ) ) {
			options = effect;
			effect = effect.effect;
		}

		// convert to an object
		effect = { effect: effect };

		// catch (effect, null, ...)
		if ( options == null ) {
			options = {};
		}

		// catch (effect, callback)
		if ( $.isFunction( options ) ) {
			callback = options;
			speed = null;
			options = {};
		}

		// catch (effect, speed, ?)
		if ( typeof options === "number" || $.fx.speeds[ options ] ) {
			callback = speed;
			speed = options;
			options = {};
		}

		// catch (effect, options, callback)
		if ( $.isFunction( speed ) ) {
			callback = speed;
			speed = null;
		}

		// add options to effect
		if ( options ) {
			$.extend( effect, options );
		}

		speed = speed || options.duration;
		effect.duration = $.fx.off ? 0 :
			typeof speed === "number" ? speed :
			speed in $.fx.speeds ? $.fx.speeds[ speed ] :
			$.fx.speeds._default;

		effect.complete = callback || options.complete;

		return effect;
	}

	function standardAnimationOption( option ) {
		// Valid standard speeds (nothing, number, named speed)
		if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
			return true;
		}

		// Invalid strings - treat as "normal" speed
		if ( typeof option === "string" && !$.effects.effect[ option ] ) {
			return true;
		}

		// Complete callback
		if ( $.isFunction( option ) ) {
			return true;
		}

		// Options hash (but not naming an effect)
		if ( typeof option === "object" && !option.effect ) {
			return true;
		}

		// Didn't match any standard API
		return false;
	}

	$.fn.extend({
		effect: function( /* effect, options, speed, callback */ ) {
			var args = _normalizeArguments.apply( this, arguments ),
				mode = args.mode,
				queue = args.queue,
				effectMethod = $.effects.effect[ args.effect ];

			if ( $.fx.off || !effectMethod ) {
				// delegate to the original method (e.g., .show()) if possible
				if ( mode ) {
					return this[ mode ]( args.duration, args.complete );
				} else {
					return this.each( function() {
						if ( args.complete ) {
							args.complete.call( this );
						}
					});
				}
			}

			function run( next ) {
				var elem = $( this ),
					complete = args.complete,
					mode = args.mode;

				function done() {
					if ( $.isFunction( complete ) ) {
						complete.call( elem[0] );
					}
					if ( $.isFunction( next ) ) {
						next();
					}
				}

				// If the element already has the correct final state, delegate to
				// the core methods so the internal tracking of "olddisplay" works.
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[0], args, done );
				}
			}

			return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
		},

		show: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "show";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.show ),

		hide: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "hide";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.hide ),

		toggle: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "toggle";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.toggle ),

		// helper functions
		cssUnit: function(key) {
			var style = this.css( key ),
				val = [];

			$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
				if ( style.indexOf( unit ) > 0 ) {
					val = [ parseFloat( style ), unit ];
				}
			});
			return val;
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EASING ***********************************/
	/******************************************************************************/

	(function() {

	// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

	var baseEasings = {};

	$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
		baseEasings[ name ] = function( p ) {
			return Math.pow( p, i + 2 );
		};
	});

	$.extend( baseEasings, {
		Sine: function ( p ) {
			return 1 - Math.cos( p * Math.PI / 2 );
		},
		Circ: function ( p ) {
			return 1 - Math.sqrt( 1 - p * p );
		},
		Elastic: function( p ) {
			return p === 0 || p === 1 ? p :
				-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
		},
		Back: function( p ) {
			return p * p * ( 3 * p - 2 );
		},
		Bounce: function ( p ) {
			var pow2,
				bounce = 4;

			while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
			return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
		}
	});

	$.each( baseEasings, function( name, easeIn ) {
		$.easing[ "easeIn" + name ] = easeIn;
		$.easing[ "easeOut" + name ] = function( p ) {
			return 1 - easeIn( 1 - p );
		};
		$.easing[ "easeInOut" + name ] = function( p ) {
			return p < 0.5 ?
				easeIn( p * 2 ) / 2 :
				1 - easeIn( p * -2 + 2 ) / 2;
		};
	});

	})();

	})(jQuery);

	(function( $, undefined ) {

	var uid = 0,
		hideProps = {},
		showProps = {};

	hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
		hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
	showProps.height = showProps.paddingTop = showProps.paddingBottom =
		showProps.borderTopWidth = showProps.borderBottomWidth = "show";

	$.widget( "ui.accordion", {
		version: "1.10.3",
		options: {
			active: 0,
			animate: {},
			collapsible: false,
			event: "click",
			header: "> li > :first-child,> :not(li):even",
			heightStyle: "auto",
			icons: {
				activeHeader: "ui-icon-triangle-1-s",
				header: "ui-icon-triangle-1-e"
			},

			// callbacks
			activate: null,
			beforeActivate: null
		},

		_create: function() {
			var options = this.options;
			this.prevShow = this.prevHide = $();
			this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
				// ARIA
				.attr( "role", "tablist" );

			// don't allow collapsible: false and active: false / null
			if ( !options.collapsible && (options.active === false || options.active == null) ) {
				options.active = 0;
			}

			this._processPanels();
			// handle negative values
			if ( options.active < 0 ) {
				options.active += this.headers.length;
			}
			this._refresh();
		},

		_getCreateEventData: function() {
			return {
				header: this.active,
				panel: !this.active.length ? $() : this.active.next(),
				content: !this.active.length ? $() : this.active.next()
			};
		},

		_createIcons: function() {
			var icons = this.options.icons;
			if ( icons ) {
				$( "<span>" )
					.addClass( "ui-accordion-header-icon ui-icon " + icons.header )
					.prependTo( this.headers );
				this.active.children( ".ui-accordion-header-icon" )
					.removeClass( icons.header )
					.addClass( icons.activeHeader );
				this.headers.addClass( "ui-accordion-icons" );
			}
		},

		_destroyIcons: function() {
			this.headers
				.removeClass( "ui-accordion-icons" )
				.children( ".ui-accordion-header-icon" )
					.remove();
		},

		_destroy: function() {
			var contents;

			// clean up main element
			this.element
				.removeClass( "ui-accordion ui-widget ui-helper-reset" )
				.removeAttr( "role" );

			// clean up headers
			this.headers
				.removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
				.removeAttr( "role" )
				.removeAttr( "aria-selected" )
				.removeAttr( "aria-controls" )
				.removeAttr( "tabIndex" )
				.each(function() {
					if ( /^ui-accordion/.test( this.id ) ) {
						this.removeAttribute( "id" );
					}
				});
			this._destroyIcons();

			// clean up content panels
			contents = this.headers.next()
				.css( "display", "" )
				.removeAttr( "role" )
				.removeAttr( "aria-expanded" )
				.removeAttr( "aria-hidden" )
				.removeAttr( "aria-labelledby" )
				.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
				.each(function() {
					if ( /^ui-accordion/.test( this.id ) ) {
						this.removeAttribute( "id" );
					}
				});
			if ( this.options.heightStyle !== "content" ) {
				contents.css( "height", "" );
			}
		},

		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}

			if ( key === "event" ) {
				if ( this.options.event ) {
					this._off( this.headers, this.options.event );
				}
				this._setupEvents( value );
			}

			this._super( key, value );

			// setting collapsible: false while collapsed; open first panel
			if ( key === "collapsible" && !value && this.options.active === false ) {
				this._activate( 0 );
			}

			if ( key === "icons" ) {
				this._destroyIcons();
				if ( value ) {
					this._createIcons();
				}
			}

			// #5332 - opacity doesn't cascade to positioned elements in IE
			// so we need to add the disabled class to the headers and panels
			if ( key === "disabled" ) {
				this.headers.add( this.headers.next() )
					.toggleClass( "ui-state-disabled", !!value );
			}
		},

		_keydown: function( event ) {
			/*jshint maxcomplexity:15*/
			if ( event.altKey || event.ctrlKey ) {
				return;
			}

			var keyCode = $.ui.keyCode,
				length = this.headers.length,
				currentIndex = this.headers.index( event.target ),
				toFocus = false;

			switch ( event.keyCode ) {
				case keyCode.RIGHT:
				case keyCode.DOWN:
					toFocus = this.headers[ ( currentIndex + 1 ) % length ];
					break;
				case keyCode.LEFT:
				case keyCode.UP:
					toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
					break;
				case keyCode.SPACE:
				case keyCode.ENTER:
					this._eventHandler( event );
					break;
				case keyCode.HOME:
					toFocus = this.headers[ 0 ];
					break;
				case keyCode.END:
					toFocus = this.headers[ length - 1 ];
					break;
			}

			if ( toFocus ) {
				$( event.target ).attr( "tabIndex", -1 );
				$( toFocus ).attr( "tabIndex", 0 );
				toFocus.focus();
				event.preventDefault();
			}
		},

		_panelKeyDown : function( event ) {
			if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
				$( event.currentTarget ).prev().focus();
			}
		},

		refresh: function() {
			var options = this.options;
			this._processPanels();

			// was collapsed or no panel
			if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
				options.active = false;
				this.active = $();
			// active false only when collapsible is true
			} else if ( options.active === false ) {
				this._activate( 0 );
			// was active, but active panel is gone
			} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				// all remaining panel are disabled
				if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
					options.active = false;
					this.active = $();
				// activate previous panel
				} else {
					this._activate( Math.max( 0, options.active - 1 ) );
				}
			// was active, active panel still exists
			} else {
				// make sure active index is correct
				options.active = this.headers.index( this.active );
			}

			this._destroyIcons();

			this._refresh();
		},

		_processPanels: function() {
			this.headers = this.element.find( this.options.header )
				.addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );

			this.headers.next()
				.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
				.filter(":not(.ui-accordion-content-active)")
				.hide();
		},

		_refresh: function() {
			var maxHeight,
				options = this.options,
				heightStyle = options.heightStyle,
				parent = this.element.parent(),
				accordionId = this.accordionId = "ui-accordion-" +
					(this.element.attr( "id" ) || ++uid);

			this.active = this._findActive( options.active )
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
				.removeClass( "ui-corner-all" );
			this.active.next()
				.addClass( "ui-accordion-content-active" )
				.show();

			this.headers
				.attr( "role", "tab" )
				.each(function( i ) {
					var header = $( this ),
						headerId = header.attr( "id" ),
						panel = header.next(),
						panelId = panel.attr( "id" );
					if ( !headerId ) {
						headerId = accordionId + "-header-" + i;
						header.attr( "id", headerId );
					}
					if ( !panelId ) {
						panelId = accordionId + "-panel-" + i;
						panel.attr( "id", panelId );
					}
					header.attr( "aria-controls", panelId );
					panel.attr( "aria-labelledby", headerId );
				})
				.next()
					.attr( "role", "tabpanel" );

			this.headers
				.not( this.active )
				.attr({
					"aria-selected": "false",
					tabIndex: -1
				})
				.next()
					.attr({
						"aria-expanded": "false",
						"aria-hidden": "true"
					})
					.hide();

			// make sure at least one header is in the tab order
			if ( !this.active.length ) {
				this.headers.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active.attr({
					"aria-selected": "true",
					tabIndex: 0
				})
				.next()
					.attr({
						"aria-expanded": "true",
						"aria-hidden": "false"
					});
			}

			this._createIcons();

			this._setupEvents( options.event );

			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );

					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});

				this.headers.each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});

				this.headers.next()
					.each(function() {
						$( this ).height( Math.max( 0, maxHeight -
							$( this ).innerHeight() + $( this ).height() ) );
					})
					.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.headers.next()
					.each(function() {
						maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					})
					.height( maxHeight );
			}
		},

		_activate: function( index ) {
			var active = this._findActive( index )[ 0 ];

			// trying to activate the already active panel
			if ( active === this.active[ 0 ] ) {
				return;
			}

			// trying to collapse, simulate a click on the currently active header
			active = active || this.active[ 0 ];

			this._eventHandler({
				target: active,
				currentTarget: active,
				preventDefault: $.noop
			});
		},

		_findActive: function( selector ) {
			return typeof selector === "number" ? this.headers.eq( selector ) : $();
		},

		_setupEvents: function( event ) {
			var events = {
				keydown: "_keydown"
			};
			if ( event ) {
				$.each( event.split(" "), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}

			this._off( this.headers.add( this.headers.next() ) );
			this._on( this.headers, events );
			this._on( this.headers.next(), { keydown: "_panelKeyDown" });
			this._hoverable( this.headers );
			this._focusable( this.headers );
		},

		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				clicked = $( event.currentTarget ),
				clickedIsActive = clicked[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : clicked.next(),
				toHide = active.next(),
				eventData = {
					oldHeader: active,
					oldPanel: toHide,
					newHeader: collapsing ? $() : clicked,
					newPanel: toShow
				};

			event.preventDefault();

			if (
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}

			options.active = collapsing ? false : this.headers.index( clicked );

			// when the call to ._toggle() comes after the class changes
			// it causes a very odd bug in IE 8 (see #6720)
			this.active = clickedIsActive ? $() : clicked;
			this._toggle( eventData );

			// switch classes
			// corner classes on the previously active header stay after the animation
			active.removeClass( "ui-accordion-header-active ui-state-active" );
			if ( options.icons ) {
				active.children( ".ui-accordion-header-icon" )
					.removeClass( options.icons.activeHeader )
					.addClass( options.icons.header );
			}

			if ( !clickedIsActive ) {
				clicked
					.removeClass( "ui-corner-all" )
					.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
				if ( options.icons ) {
					clicked.children( ".ui-accordion-header-icon" )
						.removeClass( options.icons.header )
						.addClass( options.icons.activeHeader );
				}

				clicked
					.next()
					.addClass( "ui-accordion-content-active" );
			}
		},

		_toggle: function( data ) {
			var toShow = data.newPanel,
				toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

			// handle activating a panel during the animation for another activation
			this.prevShow.add( this.prevHide ).stop( true, true );
			this.prevShow = toShow;
			this.prevHide = toHide;

			if ( this.options.animate ) {
				this._animate( toShow, toHide, data );
			} else {
				toHide.hide();
				toShow.show();
				this._toggleComplete( data );
			}

			toHide.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});
			toHide.prev().attr( "aria-selected", "false" );
			// if we're switching panels, remove the old header from the tab order
			// if we're opening from collapsed state, remove the previous header from the tab order
			// if we're collapsing, then keep the collapsing header in the tab order
			if ( toShow.length && toHide.length ) {
				toHide.prev().attr( "tabIndex", -1 );
			} else if ( toShow.length ) {
				this.headers.filter(function() {
					return $( this ).attr( "tabIndex" ) === 0;
				})
				.attr( "tabIndex", -1 );
			}

			toShow
				.attr({
					"aria-expanded": "true",
					"aria-hidden": "false"
				})
				.prev()
					.attr({
						"aria-selected": "true",
						tabIndex: 0
					});
		},

		_animate: function( toShow, toHide, data ) {
			var total, easing, duration,
				that = this,
				adjust = 0,
				down = toShow.length &&
					( !toHide.length || ( toShow.index() < toHide.index() ) ),
				animate = this.options.animate || {},
				options = down && animate.down || animate,
				complete = function() {
					that._toggleComplete( data );
				};

			if ( typeof options === "number" ) {
				duration = options;
			}
			if ( typeof options === "string" ) {
				easing = options;
			}
			// fall back from options to animation in case of partial down settings
			easing = easing || options.easing || animate.easing;
			duration = duration || options.duration || animate.duration;

			if ( !toHide.length ) {
				return toShow.animate( showProps, duration, easing, complete );
			}
			if ( !toShow.length ) {
				return toHide.animate( hideProps, duration, easing, complete );
			}

			total = toShow.show().outerHeight();
			toHide.animate( hideProps, {
				duration: duration,
				easing: easing,
				step: function( now, fx ) {
					fx.now = Math.round( now );
				}
			});
			toShow
				.hide()
				.animate( showProps, {
					duration: duration,
					easing: easing,
					complete: complete,
					step: function( now, fx ) {
						fx.now = Math.round( now );
						if ( fx.prop !== "height" ) {
							adjust += fx.now;
						} else if ( that.options.heightStyle !== "content" ) {
							fx.now = Math.round( total - toHide.outerHeight() - adjust );
							adjust = 0;
						}
					}
				});
		},

		_toggleComplete: function( data ) {
			var toHide = data.oldPanel;

			toHide
				.removeClass( "ui-accordion-content-active" )
				.prev()
					.removeClass( "ui-corner-top" )
					.addClass( "ui-corner-all" );

			// Work around for rendering bug in IE (#5421)
			if ( toHide.length ) {
				toHide.parent()[0].className = toHide.parent()[0].className;
			}

			this._trigger( "activate", null, data );
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	// used to prevent race conditions with remote data sources
	var requestIndex = 0;

	$.widget( "ui.autocomplete", {
		version: "1.10.3",
		defaultElement: "<input>",
		options: {
			appendTo: null,
			autoFocus: false,
			delay: 300,
			minLength: 1,
			position: {
				my: "left top",
				at: "left bottom",
				collision: "none"
			},
			source: null,

			// callbacks
			change: null,
			close: null,
			focus: null,
			open: null,
			response: null,
			search: null,
			select: null
		},

		pending: 0,

		_create: function() {
			// Some browsers only repeat keydown events, not keypress events,
			// so we use the suppressKeyPress flag to determine if we've already
			// handled the keydown event. #7269
			// Unfortunately the code for & in keypress is the same as the up arrow,
			// so we use the suppressKeyPressRepeat flag to avoid handling keypress
			// events when we know the keydown event was used to modify the
			// search term. #7799
			var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
				nodeName = this.element[0].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";

			this.isMultiLine =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );

			this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			this.isNewMenu = true;

			this.element
				.addClass( "ui-autocomplete-input" )
				.attr( "autocomplete", "off" );

			this._on( this.element, {
				keydown: function( event ) {
					/*jshint maxcomplexity:15*/
					if ( this.element.prop( "readOnly" ) ) {
						suppressKeyPress = true;
						suppressInput = true;
						suppressKeyPressRepeat = true;
						return;
					}

					suppressKeyPress = false;
					suppressInput = false;
					suppressKeyPressRepeat = false;
					var keyCode = $.ui.keyCode;
					switch( event.keyCode ) {
					case keyCode.PAGE_UP:
						suppressKeyPress = true;
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						suppressKeyPress = true;
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						suppressKeyPress = true;
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						suppressKeyPress = true;
						this._keyEvent( "next", event );
						break;
					case keyCode.ENTER:
					case keyCode.NUMPAD_ENTER:
						// when menu is open and has focus
						if ( this.menu.active ) {
							// #6055 - Opera still allows the keypress to occur
							// which causes forms to submit
							suppressKeyPress = true;
							event.preventDefault();
							this.menu.select( event );
						}
						break;
					case keyCode.TAB:
						if ( this.menu.active ) {
							this.menu.select( event );
						}
						break;
					case keyCode.ESCAPE:
						if ( this.menu.element.is( ":visible" ) ) {
							this._value( this.term );
							this.close( event );
							// Different browsers have different default behavior for escape
							// Single press can mean undo or clear
							// Double press in IE means clear the whole form
							event.preventDefault();
						}
						break;
					default:
						suppressKeyPressRepeat = true;
						// search timeout should be triggered before the input value is changed
						this._searchTimeout( event );
						break;
					}
				},
				keypress: function( event ) {
					if ( suppressKeyPress ) {
						suppressKeyPress = false;
						if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
							event.preventDefault();
						}
						return;
					}
					if ( suppressKeyPressRepeat ) {
						return;
					}

					// replicate some key handlers to allow them to repeat in Firefox and Opera
					var keyCode = $.ui.keyCode;
					switch( event.keyCode ) {
					case keyCode.PAGE_UP:
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						this._keyEvent( "next", event );
						break;
					}
				},
				input: function( event ) {
					if ( suppressInput ) {
						suppressInput = false;
						event.preventDefault();
						return;
					}
					this._searchTimeout( event );
				},
				focus: function() {
					this.selectedItem = null;
					this.previous = this._value();
				},
				blur: function( event ) {
					if ( this.cancelBlur ) {
						delete this.cancelBlur;
						return;
					}

					clearTimeout( this.searching );
					this.close( event );
					this._change( event );
				}
			});

			this._initSource();
			this.menu = $( "<ul>" )
				.addClass( "ui-autocomplete ui-front" )
				.appendTo( this._appendTo() )
				.menu({
					// disable ARIA support, the live region takes care of that
					role: null
				})
				.hide()
				.data( "ui-menu" );

			this._on( this.menu.element, {
				mousedown: function( event ) {
					// prevent moving focus out of the text field
					event.preventDefault();

					// IE doesn't prevent moving focus even with event.preventDefault()
					// so we set a flag to know when we should ignore the blur event
					this.cancelBlur = true;
					this._delay(function() {
						delete this.cancelBlur;
					});

					// clicking on the scrollbar causes focus to shift to the body
					// but we can't detect a mouseup or a click immediately afterward
					// so we have to track the next mousedown and close the menu if
					// the user clicks somewhere outside of the autocomplete
					var menuElement = this.menu.element[ 0 ];
					if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
						this._delay(function() {
							var that = this;
							this.document.one( "mousedown", function( event ) {
								if ( event.target !== that.element[ 0 ] &&
										event.target !== menuElement &&
										!$.contains( menuElement, event.target ) ) {
									that.close();
								}
							});
						});
					}
				},
				menufocus: function( event, ui ) {
					// support: Firefox
					// Prevent accidental activation of menu items in Firefox (#7024 #9118)
					if ( this.isNewMenu ) {
						this.isNewMenu = false;
						if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
							this.menu.blur();

							this.document.one( "mousemove", function() {
								$( event.target ).trigger( event.originalEvent );
							});

							return;
						}
					}

					var item = ui.item.data( "ui-autocomplete-item" );
					if ( false !== this._trigger( "focus", event, { item: item } ) ) {
						// use value to match what will end up in the input, if it was a key event
						if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
							this._value( item.value );
						}
					} else {
						// Normally the input is populated with the item's value as the
						// menu is navigated, causing screen readers to notice a change and
						// announce the item. Since the focus event was canceled, this doesn't
						// happen, so we update the live region so that screen readers can
						// still notice the change and announce it.
						this.liveRegion.text( item.value );
					}
				},
				menuselect: function( event, ui ) {
					var item = ui.item.data( "ui-autocomplete-item" ),
						previous = this.previous;

					// only trigger when focus was lost (click on menu)
					if ( this.element[0] !== this.document[0].activeElement ) {
						this.element.focus();
						this.previous = previous;
						// #6109 - IE triggers two focus events and the second
						// is asynchronous, so we need to reset the previous
						// term synchronously and asynchronously :-(
						this._delay(function() {
							this.previous = previous;
							this.selectedItem = item;
						});
					}

					if ( false !== this._trigger( "select", event, { item: item } ) ) {
						this._value( item.value );
					}
					// reset the term after the select event
					// this allows custom select handling to work properly
					this.term = this._value();

					this.close( event );
					this.selectedItem = item;
				}
			});

			this.liveRegion = $( "<span>", {
					role: "status",
					"aria-live": "polite"
				})
				.addClass( "ui-helper-hidden-accessible" )
				.insertBefore( this.element );

			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},

		_destroy: function() {
			clearTimeout( this.searching );
			this.element
				.removeClass( "ui-autocomplete-input" )
				.removeAttr( "autocomplete" );
			this.menu.element.remove();
			this.liveRegion.remove();
		},

		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "source" ) {
				this._initSource();
			}
			if ( key === "appendTo" ) {
				this.menu.element.appendTo( this._appendTo() );
			}
			if ( key === "disabled" && value && this.xhr ) {
				this.xhr.abort();
			}
		},

		_appendTo: function() {
			var element = this.options.appendTo;

			if ( element ) {
				element = element.jquery || element.nodeType ?
					$( element ) :
					this.document.find( element ).eq( 0 );
			}

			if ( !element ) {
				element = this.element.closest( ".ui-front" );
			}

			if ( !element.length ) {
				element = this.document[0].body;
			}

			return element;
		},

		_initSource: function() {
			var array, url,
				that = this;
			if ( $.isArray(this.options.source) ) {
				array = this.options.source;
				this.source = function( request, response ) {
					response( $.ui.autocomplete.filter( array, request.term ) );
				};
			} else if ( typeof this.options.source === "string" ) {
				url = this.options.source;
				this.source = function( request, response ) {
					if ( that.xhr ) {
						that.xhr.abort();
					}
					that.xhr = $.ajax({
						url: url,
						data: request,
						dataType: "json",
						success: function( data ) {
							response( data );
						},
						error: function() {
							response( [] );
						}
					});
				};
			} else {
				this.source = this.options.source;
			}
		},

		_searchTimeout: function( event ) {
			clearTimeout( this.searching );
			this.searching = this._delay(function() {
				// only search if the value has changed
				if ( this.term !== this._value() ) {
					this.selectedItem = null;
					this.search( null, event );
				}
			}, this.options.delay );
		},

		search: function( value, event ) {
			value = value != null ? value : this._value();

			// always save the actual value, not the one passed as an argument
			this.term = this._value();

			if ( value.length < this.options.minLength ) {
				return this.close( event );
			}

			if ( this._trigger( "search", event ) === false ) {
				return;
			}

			return this._search( value );
		},

		_search: function( value ) {
			this.pending++;
			this.element.addClass( "ui-autocomplete-loading" );
			this.cancelSearch = false;

			this.source( { term: value }, this._response() );
		},

		_response: function() {
			var that = this,
				index = ++requestIndex;

			return function( content ) {
				if ( index === requestIndex ) {
					that.__response( content );
				}

				that.pending--;
				if ( !that.pending ) {
					that.element.removeClass( "ui-autocomplete-loading" );
				}
			};
		},

		__response: function( content ) {
			if ( content ) {
				content = this._normalize( content );
			}
			this._trigger( "response", null, { content: content } );
			if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
				this._suggest( content );
				this._trigger( "open" );
			} else {
				// use ._close() instead of .close() so we don't cancel future searches
				this._close();
			}
		},

		close: function( event ) {
			this.cancelSearch = true;
			this._close( event );
		},

		_close: function( event ) {
			if ( this.menu.element.is( ":visible" ) ) {
				this.menu.element.hide();
				this.menu.blur();
				this.isNewMenu = true;
				this._trigger( "close", event );
			}
		},

		_change: function( event ) {
			if ( this.previous !== this._value() ) {
				this._trigger( "change", event, { item: this.selectedItem } );
			}
		},

		_normalize: function( items ) {
			// assume all items have the right format when the first item is complete
			if ( items.length && items[0].label && items[0].value ) {
				return items;
			}
			return $.map( items, function( item ) {
				if ( typeof item === "string" ) {
					return {
						label: item,
						value: item
					};
				}
				return $.extend({
					label: item.label || item.value,
					value: item.value || item.label
				}, item );
			});
		},

		_suggest: function( items ) {
			var ul = this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();

			// size and position menu
			ul.show();
			this._resizeMenu();
			ul.position( $.extend({
				of: this.element
			}, this.options.position ));

			if ( this.options.autoFocus ) {
				this.menu.next();
			}
		},

		_resizeMenu: function() {
			var ul = this.menu.element;
			ul.outerWidth( Math.max(
				// Firefox wraps long text (possibly a rounding bug)
				// so we add 1px to avoid the wrapping (#7513)
				ul.width( "" ).outerWidth() + 1,
				this.element.outerWidth()
			) );
		},

		_renderMenu: function( ul, items ) {
			var that = this;
			$.each( items, function( index, item ) {
				that._renderItemData( ul, item );
			});
		},

		_renderItemData: function( ul, item ) {
			return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
		},

		_renderItem: function( ul, item ) {
			return $( "<li>" )
				.append( $( "<a>" ).text( item.label ) )
				.appendTo( ul );
		},

		_move: function( direction, event ) {
			if ( !this.menu.element.is( ":visible" ) ) {
				this.search( null, event );
				return;
			}
			if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
					this.menu.isLastItem() && /^next/.test( direction ) ) {
				this._value( this.term );
				this.menu.blur();
				return;
			}
			this.menu[ direction ]( event );
		},

		widget: function() {
			return this.menu.element;
		},

		_value: function() {
			return this.valueMethod.apply( this.element, arguments );
		},

		_keyEvent: function( keyEvent, event ) {
			if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
				this._move( keyEvent, event );

				// prevents moving cursor to beginning/end of the text field in some browsers
				event.preventDefault();
			}
		}
	});

	$.extend( $.ui.autocomplete, {
		escapeRegex: function( value ) {
			return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
		},
		filter: function(array, term) {
			var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
			return $.grep( array, function(value) {
				return matcher.test( value.label || value.value || value );
			});
		}
	});


	// live region extension, adding a `messages` option
	// NOTE: This is an experimental API. We are still investigating
	// a full solution for string manipulation and internationalization.
	$.widget( "ui.autocomplete", $.ui.autocomplete, {
		options: {
			messages: {
				noResults: "No search results.",
				results: function( amount ) {
					return amount + ( amount > 1 ? " results are" : " result is" ) +
						" available, use up and down arrow keys to navigate.";
				}
			}
		},

		__response: function( content ) {
			var message;
			this._superApply( arguments );
			if ( this.options.disabled || this.cancelSearch ) {
				return;
			}
			if ( content && content.length ) {
				message = this.options.messages.results( content.length );
			} else {
				message = this.options.messages.noResults;
			}
			this.liveRegion.text( message );
		}
	});

	}( jQuery ));

	(function( $, undefined ) {

	var lastActive, startXPos, startYPos, clickDragged,
		baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
		stateClasses = "ui-state-hover ui-state-active ",
		typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
		formResetHandler = function() {
			var form = $( this );
			setTimeout(function() {
				form.find( ":ui-button" ).button( "refresh" );
			}, 1 );
		},
		radioGroup = function( radio ) {
			var name = radio.name,
				form = radio.form,
				radios = $( [] );
			if ( name ) {
				name = name.replace( /'/g, "\\'" );
				if ( form ) {
					radios = $( form ).find( "[name='" + name + "']" );
				} else {
					radios = $( "[name='" + name + "']", radio.ownerDocument )
						.filter(function() {
							return !this.form;
						});
				}
			}
			return radios;
		};

	$.widget( "ui.button", {
		version: "1.10.3",
		defaultElement: "<button>",
		options: {
			disabled: null,
			text: true,
			label: null,
			icons: {
				primary: null,
				secondary: null
			}
		},
		_create: function() {
			this.element.closest( "form" )
				.unbind( "reset" + this.eventNamespace )
				.bind( "reset" + this.eventNamespace, formResetHandler );

			if ( typeof this.options.disabled !== "boolean" ) {
				this.options.disabled = !!this.element.prop( "disabled" );
			} else {
				this.element.prop( "disabled", this.options.disabled );
			}

			this._determineButtonType();
			this.hasTitle = !!this.buttonElement.attr( "title" );

			var that = this,
				options = this.options,
				toggleButton = this.type === "checkbox" || this.type === "radio",
				activeClass = !toggleButton ? "ui-state-active" : "",
				focusClass = "ui-state-focus";

			if ( options.label === null ) {
				options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
			}

			this._hoverable( this.buttonElement );

			this.buttonElement
				.addClass( baseClasses )
				.attr( "role", "button" )
				.bind( "mouseenter" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					if ( this === lastActive ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				.bind( "mouseleave" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					$( this ).removeClass( activeClass );
				})
				.bind( "click" + this.eventNamespace, function( event ) {
					if ( options.disabled ) {
						event.preventDefault();
						event.stopImmediatePropagation();
					}
				});

			this.element
				.bind( "focus" + this.eventNamespace, function() {
					// no need to check disabled, focus won't be triggered anyway
					that.buttonElement.addClass( focusClass );
				})
				.bind( "blur" + this.eventNamespace, function() {
					that.buttonElement.removeClass( focusClass );
				});

			if ( toggleButton ) {
				this.element.bind( "change" + this.eventNamespace, function() {
					if ( clickDragged ) {
						return;
					}
					that.refresh();
				});
				// if mouse moves between mousedown and mouseup (drag) set clickDragged flag
				// prevents issue where button state changes but checkbox/radio checked state
				// does not in Firefox (see ticket #6970)
				this.buttonElement
					.bind( "mousedown" + this.eventNamespace, function( event ) {
						if ( options.disabled ) {
							return;
						}
						clickDragged = false;
						startXPos = event.pageX;
						startYPos = event.pageY;
					})
					.bind( "mouseup" + this.eventNamespace, function( event ) {
						if ( options.disabled ) {
							return;
						}
						if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
							clickDragged = true;
						}
				});
			}

			if ( this.type === "checkbox" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled || clickDragged ) {
						return false;
					}
				});
			} else if ( this.type === "radio" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled || clickDragged ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					that.buttonElement.attr( "aria-pressed", "true" );

					var radio = that.element[ 0 ];
					radioGroup( radio )
						.not( radio )
						.map(function() {
							return $( this ).button( "widget" )[ 0 ];
						})
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				});
			} else {
				this.buttonElement
					.bind( "mousedown" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).addClass( "ui-state-active" );
						lastActive = this;
						that.document.one( "mouseup", function() {
							lastActive = null;
						});
					})
					.bind( "mouseup" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).removeClass( "ui-state-active" );
					})
					.bind( "keydown" + this.eventNamespace, function(event) {
						if ( options.disabled ) {
							return false;
						}
						if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
							$( this ).addClass( "ui-state-active" );
						}
					})
					// see #8559, we bind to blur here in case the button element loses
					// focus between keydown and keyup, it would be left in an "active" state
					.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
						$( this ).removeClass( "ui-state-active" );
					});

				if ( this.buttonElement.is("a") ) {
					this.buttonElement.keyup(function(event) {
						if ( event.keyCode === $.ui.keyCode.SPACE ) {
							// TODO pass through original event correctly (just as 2nd argument doesn't work)
							$( this ).click();
						}
					});
				}
			}

			// TODO: pull out $.Widget's handling for the disabled option into
			// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
			// be overridden by individual plugins
			this._setOption( "disabled", options.disabled );
			this._resetButton();
		},

		_determineButtonType: function() {
			var ancestor, labelSelector, checked;

			if ( this.element.is("[type=checkbox]") ) {
				this.type = "checkbox";
			} else if ( this.element.is("[type=radio]") ) {
				this.type = "radio";
			} else if ( this.element.is("input") ) {
				this.type = "input";
			} else {
				this.type = "button";
			}

			if ( this.type === "checkbox" || this.type === "radio" ) {
				// we don't search against the document in case the element
				// is disconnected from the DOM
				ancestor = this.element.parents().last();
				labelSelector = "label[for='" + this.element.attr("id") + "']";
				this.buttonElement = ancestor.find( labelSelector );
				if ( !this.buttonElement.length ) {
					ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
					this.buttonElement = ancestor.filter( labelSelector );
					if ( !this.buttonElement.length ) {
						this.buttonElement = ancestor.find( labelSelector );
					}
				}
				this.element.addClass( "ui-helper-hidden-accessible" );

				checked = this.element.is( ":checked" );
				if ( checked ) {
					this.buttonElement.addClass( "ui-state-active" );
				}
				this.buttonElement.prop( "aria-pressed", checked );
			} else {
				this.buttonElement = this.element;
			}
		},

		widget: function() {
			return this.buttonElement;
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-helper-hidden-accessible" );
			this.buttonElement
				.removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
				.removeAttr( "role" )
				.removeAttr( "aria-pressed" )
				.html( this.buttonElement.find(".ui-button-text").html() );

			if ( !this.hasTitle ) {
				this.buttonElement.removeAttr( "title" );
			}
		},

		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "disabled" ) {
				if ( value ) {
					this.element.prop( "disabled", true );
				} else {
					this.element.prop( "disabled", false );
				}
				return;
			}
			this._resetButton();
		},

		refresh: function() {
			//See #8237 & #8828
			var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

			if ( isDisabled !== this.options.disabled ) {
				this._setOption( "disabled", isDisabled );
			}
			if ( this.type === "radio" ) {
				radioGroup( this.element[0] ).each(function() {
					if ( $( this ).is( ":checked" ) ) {
						$( this ).button( "widget" )
							.addClass( "ui-state-active" )
							.attr( "aria-pressed", "true" );
					} else {
						$( this ).button( "widget" )
							.removeClass( "ui-state-active" )
							.attr( "aria-pressed", "false" );
					}
				});
			} else if ( this.type === "checkbox" ) {
				if ( this.element.is( ":checked" ) ) {
					this.buttonElement
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					this.buttonElement
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			}
		},

		_resetButton: function() {
			if ( this.type === "input" ) {
				if ( this.options.label ) {
					this.element.val( this.options.label );
				}
				return;
			}
			var buttonElement = this.buttonElement.removeClass( typeClasses ),
				buttonText = $( "<span></span>", this.document[0] )
					.addClass( "ui-button-text" )
					.html( this.options.label )
					.appendTo( buttonElement.empty() )
					.text(),
				icons = this.options.icons,
				multipleIcons = icons.primary && icons.secondary,
				buttonClasses = [];

			if ( icons.primary || icons.secondary ) {
				if ( this.options.text ) {
					buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
				}

				if ( icons.primary ) {
					buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
				}

				if ( icons.secondary ) {
					buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
				}

				if ( !this.options.text ) {
					buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

					if ( !this.hasTitle ) {
						buttonElement.attr( "title", $.trim( buttonText ) );
					}
				}
			} else {
				buttonClasses.push( "ui-button-text-only" );
			}
			buttonElement.addClass( buttonClasses.join( " " ) );
		}
	});

	$.widget( "ui.buttonset", {
		version: "1.10.3",
		options: {
			items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
		},

		_create: function() {
			this.element.addClass( "ui-buttonset" );
		},

		_init: function() {
			this.refresh();
		},

		_setOption: function( key, value ) {
			if ( key === "disabled" ) {
				this.buttons.button( "option", key, value );
			}

			this._super( key, value );
		},

		refresh: function() {
			var rtl = this.element.css( "direction" ) === "rtl";

			this.buttons = this.element.find( this.options.items )
				.filter( ":ui-button" )
					.button( "refresh" )
				.end()
				.not( ":ui-button" )
					.button()
				.end()
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
					.filter( ":first" )
						.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
					.end()
					.filter( ":last" )
						.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
					.end()
				.end();
		},

		_destroy: function() {
			this.element.removeClass( "ui-buttonset" );
			this.buttons
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-left ui-corner-right" )
				.end()
				.button( "destroy" );
		}
	});

	}( jQuery ) );

	(function( $, undefined ) {

	$.extend($.ui, { datepicker: { version: "1.10.3" } });

	var PROP_NAME = "datepicker",
		instActive;

	/* Date picker manager.
	   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
	   Settings for (groups of) date pickers are maintained in an instance object,
	   allowing multiple different settings on the same page. */

	function Datepicker() {
		this._curInst = null; // The current instance in use
		this._keyEvent = false; // If the last event was a key event
		this._disabledInputs = []; // List of date picker inputs that have been disabled
		this._datepickerShowing = false; // True if the popup picker is showing , false if not
		this._inDialog = false; // True if showing within a "dialog", false if not
		this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
		this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
		this._appendClass = "ui-datepicker-append"; // The name of the append marker class
		this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
		this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
		this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
		this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
		this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
		this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[""] = { // Default regional settings
			closeText: "Done", // Display text for close link
			prevText: "Prev", // Display text for previous month link
			nextText: "Next", // Display text for next month link
			currentText: "Today", // Display text for current month link
			monthNames: ["January","February","March","April","May","June",
				"July","August","September","October","November","December"], // Names of months for drop-down and formatting
			monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
			dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
			dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
			dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
			weekHeader: "Wk", // Column header for week of the year
			dateFormat: "mm/dd/yy", // See format options on parseDate
			firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false, // True if right-to-left language, false if left-to-right
			showMonthAfterYear: false, // True if the year select precedes month, false for month then year
			yearSuffix: "" // Additional text to append to the year in the month headers
		};
		this._defaults = { // Global defaults for all the date picker instances
			showOn: "focus", // "focus" for popup on focus,
				// "button" for trigger button, or "both" for either
			showAnim: "fadeIn", // Name of jQuery animation for popup
			showOptions: {}, // Options for enhanced animations
			defaultDate: null, // Used when field is blank: actual date,
				// +/-number for offset from today, null for today
			appendText: "", // Display text following the input box, e.g. showing the format
			buttonText: "...", // Text for trigger button
			buttonImage: "", // URL for trigger button image
			buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
			hideIfNoPrevNext: false, // True to hide next/previous month links
				// if not applicable, false to just disable them
			navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
			gotoCurrent: false, // True if today link goes back to current selection instead
			changeMonth: false, // True if month can be selected directly, false if only prev/next
			changeYear: false, // True if year can be selected directly, false if only prev/next
			yearRange: "c-10:c+10", // Range of years to display in drop-down,
				// either relative to today's year (-nn:+nn), relative to currently displayed year
				// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
			showOtherMonths: false, // True to show dates in other months, false to leave blank
			selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
			showWeek: false, // True to show week of the year, false to not show it
			calculateWeek: this.iso8601Week, // How to calculate the week of the year,
				// takes a Date and returns the number of the week for it
			shortYearCutoff: "+10", // Short year values < this are in the current century,
				// > this are in the previous century,
				// string value starting with "+" for current year + value
			minDate: null, // The earliest selectable date, or null for no limit
			maxDate: null, // The latest selectable date, or null for no limit
			duration: "fast", // Duration of display/closure
			beforeShowDay: null, // Function that takes a date and returns an array with
				// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
				// [2] = cell title (optional), e.g. $.datepicker.noWeekends
			beforeShow: null, // Function that takes an input field and
				// returns a set of custom settings for the date picker
			onSelect: null, // Define a callback function when a date is selected
			onChangeMonthYear: null, // Define a callback function when the month or year is changed
			onClose: null, // Define a callback function when the datepicker is closed
			numberOfMonths: 1, // Number of months to show at a time
			showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
			stepMonths: 1, // Number of months to step back/forward
			stepBigMonths: 12, // Number of months to step back/forward for the big links
			altField: "", // Selector for an alternate field to store selected dates into
			altFormat: "", // The date format to use for the alternate field
			constrainInput: true, // The input is constrained by the current date format
			showButtonPanel: false, // True to show button panel, false to not show it
			autoSize: false, // True to size the input for the date format, false to leave as is
			disabled: false // The initial disabled state
		};
		$.extend(this._defaults, this.regional[""]);
		this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
	}

	$.extend(Datepicker.prototype, {
		/* Class name added to elements to indicate already configured with a date picker. */
		markerClassName: "hasDatepicker",

		//Keep track of the maximum number of rows displayed (see #7043)
		maxRows: 4,

		// TODO rename to "widget" when switching to widget factory
		_widgetDatepicker: function() {
			return this.dpDiv;
		},

		/* Override the default settings for all instances of the date picker.
		 * @param  settings  object - the new settings to use as defaults (anonymous object)
		 * @return the manager object
		 */
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/* Attach the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
		 */
		_attachDatepicker: function(target, settings) {
			var nodeName, inline, inst;
			nodeName = target.nodeName.toLowerCase();
			inline = (nodeName === "div" || nodeName === "span");
			if (!target.id) {
				this.uuid += 1;
				target.id = "dp" + this.uuid;
			}
			inst = this._newInst($(target), inline);
			inst.settings = $.extend({}, settings || {});
			if (nodeName === "input") {
				this._connectDatepicker(target, inst);
			} else if (inline) {
				this._inlineDatepicker(target, inst);
			}
		},

		/* Create a new instance object. */
		_newInst: function(target, inline) {
			var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
			return {id: id, input: target, // associated target
				selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
				drawMonth: 0, drawYear: 0, // month being drawn
				inline: inline, // is datepicker inline or not
				dpDiv: (!inline ? this.dpDiv : // presentation div
				bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
		},

		/* Attach the date picker to an input field. */
		_connectDatepicker: function(target, inst) {
			var input = $(target);
			inst.append = $([]);
			inst.trigger = $([]);
			if (input.hasClass(this.markerClassName)) {
				return;
			}
			this._attachments(input, inst);
			input.addClass(this.markerClassName).keydown(this._doKeyDown).
				keypress(this._doKeyPress).keyup(this._doKeyUp);
			this._autoSize(inst);
			$.data(target, PROP_NAME, inst);
			//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
		},

		/* Make attachments based on settings. */
		_attachments: function(input, inst) {
			var showOn, buttonText, buttonImage,
				appendText = this._get(inst, "appendText"),
				isRTL = this._get(inst, "isRTL");

			if (inst.append) {
				inst.append.remove();
			}
			if (appendText) {
				inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
				input[isRTL ? "before" : "after"](inst.append);
			}

			input.unbind("focus", this._showDatepicker);

			if (inst.trigger) {
				inst.trigger.remove();
			}

			showOn = this._get(inst, "showOn");
			if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
				input.focus(this._showDatepicker);
			}
			if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
				buttonText = this._get(inst, "buttonText");
				buttonImage = this._get(inst, "buttonImage");
				inst.trigger = $(this._get(inst, "buttonImageOnly") ?
					$("<img/>").addClass(this._triggerClass).
						attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
					$("<button type='button'></button>").addClass(this._triggerClass).
						html(!buttonImage ? buttonText : $("<img/>").attr(
						{ src:buttonImage, alt:buttonText, title:buttonText })));
				input[isRTL ? "before" : "after"](inst.trigger);
				inst.trigger.click(function() {
					if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
						$.datepicker._hideDatepicker();
					} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
						$.datepicker._hideDatepicker();
						$.datepicker._showDatepicker(input[0]);
					} else {
						$.datepicker._showDatepicker(input[0]);
					}
					return false;
				});
			}
		},

		/* Apply the maximum length for the date format. */
		_autoSize: function(inst) {
			if (this._get(inst, "autoSize") && !inst.inline) {
				var findMax, max, maxI, i,
					date = new Date(2009, 12 - 1, 20), // Ensure double digits
					dateFormat = this._get(inst, "dateFormat");

				if (dateFormat.match(/[DM]/)) {
					findMax = function(names) {
						max = 0;
						maxI = 0;
						for (i = 0; i < names.length; i++) {
							if (names[i].length > max) {
								max = names[i].length;
								maxI = i;
							}
						}
						return maxI;
					};
					date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
						"monthNames" : "monthNamesShort"))));
					date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
						"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
				}
				inst.input.attr("size", this._formatDate(inst, date).length);
			}
		},

		/* Attach an inline date picker to a div. */
		_inlineDatepicker: function(target, inst) {
			var divSpan = $(target);
			if (divSpan.hasClass(this.markerClassName)) {
				return;
			}
			divSpan.addClass(this.markerClassName).append(inst.dpDiv);
			$.data(target, PROP_NAME, inst);
			this._setDate(inst, this._getDefaultDate(inst), true);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
			//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
			// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
			// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
			inst.dpDiv.css( "display", "block" );
		},

		/* Pop-up the date picker in a "dialog" box.
		 * @param  input element - ignored
		 * @param  date	string or Date - the initial date to display
		 * @param  onSelect  function - the function to call when a date is selected
		 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
		 * @param  pos int[2] - coordinates for the dialog's position within the screen or
		 *					event - with x/y coordinates or
		 *					leave empty for default (screen centre)
		 * @return the manager object
		 */
		_dialogDatepicker: function(input, date, onSelect, settings, pos) {
			var id, browserWidth, browserHeight, scrollX, scrollY,
				inst = this._dialogInst; // internal instance

			if (!inst) {
				this.uuid += 1;
				id = "dp" + this.uuid;
				this._dialogInput = $("<input type='text' id='" + id +
					"' style='position: absolute; top: -100px; width: 0px;'/>");
				this._dialogInput.keydown(this._doKeyDown);
				$("body").append(this._dialogInput);
				inst = this._dialogInst = this._newInst(this._dialogInput, false);
				inst.settings = {};
				$.data(this._dialogInput[0], PROP_NAME, inst);
			}
			extendRemove(inst.settings, settings || {});
			date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
			this._dialogInput.val(date);

			this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
			if (!this._pos) {
				browserWidth = document.documentElement.clientWidth;
				browserHeight = document.documentElement.clientHeight;
				scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
				scrollY = document.documentElement.scrollTop || document.body.scrollTop;
				this._pos = // should use actual width/height below
					[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
			}

			// move input on screen for focus, but hidden behind dialog
			this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
			inst.settings.onSelect = onSelect;
			this._inDialog = true;
			this.dpDiv.addClass(this._dialogClass);
			this._showDatepicker(this._dialogInput[0]);
			if ($.blockUI) {
				$.blockUI(this.dpDiv);
			}
			$.data(this._dialogInput[0], PROP_NAME, inst);
			return this;
		},

		/* Detach a datepicker from its control.
		 * @param  target	element - the target input field or division or span
		 */
		_destroyDatepicker: function(target) {
			var nodeName,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			$.removeData(target, PROP_NAME);
			if (nodeName === "input") {
				inst.append.remove();
				inst.trigger.remove();
				$target.removeClass(this.markerClassName).
					unbind("focus", this._showDatepicker).
					unbind("keydown", this._doKeyDown).
					unbind("keypress", this._doKeyPress).
					unbind("keyup", this._doKeyUp);
			} else if (nodeName === "div" || nodeName === "span") {
				$target.removeClass(this.markerClassName).empty();
			}
		},

		/* Enable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_enableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = false;
				inst.trigger.filter("button").
					each(function() { this.disabled = false; }).end().
					filter("img").css({opacity: "1.0", cursor: ""});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().removeClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", false);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
		},

		/* Disable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_disableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = true;
				inst.trigger.filter("button").
					each(function() { this.disabled = true; }).end().
					filter("img").css({opacity: "0.5", cursor: "default"});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().addClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", true);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
			this._disabledInputs[this._disabledInputs.length] = target;
		},

		/* Is the first field in a jQuery collection disabled as a datepicker?
		 * @param  target	element - the target input field or division or span
		 * @return boolean - true if disabled, false if enabled
		 */
		_isDisabledDatepicker: function(target) {
			if (!target) {
				return false;
			}
			for (var i = 0; i < this._disabledInputs.length; i++) {
				if (this._disabledInputs[i] === target) {
					return true;
				}
			}
			return false;
		},

		/* Retrieve the instance data for the target control.
		 * @param  target  element - the target input field or division or span
		 * @return  object - the associated instance data
		 * @throws  error if a jQuery problem getting data
		 */
		_getInst: function(target) {
			try {
				return $.data(target, PROP_NAME);
			}
			catch (err) {
				throw "Missing instance data for this datepicker";
			}
		},

		/* Update or retrieve the settings for a date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 * @param  name	object - the new settings to update or
		 *				string - the name of the setting to change or retrieve,
		 *				when retrieving also "all" for all instance settings or
		 *				"defaults" for all global defaults
		 * @param  value   any - the new value for the setting
		 *				(omit if above is an object or to retrieve a value)
		 */
		_optionDatepicker: function(target, name, value) {
			var settings, date, minDate, maxDate,
				inst = this._getInst(target);

			if (arguments.length === 2 && typeof name === "string") {
				return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
					(inst ? (name === "all" ? $.extend({}, inst.settings) :
					this._get(inst, name)) : null));
			}

			settings = name || {};
			if (typeof name === "string") {
				settings = {};
				settings[name] = value;
			}

			if (inst) {
				if (this._curInst === inst) {
					this._hideDatepicker();
				}

				date = this._getDateDatepicker(target, true);
				minDate = this._getMinMaxDate(inst, "min");
				maxDate = this._getMinMaxDate(inst, "max");
				extendRemove(inst.settings, settings);
				// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
				if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
					inst.settings.minDate = this._formatDate(inst, minDate);
				}
				if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
					inst.settings.maxDate = this._formatDate(inst, maxDate);
				}
				if ( "disabled" in settings ) {
					if ( settings.disabled ) {
						this._disableDatepicker(target);
					} else {
						this._enableDatepicker(target);
					}
				}
				this._attachments($(target), inst);
				this._autoSize(inst);
				this._setDate(inst, date);
				this._updateAlternate(inst);
				this._updateDatepicker(inst);
			}
		},

		// change method deprecated
		_changeDatepicker: function(target, name, value) {
			this._optionDatepicker(target, name, value);
		},

		/* Redraw the date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 */
		_refreshDatepicker: function(target) {
			var inst = this._getInst(target);
			if (inst) {
				this._updateDatepicker(inst);
			}
		},

		/* Set the dates for a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  date	Date - the new date
		 */
		_setDateDatepicker: function(target, date) {
			var inst = this._getInst(target);
			if (inst) {
				this._setDate(inst, date);
				this._updateDatepicker(inst);
				this._updateAlternate(inst);
			}
		},

		/* Get the date(s) for the first entry in a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  noDefault boolean - true if no default date is to be used
		 * @return Date - the current date
		 */
		_getDateDatepicker: function(target, noDefault) {
			var inst = this._getInst(target);
			if (inst && !inst.inline) {
				this._setDateFromField(inst, noDefault);
			}
			return (inst ? this._getDate(inst) : null);
		},

		/* Handle keystrokes. */
		_doKeyDown: function(event) {
			var onSelect, dateStr, sel,
				inst = $.datepicker._getInst(event.target),
				handled = true,
				isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

			inst._keyEvent = true;
			if ($.datepicker._datepickerShowing) {
				switch (event.keyCode) {
					case 9: $.datepicker._hideDatepicker();
							handled = false;
							break; // hide on tab out
					case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
										$.datepicker._currentClass + ")", inst.dpDiv);
							if (sel[0]) {
								$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							}

							onSelect = $.datepicker._get(inst, "onSelect");
							if (onSelect) {
								dateStr = $.datepicker._formatDate(inst);

								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							} else {
								$.datepicker._hideDatepicker();
							}

							return false; // don't submit the form
					case 27: $.datepicker._hideDatepicker();
							break; // hide on escape
					case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
							break; // previous month/year on page up/+ ctrl
					case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
							break; // next month/year on page down/+ ctrl
					case 35: if (event.ctrlKey || event.metaKey) {
								$.datepicker._clearDate(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // clear on ctrl or command +end
					case 36: if (event.ctrlKey || event.metaKey) {
								$.datepicker._gotoToday(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // current on ctrl or command +home
					case 37: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// -1 day on ctrl or command +left
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, "stepBigMonths") :
									-$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +left on Mac
							break;
					case 38: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, -7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // -1 week on ctrl or command +up
					case 39: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// +1 day on ctrl or command +right
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, "stepBigMonths") :
									+$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +right
							break;
					case 40: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, +7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // +1 week on ctrl or command +down
					default: handled = false;
				}
			} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
				$.datepicker._showDatepicker(this);
			} else {
				handled = false;
			}

			if (handled) {
				event.preventDefault();
				event.stopPropagation();
			}
		},

		/* Filter entered characters - based on date format. */
		_doKeyPress: function(event) {
			var chars, chr,
				inst = $.datepicker._getInst(event.target);

			if ($.datepicker._get(inst, "constrainInput")) {
				chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
				chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
				return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
			}
		},

		/* Synchronise manual entry and field/alternate field. */
		_doKeyUp: function(event) {
			var date,
				inst = $.datepicker._getInst(event.target);

			if (inst.input.val() !== inst.lastVal) {
				try {
					date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						(inst.input ? inst.input.val() : null),
						$.datepicker._getFormatConfig(inst));

					if (date) { // only if valid
						$.datepicker._setDateFromField(inst);
						$.datepicker._updateAlternate(inst);
						$.datepicker._updateDatepicker(inst);
					}
				}
				catch (err) {
				}
			}
			return true;
		},

		/* Pop-up the date picker for a given input field.
		 * If false returned from beforeShow event handler do not show.
		 * @param  input  element - the input field attached to the date picker or
		 *					event - if triggered by focus
		 */
		_showDatepicker: function(input) {
			input = input.target || input;
			if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
				input = $("input", input.parentNode)[0];
			}

			if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
				return;
			}

			var inst, beforeShow, beforeShowSettings, isFixed,
				offset, showAnim, duration;

			inst = $.datepicker._getInst(input);
			if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
				$.datepicker._curInst.dpDiv.stop(true, true);
				if ( inst && $.datepicker._datepickerShowing ) {
					$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
				}
			}

			beforeShow = $.datepicker._get(inst, "beforeShow");
			beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
			if(beforeShowSettings === false){
				return;
			}
			extendRemove(inst.settings, beforeShowSettings);

			inst.lastVal = null;
			$.datepicker._lastInput = input;
			$.datepicker._setDateFromField(inst);

			if ($.datepicker._inDialog) { // hide cursor
				input.value = "";
			}
			if (!$.datepicker._pos) { // position below input
				$.datepicker._pos = $.datepicker._findPos(input);
				$.datepicker._pos[1] += input.offsetHeight; // add the height
			}

			isFixed = false;
			$(input).parents().each(function() {
				isFixed |= $(this).css("position") === "fixed";
				return !isFixed;
			});

			offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
			$.datepicker._pos = null;
			//to avoid flashes on Firefox
			inst.dpDiv.empty();
			// determine sizing offscreen
			inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
			$.datepicker._updateDatepicker(inst);
			// fix width for dynamic number of date pickers
			// and adjust position before showing
			offset = $.datepicker._checkOffset(inst, offset, isFixed);
			inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
				"static" : (isFixed ? "fixed" : "absolute")), display: "none",
				left: offset.left + "px", top: offset.top + "px"});

			if (!inst.inline) {
				showAnim = $.datepicker._get(inst, "showAnim");
				duration = $.datepicker._get(inst, "duration");
				inst.dpDiv.zIndex($(input).zIndex()+1);
				$.datepicker._datepickerShowing = true;

				if ( $.effects && $.effects.effect[ showAnim ] ) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
				} else {
					inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}

				if ( $.datepicker._shouldFocusInput( inst ) ) {
					inst.input.focus();
				}

				$.datepicker._curInst = inst;
			}
		},

		/* Generate the date picker content. */
		_updateDatepicker: function(inst) {
			this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
			instActive = inst; // for delegate hover events
			inst.dpDiv.empty().append(this._generateHTML(inst));
			this._attachHandlers(inst);
			inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

			var origyearshtml,
				numMonths = this._getNumberOfMonths(inst),
				cols = numMonths[1],
				width = 17;

			inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
			if (cols > 1) {
				inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
			}
			inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
				"Class"]("ui-datepicker-multi");
			inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
				"Class"]("ui-datepicker-rtl");

			if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			// deffered render of the years select (to avoid flashes on Firefox)
			if( inst.yearshtml ){
				origyearshtml = inst.yearshtml;
				setTimeout(function(){
					//assure that inst.yearshtml didn't change.
					if( origyearshtml === inst.yearshtml && inst.yearshtml ){
						inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
					}
					origyearshtml = inst.yearshtml = null;
				}, 0);
			}
		},

		// #6694 - don't focus the input if it's already focused
		// this breaks the change event in IE
		// Support: IE and jQuery <1.9
		_shouldFocusInput: function( inst ) {
			return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
		},

		/* Check positioning to remain on screen. */
		_checkOffset: function(inst, offset, isFixed) {
			var dpWidth = inst.dpDiv.outerWidth(),
				dpHeight = inst.dpDiv.outerHeight(),
				inputWidth = inst.input ? inst.input.outerWidth() : 0,
				inputHeight = inst.input ? inst.input.outerHeight() : 0,
				viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
				viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

			offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
			offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
			offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

			// now check if datepicker is showing outside window viewport - move to a better place if so.
			offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
				Math.abs(offset.left + dpWidth - viewWidth) : 0);
			offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
				Math.abs(dpHeight + inputHeight) : 0);

			return offset;
		},

		/* Find an object's position on the screen. */
		_findPos: function(obj) {
			var position,
				inst = this._getInst(obj),
				isRTL = this._get(inst, "isRTL");

			while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
				obj = obj[isRTL ? "previousSibling" : "nextSibling"];
			}

			position = $(obj).offset();
			return [position.left, position.top];
		},

		/* Hide the date picker from view.
		 * @param  input  element - the input field attached to the date picker
		 */
		_hideDatepicker: function(input) {
			var showAnim, duration, postProcess, onClose,
				inst = this._curInst;

			if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
				return;
			}

			if (this._datepickerShowing) {
				showAnim = this._get(inst, "showAnim");
				duration = this._get(inst, "duration");
				postProcess = function() {
					$.datepicker._tidyDialog(inst);
				};

				// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
				if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
					inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
				} else {
					inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
						(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
				}

				if (!showAnim) {
					postProcess();
				}
				this._datepickerShowing = false;

				onClose = this._get(inst, "onClose");
				if (onClose) {
					onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
				}

				this._lastInput = null;
				if (this._inDialog) {
					this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
					if ($.blockUI) {
						$.unblockUI();
						$("body").append(this.dpDiv);
					}
				}
				this._inDialog = false;
			}
		},

		/* Tidy up after a dialog display. */
		_tidyDialog: function(inst) {
			inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
		},

		/* Close date picker if clicked elsewhere. */
		_checkExternalClick: function(event) {
			if (!$.datepicker._curInst) {
				return;
			}

			var $target = $(event.target),
				inst = $.datepicker._getInst($target[0]);

			if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
					$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
					!$target.hasClass($.datepicker.markerClassName) &&
					!$target.closest("." + $.datepicker._triggerClass).length &&
					$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
				( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
					$.datepicker._hideDatepicker();
			}
		},

		/* Adjust one of the date sub-fields. */
		_adjustDate: function(id, offset, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			if (this._isDisabledDatepicker(target[0])) {
				return;
			}
			this._adjustInstDate(inst, offset +
				(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
				period);
			this._updateDatepicker(inst);
		},

		/* Action for current link. */
		_gotoToday: function(id) {
			var date,
				target = $(id),
				inst = this._getInst(target[0]);

			if (this._get(inst, "gotoCurrent") && inst.currentDay) {
				inst.selectedDay = inst.currentDay;
				inst.drawMonth = inst.selectedMonth = inst.currentMonth;
				inst.drawYear = inst.selectedYear = inst.currentYear;
			} else {
				date = new Date();
				inst.selectedDay = date.getDate();
				inst.drawMonth = inst.selectedMonth = date.getMonth();
				inst.drawYear = inst.selectedYear = date.getFullYear();
			}
			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a new month/year. */
		_selectMonthYear: function(id, select, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			inst["selected" + (period === "M" ? "Month" : "Year")] =
			inst["draw" + (period === "M" ? "Month" : "Year")] =
				parseInt(select.options[select.selectedIndex].value,10);

			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a day. */
		_selectDay: function(id, month, year, td) {
			var inst,
				target = $(id);

			if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
				return;
			}

			inst = this._getInst(target[0]);
			inst.selectedDay = inst.currentDay = $("a", td).html();
			inst.selectedMonth = inst.currentMonth = month;
			inst.selectedYear = inst.currentYear = year;
			this._selectDate(id, this._formatDate(inst,
				inst.currentDay, inst.currentMonth, inst.currentYear));
		},

		/* Erase the input field and hide the date picker. */
		_clearDate: function(id) {
			var target = $(id);
			this._selectDate(target, "");
		},

		/* Update the input field with the selected date. */
		_selectDate: function(id, dateStr) {
			var onSelect,
				target = $(id),
				inst = this._getInst(target[0]);

			dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
			if (inst.input) {
				inst.input.val(dateStr);
			}
			this._updateAlternate(inst);

			onSelect = this._get(inst, "onSelect");
			if (onSelect) {
				onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
			} else if (inst.input) {
				inst.input.trigger("change"); // fire the change event
			}

			if (inst.inline){
				this._updateDatepicker(inst);
			} else {
				this._hideDatepicker();
				this._lastInput = inst.input[0];
				if (typeof(inst.input[0]) !== "object") {
					inst.input.focus(); // restore focus
				}
				this._lastInput = null;
			}
		},

		/* Update any alternate field to synchronise with the main field. */
		_updateAlternate: function(inst) {
			var altFormat, date, dateStr,
				altField = this._get(inst, "altField");

			if (altField) { // update alternate field too
				altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
				date = this._getDate(inst);
				dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
				$(altField).each(function() { $(this).val(dateStr); });
			}
		},

		/* Set as beforeShowDay function to prevent selection of weekends.
		 * @param  date  Date - the date to customise
		 * @return [boolean, string] - is this date selectable?, what is its CSS class?
		 */
		noWeekends: function(date) {
			var day = date.getDay();
			return [(day > 0 && day < 6), ""];
		},

		/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
		 * @param  date  Date - the date to get the week for
		 * @return  number - the number of the week within the year that contains this date
		 */
		iso8601Week: function(date) {
			var time,
				checkDate = new Date(date.getTime());

			// Find Thursday of this week starting on Monday
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

			time = checkDate.getTime();
			checkDate.setMonth(0); // Compare with Jan 1
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
		},

		/* Parse a string value into a date object.
		 * See formatDate below for the possible formats.
		 *
		 * @param  format string - the expected format of the date
		 * @param  value string - the date in the above format
		 * @param  settings Object - attributes include:
		 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  Date - the extracted date value or null if value is blank
		 */
		parseDate: function (format, value, settings) {
			if (format == null || value == null) {
				throw "Invalid arguments";
			}

			value = (typeof value === "object" ? value.toString() : value + "");
			if (value === "") {
				return null;
			}

			var iFormat, dim, extra,
				iValue = 0,
				shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
				shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
					new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				year = -1,
				month = -1,
				day = -1,
				doy = -1,
				literal = false,
				date,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Extract a number from the string value
				getNumber = function(match) {
					var isDoubled = lookAhead(match),
						size = (match === "@" ? 14 : (match === "!" ? 20 :
						(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
						digits = new RegExp("^\\d{1," + size + "}"),
						num = value.substring(iValue).match(digits);
					if (!num) {
						throw "Missing number at position " + iValue;
					}
					iValue += num[0].length;
					return parseInt(num[0], 10);
				},
				// Extract a name from the string value and convert to an index
				getName = function(match, shortNames, longNames) {
					var index = -1,
						names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
							return [ [k, v] ];
						}).sort(function (a, b) {
							return -(a[1].length - b[1].length);
						});

					$.each(names, function (i, pair) {
						var name = pair[1];
						if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
							index = pair[0];
							iValue += name.length;
							return false;
						}
					});
					if (index !== -1) {
						return index + 1;
					} else {
						throw "Unknown name at position " + iValue;
					}
				},
				// Confirm that a literal character matches the string value
				checkLiteral = function() {
					if (value.charAt(iValue) !== format.charAt(iFormat)) {
						throw "Unexpected literal at position " + iValue;
					}
					iValue++;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						checkLiteral();
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							day = getNumber("d");
							break;
						case "D":
							getName("D", dayNamesShort, dayNames);
							break;
						case "o":
							doy = getNumber("o");
							break;
						case "m":
							month = getNumber("m");
							break;
						case "M":
							month = getName("M", monthNamesShort, monthNames);
							break;
						case "y":
							year = getNumber("y");
							break;
						case "@":
							date = new Date(getNumber("@"));
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "!":
							date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "'":
							if (lookAhead("'")){
								checkLiteral();
							} else {
								literal = true;
							}
							break;
						default:
							checkLiteral();
					}
				}
			}

			if (iValue < value.length){
				extra = value.substr(iValue);
				if (!/^\s+/.test(extra)) {
					throw "Extra/unparsed characters found in date: " + extra;
				}
			}

			if (year === -1) {
				year = new Date().getFullYear();
			} else if (year < 100) {
				year += new Date().getFullYear() - new Date().getFullYear() % 100 +
					(year <= shortYearCutoff ? 0 : -100);
			}

			if (doy > -1) {
				month = 1;
				day = doy;
				do {
					dim = this._getDaysInMonth(year, month - 1);
					if (day <= dim) {
						break;
					}
					month++;
					day -= dim;
				} while (true);
			}

			date = this._daylightSavingAdjust(new Date(year, month - 1, day));
			if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
				throw "Invalid date"; // E.g. 31/02/00
			}
			return date;
		},

		/* Standard date formats. */
		ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
		COOKIE: "D, dd M yy",
		ISO_8601: "yy-mm-dd",
		RFC_822: "D, d M y",
		RFC_850: "DD, dd-M-y",
		RFC_1036: "D, d M y",
		RFC_1123: "D, d M yy",
		RFC_2822: "D, d M yy",
		RSS: "D, d M y", // RFC 822
		TICKS: "!",
		TIMESTAMP: "@",
		W3C: "yy-mm-dd", // ISO 8601

		_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
			Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

		/* Format a date object into a string value.
		 * The format can be combinations of the following:
		 * d  - day of month (no leading zero)
		 * dd - day of month (two digit)
		 * o  - day of year (no leading zeros)
		 * oo - day of year (three digit)
		 * D  - day name short
		 * DD - day name long
		 * m  - month of year (no leading zero)
		 * mm - month of year (two digit)
		 * M  - month name short
		 * MM - month name long
		 * y  - year (two digit)
		 * yy - year (four digit)
		 * @ - Unix timestamp (ms since 01/01/1970)
		 * ! - Windows ticks (100ns since 01/01/0001)
		 * "..." - literal text
		 * '' - single quote
		 *
		 * @param  format string - the desired format of the date
		 * @param  date Date - the date value to format
		 * @param  settings Object - attributes include:
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  string - the date in the above format
		 */
		formatDate: function (format, date, settings) {
			if (!date) {
				return "";
			}

			var iFormat,
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Format a number, with leading zero if necessary
				formatNumber = function(match, value, len) {
					var num = "" + value;
					if (lookAhead(match)) {
						while (num.length < len) {
							num = "0" + num;
						}
					}
					return num;
				},
				// Format a name, short or long as requested
				formatName = function(match, value, shortNames, longNames) {
					return (lookAhead(match) ? longNames[value] : shortNames[value]);
				},
				output = "",
				literal = false;

			if (date) {
				for (iFormat = 0; iFormat < format.length; iFormat++) {
					if (literal) {
						if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
							literal = false;
						} else {
							output += format.charAt(iFormat);
						}
					} else {
						switch (format.charAt(iFormat)) {
							case "d":
								output += formatNumber("d", date.getDate(), 2);
								break;
							case "D":
								output += formatName("D", date.getDay(), dayNamesShort, dayNames);
								break;
							case "o":
								output += formatNumber("o",
									Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
								break;
							case "m":
								output += formatNumber("m", date.getMonth() + 1, 2);
								break;
							case "M":
								output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
								break;
							case "y":
								output += (lookAhead("y") ? date.getFullYear() :
									(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
								break;
							case "@":
								output += date.getTime();
								break;
							case "!":
								output += date.getTime() * 10000 + this._ticksTo1970;
								break;
							case "'":
								if (lookAhead("'")) {
									output += "'";
								} else {
									literal = true;
								}
								break;
							default:
								output += format.charAt(iFormat);
						}
					}
				}
			}
			return output;
		},

		/* Extract all possible characters from the date format. */
		_possibleChars: function (format) {
			var iFormat,
				chars = "",
				literal = false,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						chars += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d": case "m": case "y": case "@":
							chars += "0123456789";
							break;
						case "D": case "M":
							return null; // Accept anything
						case "'":
							if (lookAhead("'")) {
								chars += "'";
							} else {
								literal = true;
							}
							break;
						default:
							chars += format.charAt(iFormat);
					}
				}
			}
			return chars;
		},

		/* Get a setting value, defaulting if necessary. */
		_get: function(inst, name) {
			return inst.settings[name] !== undefined ?
				inst.settings[name] : this._defaults[name];
		},

		/* Parse existing date and initialise date picker. */
		_setDateFromField: function(inst, noDefault) {
			if (inst.input.val() === inst.lastVal) {
				return;
			}

			var dateFormat = this._get(inst, "dateFormat"),
				dates = inst.lastVal = inst.input ? inst.input.val() : null,
				defaultDate = this._getDefaultDate(inst),
				date = defaultDate,
				settings = this._getFormatConfig(inst);

			try {
				date = this.parseDate(dateFormat, dates, settings) || defaultDate;
			} catch (event) {
				dates = (noDefault ? "" : dates);
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentDay = (dates ? date.getDate() : 0);
			inst.currentMonth = (dates ? date.getMonth() : 0);
			inst.currentYear = (dates ? date.getFullYear() : 0);
			this._adjustInstDate(inst);
		},

		/* Retrieve the default date shown on opening. */
		_getDefaultDate: function(inst) {
			return this._restrictMinMax(inst,
				this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
		},

		/* A date may be specified as an exact value or a relative one. */
		_determineDate: function(inst, date, defaultDate) {
			var offsetNumeric = function(offset) {
					var date = new Date();
					date.setDate(date.getDate() + offset);
					return date;
				},
				offsetString = function(offset) {
					try {
						return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
							offset, $.datepicker._getFormatConfig(inst));
					}
					catch (e) {
						// Ignore
					}

					var date = (offset.toLowerCase().match(/^c/) ?
						$.datepicker._getDate(inst) : null) || new Date(),
						year = date.getFullYear(),
						month = date.getMonth(),
						day = date.getDate(),
						pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
						matches = pattern.exec(offset);

					while (matches) {
						switch (matches[2] || "d") {
							case "d" : case "D" :
								day += parseInt(matches[1],10); break;
							case "w" : case "W" :
								day += parseInt(matches[1],10) * 7; break;
							case "m" : case "M" :
								month += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
							case "y": case "Y" :
								year += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
						}
						matches = pattern.exec(offset);
					}
					return new Date(year, month, day);
				},
				newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
					(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

			newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
			if (newDate) {
				newDate.setHours(0);
				newDate.setMinutes(0);
				newDate.setSeconds(0);
				newDate.setMilliseconds(0);
			}
			return this._daylightSavingAdjust(newDate);
		},

		/* Handle switch to/from daylight saving.
		 * Hours may be non-zero on daylight saving cut-over:
		 * > 12 when midnight changeover, but then cannot generate
		 * midnight datetime, so jump to 1AM, otherwise reset.
		 * @param  date  (Date) the date to check
		 * @return  (Date) the corrected date
		 */
		_daylightSavingAdjust: function(date) {
			if (!date) {
				return null;
			}
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
			return date;
		},

		/* Set the date(s) directly. */
		_setDate: function(inst, date, noChange) {
			var clear = !date,
				origMonth = inst.selectedMonth,
				origYear = inst.selectedYear,
				newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

			inst.selectedDay = inst.currentDay = newDate.getDate();
			inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
			inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
			if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
				this._notifyChange(inst);
			}
			this._adjustInstDate(inst);
			if (inst.input) {
				inst.input.val(clear ? "" : this._formatDate(inst));
			}
		},

		/* Retrieve the date(s) directly. */
		_getDate: function(inst) {
			var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
				this._daylightSavingAdjust(new Date(
				inst.currentYear, inst.currentMonth, inst.currentDay)));
				return startDate;
		},

		/* Attach the onxxx handlers.  These are declared statically so
		 * they work with static code transformers like Caja.
		 */
		_attachHandlers: function(inst) {
			var stepMonths = this._get(inst, "stepMonths"),
				id = "#" + inst.id.replace( /\\\\/g, "\\" );
			inst.dpDiv.find("[data-handler]").map(function () {
				var handler = {
					prev: function () {
						$.datepicker._adjustDate(id, -stepMonths, "M");
					},
					next: function () {
						$.datepicker._adjustDate(id, +stepMonths, "M");
					},
					hide: function () {
						$.datepicker._hideDatepicker();
					},
					today: function () {
						$.datepicker._gotoToday(id);
					},
					selectDay: function () {
						$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
						return false;
					},
					selectMonth: function () {
						$.datepicker._selectMonthYear(id, this, "M");
						return false;
					},
					selectYear: function () {
						$.datepicker._selectMonthYear(id, this, "Y");
						return false;
					}
				};
				$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			});
		},

		/* Generate the HTML for the current state of the date picker. */
		_generateHTML: function(inst) {
			var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
				controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
				monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
				selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
				cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
				printDate, dRow, tbody, daySettings, otherMonth, unselectable,
				tempDate = new Date(),
				today = this._daylightSavingAdjust(
					new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
				isRTL = this._get(inst, "isRTL"),
				showButtonPanel = this._get(inst, "showButtonPanel"),
				hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
				navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
				numMonths = this._getNumberOfMonths(inst),
				showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
				stepMonths = this._get(inst, "stepMonths"),
				isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
				currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
					new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				drawMonth = inst.drawMonth - showCurrentAtPos,
				drawYear = inst.drawYear;

			if (drawMonth < 0) {
				drawMonth += 12;
				drawYear--;
			}
			if (maxDate) {
				maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
					maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
				maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
				while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
					drawMonth--;
					if (drawMonth < 0) {
						drawMonth = 11;
						drawYear--;
					}
				}
			}
			inst.drawMonth = drawMonth;
			inst.drawYear = drawYear;

			prevText = this._get(inst, "prevText");
			prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
				this._getFormatConfig(inst)));

			prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
				" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

			nextText = this._get(inst, "nextText");
			nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
				this._getFormatConfig(inst)));

			next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
				" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

			currentText = this._get(inst, "currentText");
			gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
			currentText = (!navigationAsDateFormat ? currentText :
				this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

			controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
				this._get(inst, "closeText") + "</button>" : "");

			buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
				(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
				">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

			firstDay = parseInt(this._get(inst, "firstDay"),10);
			firstDay = (isNaN(firstDay) ? 0 : firstDay);

			showWeek = this._get(inst, "showWeek");
			dayNames = this._get(inst, "dayNames");
			dayNamesMin = this._get(inst, "dayNamesMin");
			monthNames = this._get(inst, "monthNames");
			monthNamesShort = this._get(inst, "monthNamesShort");
			beforeShowDay = this._get(inst, "beforeShowDay");
			showOtherMonths = this._get(inst, "showOtherMonths");
			selectOtherMonths = this._get(inst, "selectOtherMonths");
			defaultDate = this._getDefaultDate(inst);
			html = "";
			dow;
			for (row = 0; row < numMonths[0]; row++) {
				group = "";
				this.maxRows = 4;
				for (col = 0; col < numMonths[1]; col++) {
					selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
					cornerClass = " ui-corner-all";
					calender = "";
					if (isMultiMonth) {
						calender += "<div class='ui-datepicker-group";
						if (numMonths[1] > 1) {
							switch (col) {
								case 0: calender += " ui-datepicker-group-first";
									cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
								case numMonths[1]-1: calender += " ui-datepicker-group-last";
									cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
								default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
							}
						}
						calender += "'>";
					}
					calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
						(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
						(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
						this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
						"</div><table class='ui-datepicker-calendar'><thead>" +
						"<tr>";
					thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
					for (dow = 0; dow < 7; dow++) { // days of the week
						day = (dow + firstDay) % 7;
						thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
							"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
					}
					calender += thead + "</tr></thead><tbody>";
					daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
					if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
						inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
					}
					leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
					curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
					numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
					this.maxRows = numRows;
					printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
					for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
						calender += "<tr>";
						tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
							this._get(inst, "calculateWeek")(printDate) + "</td>");
						for (dow = 0; dow < 7; dow++) { // create date picker days
							daySettings = (beforeShowDay ?
								beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
							otherMonth = (printDate.getMonth() !== drawMonth);
							unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
								(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
							tbody += "<td class='" +
								((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
								(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
								((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
								(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
								// or defaultDate is current printedDate and defaultDate is selectedDate
								" " + this._dayOverClass : "") + // highlight selected day
								(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
								(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
								(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
								(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
								((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
								(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
								(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
								(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
								(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
								(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
								(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
								"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
							printDate.setDate(printDate.getDate() + 1);
							printDate = this._daylightSavingAdjust(printDate);
						}
						calender += tbody + "</tr>";
					}
					drawMonth++;
					if (drawMonth > 11) {
						drawMonth = 0;
						drawYear++;
					}
					calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
								((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
					group += calender;
				}
				html += group;
			}
			html += buttonPanel;
			inst._keyEvent = false;
			return html;
		},

		/* Generate the month and year header. */
		_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
				secondary, monthNames, monthNamesShort) {

			var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
				changeMonth = this._get(inst, "changeMonth"),
				changeYear = this._get(inst, "changeYear"),
				showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
				html = "<div class='ui-datepicker-title'>",
				monthHtml = "";

			// month selection
			if (secondary || !changeMonth) {
				monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
							(month === drawMonth ? " selected='selected'" : "") +
							">" + monthNamesShort[month] + "</option>";
					}
				}
				monthHtml += "</select>";
			}

			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}

			// year selection
			if ( !inst.yearshtml ) {
				inst.yearshtml = "";
				if (secondary || !changeYear) {
					html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
				} else {
					// determine range of years to display
					years = this._get(inst, "yearRange").split(":");
					thisYear = new Date().getFullYear();
					determineYear = function(value) {
						var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
							(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
							parseInt(value, 10)));
						return (isNaN(year) ? thisYear : year);
					};
					year = determineYear(years[0]);
					endYear = Math.max(year, determineYear(years[1] || ""));
					year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
					endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
					inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						inst.yearshtml += "<option value='" + year + "'" +
							(year === drawYear ? " selected='selected'" : "") +
							">" + year + "</option>";
					}
					inst.yearshtml += "</select>";

					html += inst.yearshtml;
					inst.yearshtml = null;
				}
			}

			html += this._get(inst, "yearSuffix");
			if (showMonthAfterYear) {
				html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
			}
			html += "</div>"; // Close datepicker_header
			return html;
		},

		/* Adjust one of the date sub-fields. */
		_adjustInstDate: function(inst, offset, period) {
			var year = inst.drawYear + (period === "Y" ? offset : 0),
				month = inst.drawMonth + (period === "M" ? offset : 0),
				day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
				date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			if (period === "M" || period === "Y") {
				this._notifyChange(inst);
			}
		},

		/* Ensure a date is within any min/max bounds. */
		_restrictMinMax: function(inst, date) {
			var minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				newDate = (minDate && date < minDate ? minDate : date);
			return (maxDate && newDate > maxDate ? maxDate : newDate);
		},

		/* Notify change of month/year. */
		_notifyChange: function(inst) {
			var onChange = this._get(inst, "onChangeMonthYear");
			if (onChange) {
				onChange.apply((inst.input ? inst.input[0] : null),
					[inst.selectedYear, inst.selectedMonth + 1, inst]);
			}
		},

		/* Determine the number of months to show. */
		_getNumberOfMonths: function(inst) {
			var numMonths = this._get(inst, "numberOfMonths");
			return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
		},

		/* Determine the current maximum date - ensure no time components are set. */
		_getMinMaxDate: function(inst, minMax) {
			return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
		},

		/* Find the number of days in a given month. */
		_getDaysInMonth: function(year, month) {
			return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
		},

		/* Find the day of the week of the first of a month. */
		_getFirstDayOfMonth: function(year, month) {
			return new Date(year, month, 1).getDay();
		},

		/* Determines if we should allow a "next/prev" month display change. */
		_canAdjustMonth: function(inst, offset, curYear, curMonth) {
			var numMonths = this._getNumberOfMonths(inst),
				date = this._daylightSavingAdjust(new Date(curYear,
				curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

			if (offset < 0) {
				date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
			}
			return this._isInRange(inst, date);
		},

		/* Is the given date in the accepted range? */
		_isInRange: function(inst, date) {
			var yearSplit, currentYear,
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				minYear = null,
				maxYear = null,
				years = this._get(inst, "yearRange");
				if (years){
					yearSplit = years.split(":");
					currentYear = new Date().getFullYear();
					minYear = parseInt(yearSplit[0], 10);
					maxYear = parseInt(yearSplit[1], 10);
					if ( yearSplit[0].match(/[+\-].*/) ) {
						minYear += currentYear;
					}
					if ( yearSplit[1].match(/[+\-].*/) ) {
						maxYear += currentYear;
					}
				}

			return ((!minDate || date.getTime() >= minDate.getTime()) &&
				(!maxDate || date.getTime() <= maxDate.getTime()) &&
				(!minYear || date.getFullYear() >= minYear) &&
				(!maxYear || date.getFullYear() <= maxYear));
		},

		/* Provide the configuration settings for formatting/parsing. */
		_getFormatConfig: function(inst) {
			var shortYearCutoff = this._get(inst, "shortYearCutoff");
			shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
			return {shortYearCutoff: shortYearCutoff,
				dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
				monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
		},

		/* Format the given date for display. */
		_formatDate: function(inst, day, month, year) {
			if (!day) {
				inst.currentDay = inst.selectedDay;
				inst.currentMonth = inst.selectedMonth;
				inst.currentYear = inst.selectedYear;
			}
			var date = (day ? (typeof day === "object" ? day :
				this._daylightSavingAdjust(new Date(year, month, day))) :
				this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
		}
	});

	/*
	 * Bind hover events for datepicker elements.
	 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
	 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
	 */
	function bindHover(dpDiv) {
		var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
		return dpDiv.delegate(selector, "mouseout", function() {
				$(this).removeClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).removeClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).removeClass("ui-datepicker-next-hover");
				}
			})
			.delegate(selector, "mouseover", function(){
				if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
					$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
					$(this).addClass("ui-state-hover");
					if (this.className.indexOf("ui-datepicker-prev") !== -1) {
						$(this).addClass("ui-datepicker-prev-hover");
					}
					if (this.className.indexOf("ui-datepicker-next") !== -1) {
						$(this).addClass("ui-datepicker-next-hover");
					}
				}
			});
	}

	/* jQuery extend now ignores nulls! */
	function extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null) {
				target[name] = props[name];
			}
		}
		return target;
	}

	/* Invoke the datepicker functionality.
	   @param  options  string - a command, optionally followed by additional parameters or
						Object - settings for attaching new datepicker functionality
	   @return  jQuery object */
	$.fn.datepicker = function(options){

		/* Verify an empty collection wasn't passed - Fixes #6976 */
		if ( !this.length ) {
			return this;
		}

		/* Initialise the date picker. */
		if (!$.datepicker.initialized) {
			$(document).mousedown($.datepicker._checkExternalClick);
			$.datepicker.initialized = true;
		}

		/* Append datepicker main container to body if not exist. */
		if ($("#"+$.datepicker._mainDivId).length === 0) {
			$("body").append($.datepicker.dpDiv);
		}

		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		return this.each(function() {
			typeof options === "string" ?
				$.datepicker["_" + options + "Datepicker"].
					apply($.datepicker, [this].concat(otherArgs)) :
				$.datepicker._attachDatepicker(this, options);
		});
	};

	$.datepicker = new Datepicker(); // singleton instance
	$.datepicker.initialized = false;
	$.datepicker.uuid = new Date().getTime();
	$.datepicker.version = "1.10.3";

	})(jQuery);

	(function( $, undefined ) {

	var sizeRelatedOptions = {
			buttons: true,
			height: true,
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true,
			width: true
		},
		resizableRelatedOptions = {
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true
		};

	$.widget( "ui.dialog", {
		version: "1.10.3",
		options: {
			appendTo: "body",
			autoOpen: true,
			buttons: [],
			closeOnEscape: true,
			closeText: "close",
			dialogClass: "",
			draggable: true,
			hide: null,
			height: "auto",
			maxHeight: null,
			maxWidth: null,
			minHeight: 150,
			minWidth: 150,
			modal: false,
			position: {
				my: "center",
				at: "center",
				of: window,
				collision: "fit",
				// Ensure the titlebar is always visible
				using: function( pos ) {
					var topOffset = $( this ).css( pos ).offset().top;
					if ( topOffset < 0 ) {
						$( this ).css( "top", pos.top - topOffset );
					}
				}
			},
			resizable: true,
			show: null,
			title: null,
			width: 300,

			// callbacks
			beforeClose: null,
			close: null,
			drag: null,
			dragStart: null,
			dragStop: null,
			focus: null,
			open: null,
			resize: null,
			resizeStart: null,
			resizeStop: null
		},

		_create: function() {
			this.originalCss = {
				display: this.element[0].style.display,
				width: this.element[0].style.width,
				minHeight: this.element[0].style.minHeight,
				maxHeight: this.element[0].style.maxHeight,
				height: this.element[0].style.height
			};
			this.originalPosition = {
				parent: this.element.parent(),
				index: this.element.parent().children().index( this.element )
			};
			this.originalTitle = this.element.attr("title");
			this.options.title = this.options.title || this.originalTitle;

			this._createWrapper();

			this.element
				.show()
				.removeAttr("title")
				.addClass("ui-dialog-content ui-widget-content")
				.appendTo( this.uiDialog );

			this._createTitlebar();
			this._createButtonPane();

			if ( this.options.draggable && $.fn.draggable ) {
				this._makeDraggable();
			}
			if ( this.options.resizable && $.fn.resizable ) {
				this._makeResizable();
			}

			this._isOpen = false;
		},

		_init: function() {
			if ( this.options.autoOpen ) {
				this.open();
			}
		},

		_appendTo: function() {
			var element = this.options.appendTo;
			if ( element && (element.jquery || element.nodeType) ) {
				return $( element );
			}
			return this.document.find( element || "body" ).eq( 0 );
		},

		_destroy: function() {
			var next,
				originalPosition = this.originalPosition;

			this._destroyOverlay();

			this.element
				.removeUniqueId()
				.removeClass("ui-dialog-content ui-widget-content")
				.css( this.originalCss )
				// Without detaching first, the following becomes really slow
				.detach();

			this.uiDialog.stop( true, true ).remove();

			if ( this.originalTitle ) {
				this.element.attr( "title", this.originalTitle );
			}

			next = originalPosition.parent.children().eq( originalPosition.index );
			// Don't try to place the dialog next to itself (#8613)
			if ( next.length && next[0] !== this.element[0] ) {
				next.before( this.element );
			} else {
				originalPosition.parent.append( this.element );
			}
		},

		widget: function() {
			return this.uiDialog;
		},

		disable: $.noop,
		enable: $.noop,

		close: function( event ) {
			var that = this;

			if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
				return;
			}

			this._isOpen = false;
			this._destroyOverlay();

			if ( !this.opener.filter(":focusable").focus().length ) {
				// Hiding a focused element doesn't trigger blur in WebKit
				// so in case we have nothing to focus on, explicitly blur the active element
				// https://bugs.webkit.org/show_bug.cgi?id=47182
				$( this.document[0].activeElement ).blur();
			}

			this._hide( this.uiDialog, this.options.hide, function() {
				that._trigger( "close", event );
			});
		},

		isOpen: function() {
			return this._isOpen;
		},

		moveToTop: function() {
			this._moveToTop();
		},

		_moveToTop: function( event, silent ) {
			var moved = !!this.uiDialog.nextAll(":visible").insertBefore( this.uiDialog ).length;
			if ( moved && !silent ) {
				this._trigger( "focus", event );
			}
			return moved;
		},

		open: function() {
			var that = this;
			if ( this._isOpen ) {
				if ( this._moveToTop() ) {
					this._focusTabbable();
				}
				return;
			}

			this._isOpen = true;
			this.opener = $( this.document[0].activeElement );

			this._size();
			this._position();
			this._createOverlay();
			this._moveToTop( null, true );
			this._show( this.uiDialog, this.options.show, function() {
				that._focusTabbable();
				that._trigger("focus");
			});

			this._trigger("open");
		},

		_focusTabbable: function() {
			// Set focus to the first match:
			// 1. First element inside the dialog matching [autofocus]
			// 2. Tabbable element inside the content element
			// 3. Tabbable element inside the buttonpane
			// 4. The close button
			// 5. The dialog itself
			var hasFocus = this.element.find("[autofocus]");
			if ( !hasFocus.length ) {
				hasFocus = this.element.find(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogButtonPane.find(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialog;
			}
			hasFocus.eq( 0 ).focus();
		},

		_keepFocus: function( event ) {
			function checkFocus() {
				var activeElement = this.document[0].activeElement,
					isActive = this.uiDialog[0] === activeElement ||
						$.contains( this.uiDialog[0], activeElement );
				if ( !isActive ) {
					this._focusTabbable();
				}
			}
			event.preventDefault();
			checkFocus.call( this );
			// support: IE
			// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
			// so we check again later
			this._delay( checkFocus );
		},

		_createWrapper: function() {
			this.uiDialog = $("<div>")
				.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
					this.options.dialogClass )
				.hide()
				.attr({
					// Setting tabIndex makes the div focusable
					tabIndex: -1,
					role: "dialog"
				})
				.appendTo( this._appendTo() );

			this._on( this.uiDialog, {
				keydown: function( event ) {
					if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
							event.keyCode === $.ui.keyCode.ESCAPE ) {
						event.preventDefault();
						this.close( event );
						return;
					}

					// prevent tabbing out of dialogs
					if ( event.keyCode !== $.ui.keyCode.TAB ) {
						return;
					}
					var tabbables = this.uiDialog.find(":tabbable"),
						first = tabbables.filter(":first"),
						last  = tabbables.filter(":last");

					if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
						first.focus( 1 );
						event.preventDefault();
					} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
						last.focus( 1 );
						event.preventDefault();
					}
				},
				mousedown: function( event ) {
					if ( this._moveToTop( event ) ) {
						this._focusTabbable();
					}
				}
			});

			// We assume that any existing aria-describedby attribute means
			// that the dialog content is marked up properly
			// otherwise we brute force the content as the description
			if ( !this.element.find("[aria-describedby]").length ) {
				this.uiDialog.attr({
					"aria-describedby": this.element.uniqueId().attr("id")
				});
			}
		},

		_createTitlebar: function() {
			var uiDialogTitle;

			this.uiDialogTitlebar = $("<div>")
				.addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
				.prependTo( this.uiDialog );
			this._on( this.uiDialogTitlebar, {
				mousedown: function( event ) {
					// Don't prevent click on close button (#8838)
					// Focusing a dialog that is partially scrolled out of view
					// causes the browser to scroll it into view, preventing the click event
					if ( !$( event.target ).closest(".ui-dialog-titlebar-close") ) {
						// Dialog isn't getting focus when dragging (#8063)
						this.uiDialog.focus();
					}
				}
			});

			this.uiDialogTitlebarClose = $("<button></button>")
				.button({
					label: this.options.closeText,
					icons: {
						primary: "ui-icon-closethick"
					},
					text: false
				})
				.addClass("ui-dialog-titlebar-close")
				.appendTo( this.uiDialogTitlebar );
			this._on( this.uiDialogTitlebarClose, {
				click: function( event ) {
					event.preventDefault();
					this.close( event );
				}
			});

			uiDialogTitle = $("<span>")
				.uniqueId()
				.addClass("ui-dialog-title")
				.prependTo( this.uiDialogTitlebar );
			this._title( uiDialogTitle );

			this.uiDialog.attr({
				"aria-labelledby": uiDialogTitle.attr("id")
			});
		},

		_title: function( title ) {
			if ( !this.options.title ) {
				title.html("&#160;");
			}
			title.text( this.options.title );
		},

		_createButtonPane: function() {
			this.uiDialogButtonPane = $("<div>")
				.addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

			this.uiButtonSet = $("<div>")
				.addClass("ui-dialog-buttonset")
				.appendTo( this.uiDialogButtonPane );

			this._createButtons();
		},

		_createButtons: function() {
			var that = this,
				buttons = this.options.buttons;

			// if we already have a button pane, remove it
			this.uiDialogButtonPane.remove();
			this.uiButtonSet.empty();

			if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
				this.uiDialog.removeClass("ui-dialog-buttons");
				return;
			}

			$.each( buttons, function( name, props ) {
				var click, buttonOptions;
				props = $.isFunction( props ) ?
					{ click: props, text: name } :
					props;
				// Default to a non-submitting button
				props = $.extend( { type: "button" }, props );
				// Change the context for the click callback to be the main element
				click = props.click;
				props.click = function() {
					click.apply( that.element[0], arguments );
				};
				buttonOptions = {
					icons: props.icons,
					text: props.showText
				};
				delete props.icons;
				delete props.showText;
				$( "<button></button>", props )
					.button( buttonOptions )
					.appendTo( that.uiButtonSet );
			});
			this.uiDialog.addClass("ui-dialog-buttons");
			this.uiDialogButtonPane.appendTo( this.uiDialog );
		},

		_makeDraggable: function() {
			var that = this,
				options = this.options;

			function filteredUi( ui ) {
				return {
					position: ui.position,
					offset: ui.offset
				};
			}

			this.uiDialog.draggable({
				cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
				handle: ".ui-dialog-titlebar",
				containment: "document",
				start: function( event, ui ) {
					$( this ).addClass("ui-dialog-dragging");
					that._blockFrames();
					that._trigger( "dragStart", event, filteredUi( ui ) );
				},
				drag: function( event, ui ) {
					that._trigger( "drag", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					options.position = [
						ui.position.left - that.document.scrollLeft(),
						ui.position.top - that.document.scrollTop()
					];
					$( this ).removeClass("ui-dialog-dragging");
					that._unblockFrames();
					that._trigger( "dragStop", event, filteredUi( ui ) );
				}
			});
		},

		_makeResizable: function() {
			var that = this,
				options = this.options,
				handles = options.resizable,
				// .ui-resizable has position: relative defined in the stylesheet
				// but dialogs have to use absolute or fixed positioning
				position = this.uiDialog.css("position"),
				resizeHandles = typeof handles === "string" ?
					handles	:
					"n,e,s,w,se,sw,ne,nw";

			function filteredUi( ui ) {
				return {
					originalPosition: ui.originalPosition,
					originalSize: ui.originalSize,
					position: ui.position,
					size: ui.size
				};
			}

			this.uiDialog.resizable({
				cancel: ".ui-dialog-content",
				containment: "document",
				alsoResize: this.element,
				maxWidth: options.maxWidth,
				maxHeight: options.maxHeight,
				minWidth: options.minWidth,
				minHeight: this._minHeight(),
				handles: resizeHandles,
				start: function( event, ui ) {
					$( this ).addClass("ui-dialog-resizing");
					that._blockFrames();
					that._trigger( "resizeStart", event, filteredUi( ui ) );
				},
				resize: function( event, ui ) {
					that._trigger( "resize", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					options.height = $( this ).height();
					options.width = $( this ).width();
					$( this ).removeClass("ui-dialog-resizing");
					that._unblockFrames();
					that._trigger( "resizeStop", event, filteredUi( ui ) );
				}
			})
			.css( "position", position );
		},

		_minHeight: function() {
			var options = this.options;

			return options.height === "auto" ?
				options.minHeight :
				Math.min( options.minHeight, options.height );
		},

		_position: function() {
			// Need to show the dialog to get the actual offset in the position plugin
			var isVisible = this.uiDialog.is(":visible");
			if ( !isVisible ) {
				this.uiDialog.show();
			}
			this.uiDialog.position( this.options.position );
			if ( !isVisible ) {
				this.uiDialog.hide();
			}
		},

		_setOptions: function( options ) {
			var that = this,
				resize = false,
				resizableOptions = {};

			$.each( options, function( key, value ) {
				that._setOption( key, value );

				if ( key in sizeRelatedOptions ) {
					resize = true;
				}
				if ( key in resizableRelatedOptions ) {
					resizableOptions[ key ] = value;
				}
			});

			if ( resize ) {
				this._size();
				this._position();
			}
			if ( this.uiDialog.is(":data(ui-resizable)") ) {
				this.uiDialog.resizable( "option", resizableOptions );
			}
		},

		_setOption: function( key, value ) {
			/*jshint maxcomplexity:15*/
			var isDraggable, isResizable,
				uiDialog = this.uiDialog;

			if ( key === "dialogClass" ) {
				uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}

			if ( key === "disabled" ) {
				return;
			}

			this._super( key, value );

			if ( key === "appendTo" ) {
				this.uiDialog.appendTo( this._appendTo() );
			}

			if ( key === "buttons" ) {
				this._createButtons();
			}

			if ( key === "closeText" ) {
				this.uiDialogTitlebarClose.button({
					// Ensure that we always pass a string
					label: "" + value
				});
			}

			if ( key === "draggable" ) {
				isDraggable = uiDialog.is(":data(ui-draggable)");
				if ( isDraggable && !value ) {
					uiDialog.draggable("destroy");
				}

				if ( !isDraggable && value ) {
					this._makeDraggable();
				}
			}

			if ( key === "position" ) {
				this._position();
			}

			if ( key === "resizable" ) {
				// currently resizable, becoming non-resizable
				isResizable = uiDialog.is(":data(ui-resizable)");
				if ( isResizable && !value ) {
					uiDialog.resizable("destroy");
				}

				// currently resizable, changing handles
				if ( isResizable && typeof value === "string" ) {
					uiDialog.resizable( "option", "handles", value );
				}

				// currently non-resizable, becoming resizable
				if ( !isResizable && value !== false ) {
					this._makeResizable();
				}
			}

			if ( key === "title" ) {
				this._title( this.uiDialogTitlebar.find(".ui-dialog-title") );
			}
		},

		_size: function() {
			// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
			// divs will both have width and height set, so we need to reset them
			var nonContentHeight, minContentHeight, maxContentHeight,
				options = this.options;

			// Reset content sizing
			this.element.show().css({
				width: "auto",
				minHeight: 0,
				maxHeight: "none",
				height: 0
			});

			if ( options.minWidth > options.width ) {
				options.width = options.minWidth;
			}

			// reset wrapper sizing
			// determine the height of all the non-content elements
			nonContentHeight = this.uiDialog.css({
					height: "auto",
					width: options.width
				})
				.outerHeight();
			minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
			maxContentHeight = typeof options.maxHeight === "number" ?
				Math.max( 0, options.maxHeight - nonContentHeight ) :
				"none";

			if ( options.height === "auto" ) {
				this.element.css({
					minHeight: minContentHeight,
					maxHeight: maxContentHeight,
					height: "auto"
				});
			} else {
				this.element.height( Math.max( 0, options.height - nonContentHeight ) );
			}

			if (this.uiDialog.is(":data(ui-resizable)") ) {
				this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
			}
		},

		_blockFrames: function() {
			this.iframeBlocks = this.document.find( "iframe" ).map(function() {
				var iframe = $( this );

				return $( "<div>" )
					.css({
						position: "absolute",
						width: iframe.outerWidth(),
						height: iframe.outerHeight()
					})
					.appendTo( iframe.parent() )
					.offset( iframe.offset() )[0];
			});
		},

		_unblockFrames: function() {
			if ( this.iframeBlocks ) {
				this.iframeBlocks.remove();
				delete this.iframeBlocks;
			}
		},

		_allowInteraction: function( event ) {
			if ( $( event.target ).closest(".ui-dialog").length ) {
				return true;
			}

			// TODO: Remove hack when datepicker implements
			// the .ui-front logic (#8989)
			return !!$( event.target ).closest(".ui-datepicker").length;
		},

		_createOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}

			var that = this,
				widgetFullName = this.widgetFullName;
			if ( !$.ui.dialog.overlayInstances ) {
				// Prevent use of anchors and inputs.
				// We use a delay in case the overlay is created from an
				// event that we're going to be cancelling. (#2804)
				this._delay(function() {
					// Handle .dialog().dialog("close") (#4065)
					if ( $.ui.dialog.overlayInstances ) {
						this.document.bind( "focusin.dialog", function( event ) {
							if ( !that._allowInteraction( event ) ) {
								event.preventDefault();
								$(".ui-dialog:visible:last .ui-dialog-content")
									.data( widgetFullName )._focusTabbable();
							}
						});
					}
				});
			}

			this.overlay = $("<div>")
				.addClass("ui-widget-overlay ui-front")
				.appendTo( this._appendTo() );
			this._on( this.overlay, {
				mousedown: "_keepFocus"
			});
			$.ui.dialog.overlayInstances++;
		},

		_destroyOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}

			if ( this.overlay ) {
				$.ui.dialog.overlayInstances--;

				if ( !$.ui.dialog.overlayInstances ) {
					this.document.unbind( "focusin.dialog" );
				}
				this.overlay.remove();
				this.overlay = null;
			}
		}
	});

	$.ui.dialog.overlayInstances = 0;

	// DEPRECATED
	if ( $.uiBackCompat !== false ) {
		// position option with array notation
		// just override with old implementation
		$.widget( "ui.dialog", $.ui.dialog, {
			_position: function() {
				var position = this.options.position,
					myAt = [],
					offset = [ 0, 0 ],
					isVisible;

				if ( position ) {
					if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
						myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
						if ( myAt.length === 1 ) {
							myAt[1] = myAt[0];
						}

						$.each( [ "left", "top" ], function( i, offsetPosition ) {
							if ( +myAt[ i ] === myAt[ i ] ) {
								offset[ i ] = myAt[ i ];
								myAt[ i ] = offsetPosition;
							}
						});

						position = {
							my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
								myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
							at: myAt.join(" ")
						};
					}

					position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
				} else {
					position = $.ui.dialog.prototype.options.position;
				}

				// need to show the dialog to get the actual offset in the position plugin
				isVisible = this.uiDialog.is(":visible");
				if ( !isVisible ) {
					this.uiDialog.show();
				}
				this.uiDialog.position( position );
				if ( !isVisible ) {
					this.uiDialog.hide();
				}
			}
		});
	}

	}( jQuery ) );

	(function( $, undefined ) {

	var rvertical = /up|down|vertical/,
		rpositivemotion = /up|left|vertical|horizontal/;

	$.effects.effect.blind = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			direction = o.direction || "up",
			vertical = rvertical.test( direction ),
			ref = vertical ? "height" : "width",
			ref2 = vertical ? "top" : "left",
			motion = rpositivemotion.test( direction ),
			animation = {},
			show = mode === "show",
			wrapper, distance, margin;

		// if already wrapped, the wrapper's properties are my property. #6245
		if ( el.parent().is( ".ui-effects-wrapper" ) ) {
			$.effects.save( el.parent(), props );
		} else {
			$.effects.save( el, props );
		}
		el.show();
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		distance = wrapper[ ref ]();
		margin = parseFloat( wrapper.css( ref2 ) ) || 0;

		animation[ ref ] = show ? distance : 0;
		if ( !motion ) {
			el
				.css( vertical ? "bottom" : "right", 0 )
				.css( vertical ? "top" : "left", "auto" )
				.css({ position: "absolute" });

			animation[ ref2 ] = show ? margin : distance + margin;
		}

		// start at 0 if we are showing
		if ( show ) {
			wrapper.css( ref, 0 );
			if ( ! motion ) {
				wrapper.css( ref2, margin + distance );
			}
		}

		// Animate
		wrapper.animate( animation, {
			duration: o.duration,
			easing: o.easing,
			queue: false,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.bounce = function( o, done ) {
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

			// defaults:
			mode = $.effects.setMode( el, o.mode || "effect" ),
			hide = mode === "hide",
			show = mode === "show",
			direction = o.direction || "up",
			distance = o.distance,
			times = o.times || 5,

			// number of internal animations
			anims = times * 2 + ( show || hide ? 1 : 0 ),
			speed = o.duration / anims,
			easing = o.easing,

			// utility:
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ),
			i,
			upAnim,
			downAnim,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		// Avoid touching opacity to prevent clearType and PNG issues in IE
		if ( show || hide ) {
			props.push( "opacity" );
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el ); // Create Wrapper

		// default distance for the BIGGEST bounce is the outer Distance / 3
		if ( !distance ) {
			distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
		}

		if ( show ) {
			downAnim = { opacity: 1 };
			downAnim[ ref ] = 0;

			// if we are showing, force opacity 0 and set the initial position
			// then do the "first" animation
			el.css( "opacity", 0 )
				.css( ref, motion ? -distance * 2 : distance * 2 )
				.animate( downAnim, speed, easing );
		}

		// start at the smallest distance if we are hiding
		if ( hide ) {
			distance = distance / Math.pow( 2, times - 1 );
		}

		downAnim = {};
		downAnim[ ref ] = 0;
		// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
		for ( i = 0; i < times; i++ ) {
			upAnim = {};
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing )
				.animate( downAnim, speed, easing );

			distance = hide ? distance * 2 : distance / 2;
		}

		// Last Bounce when Hiding
		if ( hide ) {
			upAnim = { opacity: 0 };
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing );
		}

		el.queue(function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.clip = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "vertical",
			vert = direction === "vertical",
			size = vert ? "height" : "width",
			position = vert ? "top" : "left",
			animation = {},
			wrapper, animate, distance;

		// Save & Show
		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
		distance = animate[ size ]();

		// Shift
		if ( show ) {
			animate.css( size, 0 );
			animate.css( position, distance / 2 );
		}

		// Create Animation Object:
		animation[ size ] = show ? distance : 0;
		animation[ position ] = show ? 0 : distance / 2;

		// Animate
		animate.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( !show ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.drop = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
			animation = {
				opacity: show ? 1 : 0
			},
			distance;

		// Adjust
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

		if ( show ) {
			el
				.css( "opacity", 0 )
				.css( ref, motion === "pos" ? -distance : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( motion === "pos" ? "+=" : "-=" ) :
			( motion === "pos" ? "-=" : "+=" ) ) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.explode = function( o, done ) {

		var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
			cells = rows,
			el = $( this ),
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",

			// show and then visibility:hidden the element before calculating offset
			offset = el.show().css( "visibility", "hidden" ).offset(),

			// width and height of a piece
			width = Math.ceil( el.outerWidth() / cells ),
			height = Math.ceil( el.outerHeight() / rows ),
			pieces = [],

			// loop
			i, j, left, top, mx, my;

		// children animate complete:
		function childComplete() {
			pieces.push( this );
			if ( pieces.length === rows * cells ) {
				animComplete();
			}
		}

		// clone the element for each row and cell.
		for( i = 0; i < rows ; i++ ) { // ===>
			top = offset.top + i * height;
			my = i - ( rows - 1 ) / 2 ;

			for( j = 0; j < cells ; j++ ) { // |||
				left = offset.left + j * width;
				mx = j - ( cells - 1 ) / 2 ;

				// Create a clone of the now hidden main element that will be absolute positioned
				// within a wrapper div off the -left and -top equal to size of our pieces
				el
					.clone()
					.appendTo( "body" )
					.wrap( "<div></div>" )
					.css({
						position: "absolute",
						visibility: "visible",
						left: -j * width,
						top: -i * height
					})

				// select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
					.parent()
					.addClass( "ui-effects-explode" )
					.css({
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					}).animate({
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, o.duration || 500, o.easing, childComplete );
			}
		}

		function animComplete() {
			el.css({
				visibility: "visible"
			});
			$( pieces ).remove();
			if ( !show ) {
				el.hide();
			}
			done();
		}
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.fade = function( o, done ) {
		var el = $( this ),
			mode = $.effects.setMode( el, o.mode || "toggle" );

		el.animate({
			opacity: mode
		}, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: done
		});
	};

	})( jQuery );

	(function( $, undefined ) {

	$.effects.effect.fold = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			hide = mode === "hide",
			size = o.size || 15,
			percent = /([0-9]+)%/.exec( size ),
			horizFirst = !!o.horizFirst,
			widthFirst = show !== horizFirst,
			ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
			duration = o.duration / 2,
			wrapper, distance,
			animation1 = {},
			animation2 = {};

		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		distance = widthFirst ?
			[ wrapper.width(), wrapper.height() ] :
			[ wrapper.height(), wrapper.width() ];

		if ( percent ) {
			size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
		}
		if ( show ) {
			wrapper.css( horizFirst ? {
				height: 0,
				width: size
			} : {
				height: size,
				width: 0
			});
		}

		// Animation
		animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
		animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

		// Animate
		wrapper
			.animate( animation1, duration, o.easing )
			.animate( animation2, duration, o.easing, function() {
				if ( hide ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.highlight = function( o, done ) {
		var elem = $( this ),
			props = [ "backgroundImage", "backgroundColor", "opacity" ],
			mode = $.effects.setMode( elem, o.mode || "show" ),
			animation = {
				backgroundColor: elem.css( "backgroundColor" )
			};

		if (mode === "hide") {
			animation.opacity = 0;
		}

		$.effects.save( elem, props );

		elem
			.show()
			.css({
				backgroundImage: "none",
				backgroundColor: o.color || "#ffff99"
			})
			.animate( animation, {
				queue: false,
				duration: o.duration,
				easing: o.easing,
				complete: function() {
					if ( mode === "hide" ) {
						elem.hide();
					}
					$.effects.restore( elem, props );
					done();
				}
			});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.pulsate = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "show" ),
			show = mode === "show",
			hide = mode === "hide",
			showhide = ( show || mode === "hide" ),

			// showing or hiding leaves of the "last" animation
			anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
			duration = o.duration / anims,
			animateTo = 0,
			queue = elem.queue(),
			queuelen = queue.length,
			i;

		if ( show || !elem.is(":visible")) {
			elem.css( "opacity", 0 ).show();
			animateTo = 1;
		}

		// anims - 1 opacity "toggles"
		for ( i = 1; i < anims; i++ ) {
			elem.animate({
				opacity: animateTo
			}, duration, o.easing );
			animateTo = 1 - animateTo;
		}

		elem.animate({
			opacity: animateTo
		}, duration, o.easing);

		elem.queue(function() {
			if ( hide ) {
				elem.hide();
			}
			done();
		});

		// We just queued up "anims" animations, we need to put them next in the queue
		if ( queuelen > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		elem.dequeue();
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.puff = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "hide" ),
			hide = mode === "hide",
			percent = parseInt( o.percent, 10 ) || 150,
			factor = percent / 100,
			original = {
				height: elem.height(),
				width: elem.width(),
				outerHeight: elem.outerHeight(),
				outerWidth: elem.outerWidth()
			};

		$.extend( o, {
			effect: "scale",
			queue: false,
			fade: true,
			mode: mode,
			complete: done,
			percent: hide ? percent : 100,
			from: hide ?
				original :
				{
					height: original.height * factor,
					width: original.width * factor,
					outerHeight: original.outerHeight * factor,
					outerWidth: original.outerWidth * factor
				}
		});

		elem.effect( o );
	};

	$.effects.effect.scale = function( o, done ) {

		// Create element
		var el = $( this ),
			options = $.extend( true, {}, o ),
			mode = $.effects.setMode( el, o.mode || "effect" ),
			percent = parseInt( o.percent, 10 ) ||
				( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
			direction = o.direction || "both",
			origin = o.origin,
			original = {
				height: el.height(),
				width: el.width(),
				outerHeight: el.outerHeight(),
				outerWidth: el.outerWidth()
			},
			factor = {
				y: direction !== "horizontal" ? (percent / 100) : 1,
				x: direction !== "vertical" ? (percent / 100) : 1
			};

		// We are going to pass this effect to the size effect:
		options.effect = "size";
		options.queue = false;
		options.complete = done;

		// Set default origin and restore for show/hide
		if ( mode !== "effect" ) {
			options.origin = origin || ["middle","center"];
			options.restore = true;
		}

		options.from = o.from || ( mode === "show" ? {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		} : original );
		options.to = {
			height: original.height * factor.y,
			width: original.width * factor.x,
			outerHeight: original.outerHeight * factor.y,
			outerWidth: original.outerWidth * factor.x
		};

		// Fade option to support puff
		if ( options.fade ) {
			if ( mode === "show" ) {
				options.from.opacity = 0;
				options.to.opacity = 1;
			}
			if ( mode === "hide" ) {
				options.from.opacity = 1;
				options.to.opacity = 0;
			}
		}

		// Animate
		el.effect( options );

	};

	$.effects.effect.size = function( o, done ) {

		// Create element
		var original, baseline, factor,
			el = $( this ),
			props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

			// Always restore
			props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

			// Copy for children
			props2 = [ "width", "height", "overflow" ],
			cProps = [ "fontSize" ],
			vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
			hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

			// Set options
			mode = $.effects.setMode( el, o.mode || "effect" ),
			restore = o.restore || mode !== "effect",
			scale = o.scale || "both",
			origin = o.origin || [ "middle", "center" ],
			position = el.css( "position" ),
			props = restore ? props0 : props1,
			zero = {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};

		if ( mode === "show" ) {
			el.show();
		}
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		};

		if ( o.mode === "toggle" && mode === "show" ) {
			el.from = o.to || zero;
			el.to = o.from || original;
		} else {
			el.from = o.from || ( mode === "show" ? zero : original );
			el.to = o.to || ( mode === "hide" ? zero : original );
		}

		// Set scaling factor
		factor = {
			from: {
				y: el.from.height / original.height,
				x: el.from.width / original.width
			},
			to: {
				y: el.to.height / original.height,
				x: el.to.width / original.width
			}
		};

		// Scale the css box
		if ( scale === "box" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( vProps );
				el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				props = props.concat( hProps );
				el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
				el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
			}
		}

		// Scale the content
		if ( scale === "content" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( cProps ).concat( props2 );
				el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
			}
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
		el.css( "overflow", "hidden" ).css( el.from );

		// Adjust
		if (origin) { // Calculate baseline shifts
			baseline = $.effects.getBaseline( origin, original );
			el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
			el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
			el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
			el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
		}
		el.css( el.from ); // set top & left

		// Animate
		if ( scale === "content" || scale === "both" ) { // Scale the children

			// Add margins/font-size
			vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
			hProps = hProps.concat([ "marginLeft", "marginRight" ]);
			props2 = props0.concat(vProps).concat(hProps);

			el.find( "*[width]" ).each( function(){
				var child = $( this ),
					c_original = {
						height: child.height(),
						width: child.width(),
						outerHeight: child.outerHeight(),
						outerWidth: child.outerWidth()
					};
				if (restore) {
					$.effects.save(child, props2);
				}

				child.from = {
					height: c_original.height * factor.from.y,
					width: c_original.width * factor.from.x,
					outerHeight: c_original.outerHeight * factor.from.y,
					outerWidth: c_original.outerWidth * factor.from.x
				};
				child.to = {
					height: c_original.height * factor.to.y,
					width: c_original.width * factor.to.x,
					outerHeight: c_original.height * factor.to.y,
					outerWidth: c_original.width * factor.to.x
				};

				// Vertical props scaling
				if ( factor.from.y !== factor.to.y ) {
					child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
					child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
				}

				// Horizontal props scaling
				if ( factor.from.x !== factor.to.x ) {
					child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
					child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
				}

				// Animate children
				child.css( child.from );
				child.animate( child.to, o.duration, o.easing, function() {

					// Restore children
					if ( restore ) {
						$.effects.restore( child, props2 );
					}
				});
			});
		}

		// Animate
		el.animate( el.to, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( el.to.opacity === 0 ) {
					el.css( "opacity", el.from.opacity );
				}
				if( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				if ( !restore ) {

					// we need to calculate our new positioning based on the scaling
					if ( position === "static" ) {
						el.css({
							position: "relative",
							top: el.to.top,
							left: el.to.left
						});
					} else {
						$.each([ "top", "left" ], function( idx, pos ) {
							el.css( pos, function( _, str ) {
								var val = parseInt( str, 10 ),
									toRef = idx ? el.to.left : el.to.top;

								// if original was "auto", recalculate the new value from wrapper
								if ( str === "auto" ) {
									return toRef + "px";
								}

								return val + toRef + "px";
							});
						});
					}
				}

				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.shake = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "effect" ),
			direction = o.direction || "left",
			distance = o.distance || 20,
			times = o.times || 3,
			anims = times * 2 + 1,
			speed = Math.round(o.duration/anims),
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			animation = {},
			animation1 = {},
			animation2 = {},
			i,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		// Animation
		animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
		animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
		animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

		// Animate
		el.animate( animation, speed, o.easing );

		// Shakes
		for ( i = 1; i < times; i++ ) {
			el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
		}
		el
			.animate( animation1, speed, o.easing )
			.animate( animation, speed / 2, o.easing )
			.queue(function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.slide = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
			mode = $.effects.setMode( el, o.mode || "show" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			distance,
			animation = {};

		// Adjust
		$.effects.save( el, props );
		el.show();
		distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

		$.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		if ( show ) {
			el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( positiveMotion ? "+=" : "-=") :
			( positiveMotion ? "-=" : "+=")) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.transfer = function( o, done ) {
		var elem = $( this ),
			target = $( o.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $("body"),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop ,
				left: endPosition.left - fixLeft ,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = elem.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( document.body )
				.addClass( o.className )
				.css({
					top: startPosition.top - fixTop ,
					left: startPosition.left - fixLeft ,
					height: elem.innerHeight(),
					width: elem.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				})
				.animate( animation, o.duration, o.easing, function() {
					transfer.remove();
					done();
				});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.widget( "ui.menu", {
		version: "1.10.3",
		defaultElement: "<ul>",
		delay: 300,
		options: {
			icons: {
				submenu: "ui-icon-carat-1-e"
			},
			menus: "ul",
			position: {
				my: "left top",
				at: "right top"
			},
			role: "menu",

			// callbacks
			blur: null,
			focus: null,
			select: null
		},

		_create: function() {
			this.activeMenu = this.element;
			// flag used to prevent firing of the click handler
			// as the event bubbles up through nested menus
			this.mouseHandled = false;
			this.element
				.uniqueId()
				.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
				.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
				.attr({
					role: this.options.role,
					tabIndex: 0
				})
				// need to catch all clicks on disabled menu
				// not possible through _on
				.bind( "click" + this.eventNamespace, $.proxy(function( event ) {
					if ( this.options.disabled ) {
						event.preventDefault();
					}
				}, this ));

			if ( this.options.disabled ) {
				this.element
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			}

			this._on({
				// Prevent focus from sticking to links inside menu after clicking
				// them (focus should always stay on UL during navigation).
				"mousedown .ui-menu-item > a": function( event ) {
					event.preventDefault();
				},
				"click .ui-state-disabled > a": function( event ) {
					event.preventDefault();
				},
				"click .ui-menu-item:has(a)": function( event ) {
					var target = $( event.target ).closest( ".ui-menu-item" );
					if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
						this.mouseHandled = true;

						this.select( event );
						// Open submenu on click
						if ( target.has( ".ui-menu" ).length ) {
							this.expand( event );
						} else if ( !this.element.is( ":focus" ) ) {
							// Redirect focus to the menu
							this.element.trigger( "focus", [ true ] );

							// If the active item is on the top level, let it stay active.
							// Otherwise, blur the active item since it is no longer visible.
							if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
								clearTimeout( this.timer );
							}
						}
					}
				},
				"mouseenter .ui-menu-item": function( event ) {
					var target = $( event.currentTarget );
					// Remove ui-state-active class from siblings of the newly focused menu item
					// to avoid a jump caused by adjacent elements both having a class with a border
					target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
					this.focus( event, target );
				},
				mouseleave: "collapseAll",
				"mouseleave .ui-menu": "collapseAll",
				focus: function( event, keepActiveItem ) {
					// If there's already an active item, keep it active
					// If not, activate the first item
					var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

					if ( !keepActiveItem ) {
						this.focus( event, item );
					}
				},
				blur: function( event ) {
					this._delay(function() {
						if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
							this.collapseAll( event );
						}
					});
				},
				keydown: "_keydown"
			});

			this.refresh();

			// Clicks outside of a menu collapse any open menus
			this._on( this.document, {
				click: function( event ) {
					if ( !$( event.target ).closest( ".ui-menu" ).length ) {
						this.collapseAll( event );
					}

					// Reset the mouseHandled flag
					this.mouseHandled = false;
				}
			});
		},

		_destroy: function() {
			// Destroy (sub)menus
			this.element
				.removeAttr( "aria-activedescendant" )
				.find( ".ui-menu" ).addBack()
					.removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
					.removeAttr( "role" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-disabled" )
					.removeUniqueId()
					.show();

			// Destroy menu items
			this.element.find( ".ui-menu-item" )
				.removeClass( "ui-menu-item" )
				.removeAttr( "role" )
				.removeAttr( "aria-disabled" )
				.children( "a" )
					.removeUniqueId()
					.removeClass( "ui-corner-all ui-state-hover" )
					.removeAttr( "tabIndex" )
					.removeAttr( "role" )
					.removeAttr( "aria-haspopup" )
					.children().each( function() {
						var elem = $( this );
						if ( elem.data( "ui-menu-submenu-carat" ) ) {
							elem.remove();
						}
					});

			// Destroy menu dividers
			this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
		},

		_keydown: function( event ) {
			/*jshint maxcomplexity:20*/
			var match, prev, character, skip, regex,
				preventDefault = true;

			function escape( value ) {
				return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
			}

			switch ( event.keyCode ) {
			case $.ui.keyCode.PAGE_UP:
				this.previousPage( event );
				break;
			case $.ui.keyCode.PAGE_DOWN:
				this.nextPage( event );
				break;
			case $.ui.keyCode.HOME:
				this._move( "first", "first", event );
				break;
			case $.ui.keyCode.END:
				this._move( "last", "last", event );
				break;
			case $.ui.keyCode.UP:
				this.previous( event );
				break;
			case $.ui.keyCode.DOWN:
				this.next( event );
				break;
			case $.ui.keyCode.LEFT:
				this.collapse( event );
				break;
			case $.ui.keyCode.RIGHT:
				if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
					this.expand( event );
				}
				break;
			case $.ui.keyCode.ENTER:
			case $.ui.keyCode.SPACE:
				this._activate( event );
				break;
			case $.ui.keyCode.ESCAPE:
				this.collapse( event );
				break;
			default:
				preventDefault = false;
				prev = this.previousFilter || "";
				character = String.fromCharCode( event.keyCode );
				skip = false;

				clearTimeout( this.filterTimer );

				if ( character === prev ) {
					skip = true;
				} else {
					character = prev + character;
				}

				regex = new RegExp( "^" + escape( character ), "i" );
				match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
					return regex.test( $( this ).children( "a" ).text() );
				});
				match = skip && match.index( this.active.next() ) !== -1 ?
					this.active.nextAll( ".ui-menu-item" ) :
					match;

				// If no matches on the current filter, reset to the last character pressed
				// to move down the menu to the first item that starts with that character
				if ( !match.length ) {
					character = String.fromCharCode( event.keyCode );
					regex = new RegExp( "^" + escape( character ), "i" );
					match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
						return regex.test( $( this ).children( "a" ).text() );
					});
				}

				if ( match.length ) {
					this.focus( event, match );
					if ( match.length > 1 ) {
						this.previousFilter = character;
						this.filterTimer = this._delay(function() {
							delete this.previousFilter;
						}, 1000 );
					} else {
						delete this.previousFilter;
					}
				} else {
					delete this.previousFilter;
				}
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		},

		_activate: function( event ) {
			if ( !this.active.is( ".ui-state-disabled" ) ) {
				if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
					this.expand( event );
				} else {
					this.select( event );
				}
			}
		},

		refresh: function() {
			var menus,
				icon = this.options.icons.submenu,
				submenus = this.element.find( this.options.menus );

			// Initialize nested menus
			submenus.filter( ":not(.ui-menu)" )
				.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
				.hide()
				.attr({
					role: this.options.role,
					"aria-hidden": "true",
					"aria-expanded": "false"
				})
				.each(function() {
					var menu = $( this ),
						item = menu.prev( "a" ),
						submenuCarat = $( "<span>" )
							.addClass( "ui-menu-icon ui-icon " + icon )
							.data( "ui-menu-submenu-carat", true );

					item
						.attr( "aria-haspopup", "true" )
						.prepend( submenuCarat );
					menu.attr( "aria-labelledby", item.attr( "id" ) );
				});

			menus = submenus.add( this.element );

			// Don't refresh list items that are already adapted
			menus.children( ":not(.ui-menu-item):has(a)" )
				.addClass( "ui-menu-item" )
				.attr( "role", "presentation" )
				.children( "a" )
					.uniqueId()
					.addClass( "ui-corner-all" )
					.attr({
						tabIndex: -1,
						role: this._itemRole()
					});

			// Initialize unlinked menu-items containing spaces and/or dashes only as dividers
			menus.children( ":not(.ui-menu-item)" ).each(function() {
				var item = $( this );
				// hyphen, em dash, en dash
				if ( !/[^\-\u2014\u2013\s]/.test( item.text() ) ) {
					item.addClass( "ui-widget-content ui-menu-divider" );
				}
			});

			// Add aria-disabled attribute to any disabled menu item
			menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

			// If the active item has been removed, blur the menu
			if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				this.blur();
			}
		},

		_itemRole: function() {
			return {
				menu: "menuitem",
				listbox: "option"
			}[ this.options.role ];
		},

		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.element.find( ".ui-menu-icon" )
					.removeClass( this.options.icons.submenu )
					.addClass( value.submenu );
			}
			this._super( key, value );
		},

		focus: function( event, item ) {
			var nested, focused;
			this.blur( event, event && event.type === "focus" );

			this._scrollIntoView( item );

			this.active = item.first();
			focused = this.active.children( "a" ).addClass( "ui-state-focus" );
			// Only update aria-activedescendant if there's a role
			// otherwise we assume focus is managed elsewhere
			if ( this.options.role ) {
				this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
			}

			// Highlight active parent menu item, if any
			this.active
				.parent()
				.closest( ".ui-menu-item" )
				.children( "a:first" )
				.addClass( "ui-state-active" );

			if ( event && event.type === "keydown" ) {
				this._close();
			} else {
				this.timer = this._delay(function() {
					this._close();
				}, this.delay );
			}

			nested = item.children( ".ui-menu" );
			if ( nested.length && ( /^mouse/.test( event.type ) ) ) {
				this._startOpening(nested);
			}
			this.activeMenu = item.parent();

			this._trigger( "focus", event, { item: item } );
		},

		_scrollIntoView: function( item ) {
			var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
			if ( this._hasScroll() ) {
				borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
				paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
				offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
				scroll = this.activeMenu.scrollTop();
				elementHeight = this.activeMenu.height();
				itemHeight = item.height();

				if ( offset < 0 ) {
					this.activeMenu.scrollTop( scroll + offset );
				} else if ( offset + itemHeight > elementHeight ) {
					this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
				}
			}
		},

		blur: function( event, fromFocus ) {
			if ( !fromFocus ) {
				clearTimeout( this.timer );
			}

			if ( !this.active ) {
				return;
			}

			this.active.children( "a" ).removeClass( "ui-state-focus" );
			this.active = null;

			this._trigger( "blur", event, { item: this.active } );
		},

		_startOpening: function( submenu ) {
			clearTimeout( this.timer );

			// Don't open if already open fixes a Firefox bug that caused a .5 pixel
			// shift in the submenu position when mousing over the carat icon
			if ( submenu.attr( "aria-hidden" ) !== "true" ) {
				return;
			}

			this.timer = this._delay(function() {
				this._close();
				this._open( submenu );
			}, this.delay );
		},

		_open: function( submenu ) {
			var position = $.extend({
				of: this.active
			}, this.options.position );

			clearTimeout( this.timer );
			this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
				.hide()
				.attr( "aria-hidden", "true" );

			submenu
				.show()
				.removeAttr( "aria-hidden" )
				.attr( "aria-expanded", "true" )
				.position( position );
		},

		collapseAll: function( event, all ) {
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				// If we were passed an event, look for the submenu that contains the event
				var currentMenu = all ? this.element :
					$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

				// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
				if ( !currentMenu.length ) {
					currentMenu = this.element;
				}

				this._close( currentMenu );

				this.blur( event );
				this.activeMenu = currentMenu;
			}, this.delay );
		},

		// With no arguments, closes the currently active menu - if nothing is active
		// it closes all menus.  If passed an argument, it will search for menus BELOW
		_close: function( startMenu ) {
			if ( !startMenu ) {
				startMenu = this.active ? this.active.parent() : this.element;
			}

			startMenu
				.find( ".ui-menu" )
					.hide()
					.attr( "aria-hidden", "true" )
					.attr( "aria-expanded", "false" )
				.end()
				.find( "a.ui-state-active" )
					.removeClass( "ui-state-active" );
		},

		collapse: function( event ) {
			var newItem = this.active &&
				this.active.parent().closest( ".ui-menu-item", this.element );
			if ( newItem && newItem.length ) {
				this._close();
				this.focus( event, newItem );
			}
		},

		expand: function( event ) {
			var newItem = this.active &&
				this.active
					.children( ".ui-menu " )
					.children( ".ui-menu-item" )
					.first();

			if ( newItem && newItem.length ) {
				this._open( newItem.parent() );

				// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
				this._delay(function() {
					this.focus( event, newItem );
				});
			}
		},

		next: function( event ) {
			this._move( "next", "first", event );
		},

		previous: function( event ) {
			this._move( "prev", "last", event );
		},

		isFirstItem: function() {
			return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
		},

		isLastItem: function() {
			return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
		},

		_move: function( direction, filter, event ) {
			var next;
			if ( this.active ) {
				if ( direction === "first" || direction === "last" ) {
					next = this.active
						[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
						.eq( -1 );
				} else {
					next = this.active
						[ direction + "All" ]( ".ui-menu-item" )
						.eq( 0 );
				}
			}
			if ( !next || !next.length || !this.active ) {
				next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
			}

			this.focus( event, next );
		},

		nextPage: function( event ) {
			var item, base, height;

			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isLastItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.nextAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base - height < 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.children( ".ui-menu-item" )
					[ !this.active ? "first" : "last" ]() );
			}
		},

		previousPage: function( event ) {
			var item, base, height;
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isFirstItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.prevAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base + height > 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
			}
		},

		_hasScroll: function() {
			return this.element.outerHeight() < this.element.prop( "scrollHeight" );
		},

		select: function( event ) {
			// TODO: It should never be possible to not have an active item at this
			// point, but the tests don't trigger mouseenter before click.
			this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
			var ui = { item: this.active };
			if ( !this.active.has( ".ui-menu" ).length ) {
				this.collapseAll( event, true );
			}
			this._trigger( "select", event, ui );
		}
	});

	}( jQuery ));

	(function( $, undefined ) {

	$.ui = $.ui || {};

	var cachedScrollbarWidth,
		max = Math.max,
		abs = Math.abs,
		round = Math.round,
		rhorizontal = /left|center|right/,
		rvertical = /top|center|bottom/,
		roffset = /[\+\-]\d+(\.[\d]+)?%?/,
		rposition = /^\w+/,
		rpercent = /%$/,
		_position = $.fn.position;

	function getOffsets( offsets, width, height ) {
		return [
			parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
			parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
		];
	}

	function parseCss( element, property ) {
		return parseInt( $.css( element, property ), 10 ) || 0;
	}

	function getDimensions( elem ) {
		var raw = elem[0];
		if ( raw.nodeType === 9 ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: 0, left: 0 }
			};
		}
		if ( $.isWindow( raw ) ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
			};
		}
		if ( raw.preventDefault ) {
			return {
				width: 0,
				height: 0,
				offset: { top: raw.pageY, left: raw.pageX }
			};
		}
		return {
			width: elem.outerWidth(),
			height: elem.outerHeight(),
			offset: elem.offset()
		};
	}

	$.position = {
		scrollbarWidth: function() {
			if ( cachedScrollbarWidth !== undefined ) {
				return cachedScrollbarWidth;
			}
			var w1, w2,
				div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
				innerDiv = div.children()[0];

			$( "body" ).append( div );
			w1 = innerDiv.offsetWidth;
			div.css( "overflow", "scroll" );

			w2 = innerDiv.offsetWidth;

			if ( w1 === w2 ) {
				w2 = div[0].clientWidth;
			}

			div.remove();

			return (cachedScrollbarWidth = w1 - w2);
		},
		getScrollInfo: function( within ) {
			var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
				overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
				hasOverflowX = overflowX === "scroll" ||
					( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
				hasOverflowY = overflowY === "scroll" ||
					( overflowY === "auto" && within.height < within.element[0].scrollHeight );
			return {
				width: hasOverflowY ? $.position.scrollbarWidth() : 0,
				height: hasOverflowX ? $.position.scrollbarWidth() : 0
			};
		},
		getWithinInfo: function( element ) {
			var withinElement = $( element || window ),
				isWindow = $.isWindow( withinElement[0] );
			return {
				element: withinElement,
				isWindow: isWindow,
				offset: withinElement.offset() || { left: 0, top: 0 },
				scrollLeft: withinElement.scrollLeft(),
				scrollTop: withinElement.scrollTop(),
				width: isWindow ? withinElement.width() : withinElement.outerWidth(),
				height: isWindow ? withinElement.height() : withinElement.outerHeight()
			};
		}
	};

	$.fn.position = function( options ) {
		if ( !options || !options.of ) {
			return _position.apply( this, arguments );
		}

		// make a copy, we don't want to modify arguments
		options = $.extend( {}, options );

		var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
			target = $( options.of ),
			within = $.position.getWithinInfo( options.within ),
			scrollInfo = $.position.getScrollInfo( within ),
			collision = ( options.collision || "flip" ).split( " " ),
			offsets = {};

		dimensions = getDimensions( target );
		if ( target[0].preventDefault ) {
			// force left top to allow flipping
			options.at = "left top";
		}
		targetWidth = dimensions.width;
		targetHeight = dimensions.height;
		targetOffset = dimensions.offset;
		// clone to reuse original targetOffset later
		basePosition = $.extend( {}, targetOffset );

		// force my and at to have valid horizontal and vertical positions
		// if a value is missing or invalid, it will be converted to center
		$.each( [ "my", "at" ], function() {
			var pos = ( options[ this ] || "" ).split( " " ),
				horizontalOffset,
				verticalOffset;

			if ( pos.length === 1) {
				pos = rhorizontal.test( pos[ 0 ] ) ?
					pos.concat( [ "center" ] ) :
					rvertical.test( pos[ 0 ] ) ?
						[ "center" ].concat( pos ) :
						[ "center", "center" ];
			}
			pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
			pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

			// calculate offsets
			horizontalOffset = roffset.exec( pos[ 0 ] );
			verticalOffset = roffset.exec( pos[ 1 ] );
			offsets[ this ] = [
				horizontalOffset ? horizontalOffset[ 0 ] : 0,
				verticalOffset ? verticalOffset[ 0 ] : 0
			];

			// reduce to just the positions without the offsets
			options[ this ] = [
				rposition.exec( pos[ 0 ] )[ 0 ],
				rposition.exec( pos[ 1 ] )[ 0 ]
			];
		});

		// normalize collision option
		if ( collision.length === 1 ) {
			collision[ 1 ] = collision[ 0 ];
		}

		if ( options.at[ 0 ] === "right" ) {
			basePosition.left += targetWidth;
		} else if ( options.at[ 0 ] === "center" ) {
			basePosition.left += targetWidth / 2;
		}

		if ( options.at[ 1 ] === "bottom" ) {
			basePosition.top += targetHeight;
		} else if ( options.at[ 1 ] === "center" ) {
			basePosition.top += targetHeight / 2;
		}

		atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
		basePosition.left += atOffset[ 0 ];
		basePosition.top += atOffset[ 1 ];

		return this.each(function() {
			var collisionPosition, using,
				elem = $( this ),
				elemWidth = elem.outerWidth(),
				elemHeight = elem.outerHeight(),
				marginLeft = parseCss( this, "marginLeft" ),
				marginTop = parseCss( this, "marginTop" ),
				collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
				collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
				position = $.extend( {}, basePosition ),
				myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

			if ( options.my[ 0 ] === "right" ) {
				position.left -= elemWidth;
			} else if ( options.my[ 0 ] === "center" ) {
				position.left -= elemWidth / 2;
			}

			if ( options.my[ 1 ] === "bottom" ) {
				position.top -= elemHeight;
			} else if ( options.my[ 1 ] === "center" ) {
				position.top -= elemHeight / 2;
			}

			position.left += myOffset[ 0 ];
			position.top += myOffset[ 1 ];

			// if the browser doesn't support fractions, then round for consistent results
			if ( !$.support.offsetFractions ) {
				position.left = round( position.left );
				position.top = round( position.top );
			}

			collisionPosition = {
				marginLeft: marginLeft,
				marginTop: marginTop
			};

			$.each( [ "left", "top" ], function( i, dir ) {
				if ( $.ui.position[ collision[ i ] ] ) {
					$.ui.position[ collision[ i ] ][ dir ]( position, {
						targetWidth: targetWidth,
						targetHeight: targetHeight,
						elemWidth: elemWidth,
						elemHeight: elemHeight,
						collisionPosition: collisionPosition,
						collisionWidth: collisionWidth,
						collisionHeight: collisionHeight,
						offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
						my: options.my,
						at: options.at,
						within: within,
						elem : elem
					});
				}
			});

			if ( options.using ) {
				// adds feedback as second argument to using callback, if present
				using = function( props ) {
					var left = targetOffset.left - position.left,
						right = left + targetWidth - elemWidth,
						top = targetOffset.top - position.top,
						bottom = top + targetHeight - elemHeight,
						feedback = {
							target: {
								element: target,
								left: targetOffset.left,
								top: targetOffset.top,
								width: targetWidth,
								height: targetHeight
							},
							element: {
								element: elem,
								left: position.left,
								top: position.top,
								width: elemWidth,
								height: elemHeight
							},
							horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
							vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
						};
					if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
						feedback.horizontal = "center";
					}
					if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
						feedback.vertical = "middle";
					}
					if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
						feedback.important = "horizontal";
					} else {
						feedback.important = "vertical";
					}
					options.using.call( this, props, feedback );
				};
			}

			elem.offset( $.extend( position, { using: using } ) );
		});
	};

	$.ui.position = {
		fit: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
					outerWidth = within.width,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = withinOffset - collisionPosLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
					newOverRight;

				// element is wider than within
				if ( data.collisionWidth > outerWidth ) {
					// element is initially over the left side of within
					if ( overLeft > 0 && overRight <= 0 ) {
						newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
						position.left += overLeft - newOverRight;
					// element is initially over right side of within
					} else if ( overRight > 0 && overLeft <= 0 ) {
						position.left = withinOffset;
					// element is initially over both left and right sides of within
					} else {
						if ( overLeft > overRight ) {
							position.left = withinOffset + outerWidth - data.collisionWidth;
						} else {
							position.left = withinOffset;
						}
					}
				// too far left -> align with left edge
				} else if ( overLeft > 0 ) {
					position.left += overLeft;
				// too far right -> align with right edge
				} else if ( overRight > 0 ) {
					position.left -= overRight;
				// adjust based on position and margin
				} else {
					position.left = max( position.left - collisionPosLeft, position.left );
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
					outerHeight = data.within.height,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = withinOffset - collisionPosTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
					newOverBottom;

				// element is taller than within
				if ( data.collisionHeight > outerHeight ) {
					// element is initially over the top of within
					if ( overTop > 0 && overBottom <= 0 ) {
						newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
						position.top += overTop - newOverBottom;
					// element is initially over bottom of within
					} else if ( overBottom > 0 && overTop <= 0 ) {
						position.top = withinOffset;
					// element is initially over both top and bottom of within
					} else {
						if ( overTop > overBottom ) {
							position.top = withinOffset + outerHeight - data.collisionHeight;
						} else {
							position.top = withinOffset;
						}
					}
				// too far up -> align with top
				} else if ( overTop > 0 ) {
					position.top += overTop;
				// too far down -> align with bottom edge
				} else if ( overBottom > 0 ) {
					position.top -= overBottom;
				// adjust based on position and margin
				} else {
					position.top = max( position.top - collisionPosTop, position.top );
				}
			}
		},
		flip: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.left + within.scrollLeft,
					outerWidth = within.width,
					offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = collisionPosLeft - offsetLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
					myOffset = data.my[ 0 ] === "left" ?
						-data.elemWidth :
						data.my[ 0 ] === "right" ?
							data.elemWidth :
							0,
					atOffset = data.at[ 0 ] === "left" ?
						data.targetWidth :
						data.at[ 0 ] === "right" ?
							-data.targetWidth :
							0,
					offset = -2 * data.offset[ 0 ],
					newOverRight,
					newOverLeft;

				if ( overLeft < 0 ) {
					newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
					if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
						position.left += myOffset + atOffset + offset;
					}
				}
				else if ( overRight > 0 ) {
					newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
					if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
						position.left += myOffset + atOffset + offset;
					}
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.top + within.scrollTop,
					outerHeight = within.height,
					offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = collisionPosTop - offsetTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
					top = data.my[ 1 ] === "top",
					myOffset = top ?
						-data.elemHeight :
						data.my[ 1 ] === "bottom" ?
							data.elemHeight :
							0,
					atOffset = data.at[ 1 ] === "top" ?
						data.targetHeight :
						data.at[ 1 ] === "bottom" ?
							-data.targetHeight :
							0,
					offset = -2 * data.offset[ 1 ],
					newOverTop,
					newOverBottom;
				if ( overTop < 0 ) {
					newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
					if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
				else if ( overBottom > 0 ) {
					newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
					if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
			}
		},
		flipfit: {
			left: function() {
				$.ui.position.flip.left.apply( this, arguments );
				$.ui.position.fit.left.apply( this, arguments );
			},
			top: function() {
				$.ui.position.flip.top.apply( this, arguments );
				$.ui.position.fit.top.apply( this, arguments );
			}
		}
	};

	// fraction support test
	(function () {
		var testElement, testElementParent, testElementStyle, offsetLeft, i,
			body = document.getElementsByTagName( "body" )[ 0 ],
			div = document.createElement( "div" );

		//Create a "fake body" for testing based on method used in jQuery.support
		testElement = document.createElement( body ? "div" : "body" );
		testElementStyle = {
			visibility: "hidden",
			width: 0,
			height: 0,
			border: 0,
			margin: 0,
			background: "none"
		};
		if ( body ) {
			$.extend( testElementStyle, {
				position: "absolute",
				left: "-1000px",
				top: "-1000px"
			});
		}
		for ( i in testElementStyle ) {
			testElement.style[ i ] = testElementStyle[ i ];
		}
		testElement.appendChild( div );
		testElementParent = body || document.documentElement;
		testElementParent.insertBefore( testElement, testElementParent.firstChild );

		div.style.cssText = "position: absolute; left: 10.7432222px;";

		offsetLeft = $( div ).offset().left;
		$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

		testElement.innerHTML = "";
		testElementParent.removeChild( testElement );
	})();

	}( jQuery ) );

	(function( $, undefined ) {

	$.widget( "ui.progressbar", {
		version: "1.10.3",
		options: {
			max: 100,
			value: 0,

			change: null,
			complete: null
		},

		min: 0,

		_create: function() {
			// Constrain initial value
			this.oldValue = this.options.value = this._constrainedValue();

			this.element
				.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.attr({
					// Only set static values, aria-valuenow and aria-valuemax are
					// set inside _refreshValue()
					role: "progressbar",
					"aria-valuemin": this.min
				});

			this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
				.appendTo( this.element );

			this._refreshValue();
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );

			this.valueDiv.remove();
		},

		value: function( newValue ) {
			if ( newValue === undefined ) {
				return this.options.value;
			}

			this.options.value = this._constrainedValue( newValue );
			this._refreshValue();
		},

		_constrainedValue: function( newValue ) {
			if ( newValue === undefined ) {
				newValue = this.options.value;
			}

			this.indeterminate = newValue === false;

			// sanitize value
			if ( typeof newValue !== "number" ) {
				newValue = 0;
			}

			return this.indeterminate ? false :
				Math.min( this.options.max, Math.max( this.min, newValue ) );
		},

		_setOptions: function( options ) {
			// Ensure "value" option is set after other values (like max)
			var value = options.value;
			delete options.value;

			this._super( options );

			this.options.value = this._constrainedValue( value );
			this._refreshValue();
		},

		_setOption: function( key, value ) {
			if ( key === "max" ) {
				// Don't allow a max less than min
				value = Math.max( this.min, value );
			}

			this._super( key, value );
		},

		_percentage: function() {
			return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
		},

		_refreshValue: function() {
			var value = this.options.value,
				percentage = this._percentage();

			this.valueDiv
				.toggle( this.indeterminate || value > this.min )
				.toggleClass( "ui-corner-right", value === this.options.max )
				.width( percentage.toFixed(0) + "%" );

			this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

			if ( this.indeterminate ) {
				this.element.removeAttr( "aria-valuenow" );
				if ( !this.overlayDiv ) {
					this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
				}
			} else {
				this.element.attr({
					"aria-valuemax": this.options.max,
					"aria-valuenow": value
				});
				if ( this.overlayDiv ) {
					this.overlayDiv.remove();
					this.overlayDiv = null;
				}
			}

			if ( this.oldValue !== value ) {
				this.oldValue = value;
				this._trigger( "change" );
			}
			if ( value === this.options.max ) {
				this._trigger( "complete" );
			}
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	// number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	var numPages = 5;

	$.widget( "ui.slider", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "slide",

		options: {
			animate: false,
			distance: 0,
			max: 100,
			min: 0,
			orientation: "horizontal",
			range: false,
			step: 1,
			value: 0,
			values: null,

			// callbacks
			change: null,
			slide: null,
			start: null,
			stop: null
		},

		_create: function() {
			this._keySliding = false;
			this._mouseSliding = false;
			this._animateOff = true;
			this._handleIndex = null;
			this._detectOrientation();
			this._mouseInit();

			this.element
				.addClass( "ui-slider" +
					" ui-slider-" + this.orientation +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all");

			this._refresh();
			this._setOption( "disabled", this.options.disabled );

			this._animateOff = false;
		},

		_refresh: function() {
			this._createRange();
			this._createHandles();
			this._setupEvents();
			this._refreshValue();
		},

		_createHandles: function() {
			var i, handleCount,
				options = this.options,
				existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
				handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
				handles = [];

			handleCount = ( options.values && options.values.length ) || 1;

			if ( existingHandles.length > handleCount ) {
				existingHandles.slice( handleCount ).remove();
				existingHandles = existingHandles.slice( 0, handleCount );
			}

			for ( i = existingHandles.length; i < handleCount; i++ ) {
				handles.push( handle );
			}

			this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

			this.handle = this.handles.eq( 0 );

			this.handles.each(function( i ) {
				$( this ).data( "ui-slider-handle-index", i );
			});
		},

		_createRange: function() {
			var options = this.options,
				classes = "";

			if ( options.range ) {
				if ( options.range === true ) {
					if ( !options.values ) {
						options.values = [ this._valueMin(), this._valueMin() ];
					} else if ( options.values.length && options.values.length !== 2 ) {
						options.values = [ options.values[0], options.values[0] ];
					} else if ( $.isArray( options.values ) ) {
						options.values = options.values.slice(0);
					}
				}

				if ( !this.range || !this.range.length ) {
					this.range = $( "<div></div>" )
						.appendTo( this.element );

					classes = "ui-slider-range" +
					// note: this isn't the most fittingly semantic framework class for this element,
					// but worked best visually with a variety of themes
					" ui-widget-header ui-corner-all";
				} else {
					this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
						// Handle range switching from true to min/max
						.css({
							"left": "",
							"bottom": ""
						});
				}

				this.range.addClass( classes +
					( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
			} else {
				this.range = $([]);
			}
		},

		_setupEvents: function() {
			var elements = this.handles.add( this.range ).filter( "a" );
			this._off( elements );
			this._on( elements, this._handleEvents );
			this._hoverable( elements );
			this._focusable( elements );
		},

		_destroy: function() {
			this.handles.remove();
			this.range.remove();

			this.element
				.removeClass( "ui-slider" +
					" ui-slider-horizontal" +
					" ui-slider-vertical" +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all" );

			this._mouseDestroy();
		},

		_mouseCapture: function( event ) {
			var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
				that = this,
				o = this.options;

			if ( o.disabled ) {
				return false;
			}

			this.elementSize = {
				width: this.element.outerWidth(),
				height: this.element.outerHeight()
			};
			this.elementOffset = this.element.offset();

			position = { x: event.pageX, y: event.pageY };
			normValue = this._normValueFromMouse( position );
			distance = this._valueMax() - this._valueMin() + 1;
			this.handles.each(function( i ) {
				var thisDistance = Math.abs( normValue - that.values(i) );
				if (( distance > thisDistance ) ||
					( distance === thisDistance &&
						(i === that._lastChangedValue || that.values(i) === o.min ))) {
					distance = thisDistance;
					closestHandle = $( this );
					index = i;
				}
			});

			allowed = this._start( event, index );
			if ( allowed === false ) {
				return false;
			}
			this._mouseSliding = true;

			this._handleIndex = index;

			closestHandle
				.addClass( "ui-state-active" )
				.focus();

			offset = closestHandle.offset();
			mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
			this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
				left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
				top: event.pageY - offset.top -
					( closestHandle.height() / 2 ) -
					( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
					( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
					( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
			};

			if ( !this.handles.hasClass( "ui-state-hover" ) ) {
				this._slide( event, index, normValue );
			}
			this._animateOff = true;
			return true;
		},

		_mouseStart: function() {
			return true;
		},

		_mouseDrag: function( event ) {
			var position = { x: event.pageX, y: event.pageY },
				normValue = this._normValueFromMouse( position );

			this._slide( event, this._handleIndex, normValue );

			return false;
		},

		_mouseStop: function( event ) {
			this.handles.removeClass( "ui-state-active" );
			this._mouseSliding = false;

			this._stop( event, this._handleIndex );
			this._change( event, this._handleIndex );

			this._handleIndex = null;
			this._clickOffset = null;
			this._animateOff = false;

			return false;
		},

		_detectOrientation: function() {
			this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
		},

		_normValueFromMouse: function( position ) {
			var pixelTotal,
				pixelMouse,
				percentMouse,
				valueTotal,
				valueMouse;

			if ( this.orientation === "horizontal" ) {
				pixelTotal = this.elementSize.width;
				pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
			} else {
				pixelTotal = this.elementSize.height;
				pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
			}

			percentMouse = ( pixelMouse / pixelTotal );
			if ( percentMouse > 1 ) {
				percentMouse = 1;
			}
			if ( percentMouse < 0 ) {
				percentMouse = 0;
			}
			if ( this.orientation === "vertical" ) {
				percentMouse = 1 - percentMouse;
			}

			valueTotal = this._valueMax() - this._valueMin();
			valueMouse = this._valueMin() + percentMouse * valueTotal;

			return this._trimAlignValue( valueMouse );
		},

		_start: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}
			return this._trigger( "start", event, uiHash );
		},

		_slide: function( event, index, newVal ) {
			var otherVal,
				newValues,
				allowed;

			if ( this.options.values && this.options.values.length ) {
				otherVal = this.values( index ? 0 : 1 );

				if ( ( this.options.values.length === 2 && this.options.range === true ) &&
						( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
					) {
					newVal = otherVal;
				}

				if ( newVal !== this.values( index ) ) {
					newValues = this.values();
					newValues[ index ] = newVal;
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal,
						values: newValues
					} );
					otherVal = this.values( index ? 0 : 1 );
					if ( allowed !== false ) {
						this.values( index, newVal, true );
					}
				}
			} else {
				if ( newVal !== this.value() ) {
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal
					} );
					if ( allowed !== false ) {
						this.value( newVal );
					}
				}
			}
		},

		_stop: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			this._trigger( "stop", event, uiHash );
		},

		_change: function( event, index ) {
			if ( !this._keySliding && !this._mouseSliding ) {
				var uiHash = {
					handle: this.handles[ index ],
					value: this.value()
				};
				if ( this.options.values && this.options.values.length ) {
					uiHash.value = this.values( index );
					uiHash.values = this.values();
				}

				//store the last changed value index for reference when handles overlap
				this._lastChangedValue = index;

				this._trigger( "change", event, uiHash );
			}
		},

		value: function( newValue ) {
			if ( arguments.length ) {
				this.options.value = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, 0 );
				return;
			}

			return this._value();
		},

		values: function( index, newValue ) {
			var vals,
				newValues,
				i;

			if ( arguments.length > 1 ) {
				this.options.values[ index ] = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, index );
				return;
			}

			if ( arguments.length ) {
				if ( $.isArray( arguments[ 0 ] ) ) {
					vals = this.options.values;
					newValues = arguments[ 0 ];
					for ( i = 0; i < vals.length; i += 1 ) {
						vals[ i ] = this._trimAlignValue( newValues[ i ] );
						this._change( null, i );
					}
					this._refreshValue();
				} else {
					if ( this.options.values && this.options.values.length ) {
						return this._values( index );
					} else {
						return this.value();
					}
				}
			} else {
				return this._values();
			}
		},

		_setOption: function( key, value ) {
			var i,
				valsLength = 0;

			if ( key === "range" && this.options.range === true ) {
				if ( value === "min" ) {
					this.options.value = this._values( 0 );
					this.options.values = null;
				} else if ( value === "max" ) {
					this.options.value = this._values( this.options.values.length-1 );
					this.options.values = null;
				}
			}

			if ( $.isArray( this.options.values ) ) {
				valsLength = this.options.values.length;
			}

			$.Widget.prototype._setOption.apply( this, arguments );

			switch ( key ) {
				case "orientation":
					this._detectOrientation();
					this.element
						.removeClass( "ui-slider-horizontal ui-slider-vertical" )
						.addClass( "ui-slider-" + this.orientation );
					this._refreshValue();
					break;
				case "value":
					this._animateOff = true;
					this._refreshValue();
					this._change( null, 0 );
					this._animateOff = false;
					break;
				case "values":
					this._animateOff = true;
					this._refreshValue();
					for ( i = 0; i < valsLength; i += 1 ) {
						this._change( null, i );
					}
					this._animateOff = false;
					break;
				case "min":
				case "max":
					this._animateOff = true;
					this._refreshValue();
					this._animateOff = false;
					break;
				case "range":
					this._animateOff = true;
					this._refresh();
					this._animateOff = false;
					break;
			}
		},

		//internal value getter
		// _value() returns value trimmed by min and max, aligned by step
		_value: function() {
			var val = this.options.value;
			val = this._trimAlignValue( val );

			return val;
		},

		//internal values getter
		// _values() returns array of values trimmed by min and max, aligned by step
		// _values( index ) returns single value trimmed by min and max, aligned by step
		_values: function( index ) {
			var val,
				vals,
				i;

			if ( arguments.length ) {
				val = this.options.values[ index ];
				val = this._trimAlignValue( val );

				return val;
			} else if ( this.options.values && this.options.values.length ) {
				// .slice() creates a copy of the array
				// this copy gets trimmed by min and max and then returned
				vals = this.options.values.slice();
				for ( i = 0; i < vals.length; i+= 1) {
					vals[ i ] = this._trimAlignValue( vals[ i ] );
				}

				return vals;
			} else {
				return [];
			}
		},

		// returns the step-aligned value that val is closest to, between (inclusive) min and max
		_trimAlignValue: function( val ) {
			if ( val <= this._valueMin() ) {
				return this._valueMin();
			}
			if ( val >= this._valueMax() ) {
				return this._valueMax();
			}
			var step = ( this.options.step > 0 ) ? this.options.step : 1,
				valModStep = (val - this._valueMin()) % step,
				alignValue = val - valModStep;

			if ( Math.abs(valModStep) * 2 >= step ) {
				alignValue += ( valModStep > 0 ) ? step : ( -step );
			}

			// Since JavaScript has problems with large floats, round
			// the final value to 5 digits after the decimal point (see #4124)
			return parseFloat( alignValue.toFixed(5) );
		},

		_valueMin: function() {
			return this.options.min;
		},

		_valueMax: function() {
			return this.options.max;
		},

		_refreshValue: function() {
			var lastValPercent, valPercent, value, valueMin, valueMax,
				oRange = this.options.range,
				o = this.options,
				that = this,
				animate = ( !this._animateOff ) ? o.animate : false,
				_set = {};

			if ( this.options.values && this.options.values.length ) {
				this.handles.each(function( i ) {
					valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
					_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
					$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
					if ( that.options.range === true ) {
						if ( that.orientation === "horizontal" ) {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						} else {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						}
					}
					lastValPercent = valPercent;
				});
			} else {
				value = this.value();
				valueMin = this._valueMin();
				valueMax = this._valueMax();
				valPercent = ( valueMax !== valueMin ) ?
						( value - valueMin ) / ( valueMax - valueMin ) * 100 :
						0;
				_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

				if ( oRange === "min" && this.orientation === "horizontal" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "horizontal" ) {
					this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
				if ( oRange === "min" && this.orientation === "vertical" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "vertical" ) {
					this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
			}
		},

		_handleEvents: {
			keydown: function( event ) {
				/*jshint maxcomplexity:25*/
				var allowed, curVal, newVal, step,
					index = $( event.target ).data( "ui-slider-handle-index" );

				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_UP:
					case $.ui.keyCode.PAGE_DOWN:
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						event.preventDefault();
						if ( !this._keySliding ) {
							this._keySliding = true;
							$( event.target ).addClass( "ui-state-active" );
							allowed = this._start( event, index );
							if ( allowed === false ) {
								return;
							}
						}
						break;
				}

				step = this.options.step;
				if ( this.options.values && this.options.values.length ) {
					curVal = newVal = this.values( index );
				} else {
					curVal = newVal = this.value();
				}

				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
						newVal = this._valueMin();
						break;
					case $.ui.keyCode.END:
						newVal = this._valueMax();
						break;
					case $.ui.keyCode.PAGE_UP:
						newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.PAGE_DOWN:
						newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
						if ( curVal === this._valueMax() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal + step );
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						if ( curVal === this._valueMin() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal - step );
						break;
				}

				this._slide( event, index, newVal );
			},
			click: function( event ) {
				event.preventDefault();
			},
			keyup: function( event ) {
				var index = $( event.target ).data( "ui-slider-handle-index" );

				if ( this._keySliding ) {
					this._keySliding = false;
					this._stop( event, index );
					this._change( event, index );
					$( event.target ).removeClass( "ui-state-active" );
				}
			}
		}

	});

	}(jQuery));

	(function( $ ) {

	function modifier( fn ) {
		return function() {
			var previous = this.element.val();
			fn.apply( this, arguments );
			this._refresh();
			if ( previous !== this.element.val() ) {
				this._trigger( "change" );
			}
		};
	}

	$.widget( "ui.spinner", {
		version: "1.10.3",
		defaultElement: "<input>",
		widgetEventPrefix: "spin",
		options: {
			culture: null,
			icons: {
				down: "ui-icon-triangle-1-s",
				up: "ui-icon-triangle-1-n"
			},
			incremental: true,
			max: null,
			min: null,
			numberFormat: null,
			page: 10,
			step: 1,

			change: null,
			spin: null,
			start: null,
			stop: null
		},

		_create: function() {
			// handle string values that need to be parsed
			this._setOption( "max", this.options.max );
			this._setOption( "min", this.options.min );
			this._setOption( "step", this.options.step );

			// format the value, but don't constrain
			this._value( this.element.val(), true );

			this._draw();
			this._on( this._events );
			this._refresh();

			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},

		_getCreateOptions: function() {
			var options = {},
				element = this.element;

			$.each( [ "min", "max", "step" ], function( i, option ) {
				var value = element.attr( option );
				if ( value !== undefined && value.length ) {
					options[ option ] = value;
				}
			});

			return options;
		},

		_events: {
			keydown: function( event ) {
				if ( this._start( event ) && this._keydown( event ) ) {
					event.preventDefault();
				}
			},
			keyup: "_stop",
			focus: function() {
				this.previous = this.element.val();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				this._stop();
				this._refresh();
				if ( this.previous !== this.element.val() ) {
					this._trigger( "change", event );
				}
			},
			mousewheel: function( event, delta ) {
				if ( !delta ) {
					return;
				}
				if ( !this.spinning && !this._start( event ) ) {
					return false;
				}

				this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
				clearTimeout( this.mousewheelTimer );
				this.mousewheelTimer = this._delay(function() {
					if ( this.spinning ) {
						this._stop( event );
					}
				}, 100 );
				event.preventDefault();
			},
			"mousedown .ui-spinner-button": function( event ) {
				var previous;

				// We never want the buttons to have focus; whenever the user is
				// interacting with the spinner, the focus should be on the input.
				// If the input is focused then this.previous is properly set from
				// when the input first received focus. If the input is not focused
				// then we need to set this.previous based on the value before spinning.
				previous = this.element[0] === this.document[0].activeElement ?
					this.previous : this.element.val();
				function checkFocus() {
					var isActive = this.element[0] === this.document[0].activeElement;
					if ( !isActive ) {
						this.element.focus();
						this.previous = previous;
						// support: IE
						// IE sets focus asynchronously, so we need to check if focus
						// moved off of the input because the user clicked on the button.
						this._delay(function() {
							this.previous = previous;
						});
					}
				}

				// ensure focus is on (or stays on) the text field
				event.preventDefault();
				checkFocus.call( this );

				// support: IE
				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				// and check (again) if focus moved off of the input.
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
					checkFocus.call( this );
				});

				if ( this._start( event ) === false ) {
					return;
				}

				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			"mouseup .ui-spinner-button": "_stop",
			"mouseenter .ui-spinner-button": function( event ) {
				// button will add ui-state-active if mouse was down while mouseleave and kept down
				if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
					return;
				}

				if ( this._start( event ) === false ) {
					return false;
				}
				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			// TODO: do we really want to consider this a stop?
			// shouldn't we just stop the repeater and wait until mouseup before
			// we trigger the stop event?
			"mouseleave .ui-spinner-button": "_stop"
		},

		_draw: function() {
			var uiSpinner = this.uiSpinner = this.element
				.addClass( "ui-spinner-input" )
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()
					// add buttons
					.append( this._buttonHtml() );

			this.element.attr( "role", "spinbutton" );

			// button bindings
			this.buttons = uiSpinner.find( ".ui-spinner-button" )
				.attr( "tabIndex", -1 )
				.button()
				.removeClass( "ui-corner-all" );

			// IE 6 doesn't understand height: 50% for the buttons
			// unless the wrapper has an explicit height
			if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
					uiSpinner.height() > 0 ) {
				uiSpinner.height( uiSpinner.height() );
			}

			// disable spinner if element was already disabled
			if ( this.options.disabled ) {
				this.disable();
			}
		},

		_keydown: function( event ) {
			var options = this.options,
				keyCode = $.ui.keyCode;

			switch ( event.keyCode ) {
			case keyCode.UP:
				this._repeat( null, 1, event );
				return true;
			case keyCode.DOWN:
				this._repeat( null, -1, event );
				return true;
			case keyCode.PAGE_UP:
				this._repeat( null, options.page, event );
				return true;
			case keyCode.PAGE_DOWN:
				this._repeat( null, -options.page, event );
				return true;
			}

			return false;
		},

		_uiSpinnerHtml: function() {
			return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
		},

		_buttonHtml: function() {
			return "" +
				"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
					"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
				"</a>" +
				"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
					"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
				"</a>";
		},

		_start: function( event ) {
			if ( !this.spinning && this._trigger( "start", event ) === false ) {
				return false;
			}

			if ( !this.counter ) {
				this.counter = 1;
			}
			this.spinning = true;
			return true;
		},

		_repeat: function( i, steps, event ) {
			i = i || 500;

			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				this._repeat( 40, steps, event );
			}, i );

			this._spin( steps * this.options.step, event );
		},

		_spin: function( step, event ) {
			var value = this.value() || 0;

			if ( !this.counter ) {
				this.counter = 1;
			}

			value = this._adjustValue( value + step * this._increment( this.counter ) );

			if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
				this._value( value );
				this.counter++;
			}
		},

		_increment: function( i ) {
			var incremental = this.options.incremental;

			if ( incremental ) {
				return $.isFunction( incremental ) ?
					incremental( i ) :
					Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
			}

			return 1;
		},

		_precision: function() {
			var precision = this._precisionOf( this.options.step );
			if ( this.options.min !== null ) {
				precision = Math.max( precision, this._precisionOf( this.options.min ) );
			}
			return precision;
		},

		_precisionOf: function( num ) {
			var str = num.toString(),
				decimal = str.indexOf( "." );
			return decimal === -1 ? 0 : str.length - decimal - 1;
		},

		_adjustValue: function( value ) {
			var base, aboveMin,
				options = this.options;

			// make sure we're at a valid step
			// - find out where we are relative to the base (min or 0)
			base = options.min !== null ? options.min : 0;
			aboveMin = value - base;
			// - round to the nearest step
			aboveMin = Math.round(aboveMin / options.step) * options.step;
			// - rounding is based on 0, so adjust back to our base
			value = base + aboveMin;

			// fix precision from bad JS floating point math
			value = parseFloat( value.toFixed( this._precision() ) );

			// clamp the value
			if ( options.max !== null && value > options.max) {
				return options.max;
			}
			if ( options.min !== null && value < options.min ) {
				return options.min;
			}

			return value;
		},

		_stop: function( event ) {
			if ( !this.spinning ) {
				return;
			}

			clearTimeout( this.timer );
			clearTimeout( this.mousewheelTimer );
			this.counter = 0;
			this.spinning = false;
			this._trigger( "stop", event );
		},

		_setOption: function( key, value ) {
			if ( key === "culture" || key === "numberFormat" ) {
				var prevValue = this._parse( this.element.val() );
				this.options[ key ] = value;
				this.element.val( this._format( prevValue ) );
				return;
			}

			if ( key === "max" || key === "min" || key === "step" ) {
				if ( typeof value === "string" ) {
					value = this._parse( value );
				}
			}
			if ( key === "icons" ) {
				this.buttons.first().find( ".ui-icon" )
					.removeClass( this.options.icons.up )
					.addClass( value.up );
				this.buttons.last().find( ".ui-icon" )
					.removeClass( this.options.icons.down )
					.addClass( value.down );
			}

			this._super( key, value );

			if ( key === "disabled" ) {
				if ( value ) {
					this.element.prop( "disabled", true );
					this.buttons.button( "disable" );
				} else {
					this.element.prop( "disabled", false );
					this.buttons.button( "enable" );
				}
			}
		},

		_setOptions: modifier(function( options ) {
			this._super( options );
			this._value( this.element.val() );
		}),

		_parse: function( val ) {
			if ( typeof val === "string" && val !== "" ) {
				val = window.Globalize && this.options.numberFormat ?
					Globalize.parseFloat( val, 10, this.options.culture ) : +val;
			}
			return val === "" || isNaN( val ) ? null : val;
		},

		_format: function( value ) {
			if ( value === "" ) {
				return "";
			}
			return window.Globalize && this.options.numberFormat ?
				Globalize.format( value, this.options.numberFormat, this.options.culture ) :
				value;
		},

		_refresh: function() {
			this.element.attr({
				"aria-valuemin": this.options.min,
				"aria-valuemax": this.options.max,
				// TODO: what should we do with values that can't be parsed?
				"aria-valuenow": this._parse( this.element.val() )
			});
		},

		// update the value without triggering change
		_value: function( value, allowAny ) {
			var parsed;
			if ( value !== "" ) {
				parsed = this._parse( value );
				if ( parsed !== null ) {
					if ( !allowAny ) {
						parsed = this._adjustValue( parsed );
					}
					value = this._format( parsed );
				}
			}
			this.element.val( value );
			this._refresh();
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-spinner-input" )
				.prop( "disabled", false )
				.removeAttr( "autocomplete" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );
			this.uiSpinner.replaceWith( this.element );
		},

		stepUp: modifier(function( steps ) {
			this._stepUp( steps );
		}),
		_stepUp: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * this.options.step );
				this._stop();
			}
		},

		stepDown: modifier(function( steps ) {
			this._stepDown( steps );
		}),
		_stepDown: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * -this.options.step );
				this._stop();
			}
		},

		pageUp: modifier(function( pages ) {
			this._stepUp( (pages || 1) * this.options.page );
		}),

		pageDown: modifier(function( pages ) {
			this._stepDown( (pages || 1) * this.options.page );
		}),

		value: function( newVal ) {
			if ( !arguments.length ) {
				return this._parse( this.element.val() );
			}
			modifier( this._value ).call( this, newVal );
		},

		widget: function() {
			return this.uiSpinner;
		}
	});

	}( jQuery ) );

	(function( $, undefined ) {

	var tabId = 0,
		rhash = /#.*$/;

	function getNextTabId() {
		return ++tabId;
	}

	function isLocal( anchor ) {
		return anchor.hash.length > 1 &&
			decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
				decodeURIComponent( location.href.replace( rhash, "" ) );
	}

	$.widget( "ui.tabs", {
		version: "1.10.3",
		delay: 300,
		options: {
			active: null,
			collapsible: false,
			event: "click",
			heightStyle: "content",
			hide: null,
			show: null,

			// callbacks
			activate: null,
			beforeActivate: null,
			beforeLoad: null,
			load: null
		},

		_create: function() {
			var that = this,
				options = this.options;

			this.running = false;

			this.element
				.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
				.toggleClass( "ui-tabs-collapsible", options.collapsible )
				// Prevent users from focusing disabled tabs via click
				.delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
					if ( $( this ).is( ".ui-state-disabled" ) ) {
						event.preventDefault();
					}
				})
				// support: IE <9
				// Preventing the default action in mousedown doesn't prevent IE
				// from focusing the element, so if the anchor gets focused, blur.
				// We don't have to worry about focusing the previously focused
				// element since clicking on a non-focusable element should focus
				// the body anyway.
				.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
					if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
						this.blur();
					}
				});

			this._processTabs();
			options.active = this._initialActive();

			// Take disabling tabs via class attribute from HTML
			// into account and update option properly.
			if ( $.isArray( options.disabled ) ) {
				options.disabled = $.unique( options.disabled.concat(
					$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
						return that.tabs.index( li );
					})
				) ).sort();
			}

			// check for length avoids error when initializing empty list
			if ( this.options.active !== false && this.anchors.length ) {
				this.active = this._findActive( options.active );
			} else {
				this.active = $();
			}

			this._refresh();

			if ( this.active.length ) {
				this.load( options.active );
			}
		},

		_initialActive: function() {
			var active = this.options.active,
				collapsible = this.options.collapsible,
				locationHash = location.hash.substring( 1 );

			if ( active === null ) {
				// check the fragment identifier in the URL
				if ( locationHash ) {
					this.tabs.each(function( i, tab ) {
						if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
							active = i;
							return false;
						}
					});
				}

				// check for a tab marked active via a class
				if ( active === null ) {
					active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
				}

				// no active tab, set to false
				if ( active === null || active === -1 ) {
					active = this.tabs.length ? 0 : false;
				}
			}

			// handle numbers: negative, out of range
			if ( active !== false ) {
				active = this.tabs.index( this.tabs.eq( active ) );
				if ( active === -1 ) {
					active = collapsible ? false : 0;
				}
			}

			// don't allow collapsible: false and active: false
			if ( !collapsible && active === false && this.anchors.length ) {
				active = 0;
			}

			return active;
		},

		_getCreateEventData: function() {
			return {
				tab: this.active,
				panel: !this.active.length ? $() : this._getPanelForTab( this.active )
			};
		},

		_tabKeydown: function( event ) {
			/*jshint maxcomplexity:15*/
			var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
				selectedIndex = this.tabs.index( focusedTab ),
				goingForward = true;

			if ( this._handlePageNav( event ) ) {
				return;
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
					selectedIndex++;
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.LEFT:
					goingForward = false;
					selectedIndex--;
					break;
				case $.ui.keyCode.END:
					selectedIndex = this.anchors.length - 1;
					break;
				case $.ui.keyCode.HOME:
					selectedIndex = 0;
					break;
				case $.ui.keyCode.SPACE:
					// Activate only, no collapsing
					event.preventDefault();
					clearTimeout( this.activating );
					this._activate( selectedIndex );
					return;
				case $.ui.keyCode.ENTER:
					// Toggle (cancel delayed activation, allow collapsing)
					event.preventDefault();
					clearTimeout( this.activating );
					// Determine if we should collapse or activate
					this._activate( selectedIndex === this.options.active ? false : selectedIndex );
					return;
				default:
					return;
			}

			// Focus the appropriate tab, based on which key was pressed
			event.preventDefault();
			clearTimeout( this.activating );
			selectedIndex = this._focusNextTab( selectedIndex, goingForward );

			// Navigating with control key will prevent automatic activation
			if ( !event.ctrlKey ) {
				// Update aria-selected immediately so that AT think the tab is already selected.
				// Otherwise AT may confuse the user by stating that they need to activate the tab,
				// but the tab will already be activated by the time the announcement finishes.
				focusedTab.attr( "aria-selected", "false" );
				this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

				this.activating = this._delay(function() {
					this.option( "active", selectedIndex );
				}, this.delay );
			}
		},

		_panelKeydown: function( event ) {
			if ( this._handlePageNav( event ) ) {
				return;
			}

			// Ctrl+up moves focus to the current tab
			if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
				event.preventDefault();
				this.active.focus();
			}
		},

		// Alt+page up/down moves focus to the previous/next tab (and activates)
		_handlePageNav: function( event ) {
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
				this._activate( this._focusNextTab( this.options.active - 1, false ) );
				return true;
			}
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
				this._activate( this._focusNextTab( this.options.active + 1, true ) );
				return true;
			}
		},

		_findNextTab: function( index, goingForward ) {
			var lastTabIndex = this.tabs.length - 1;

			function constrain() {
				if ( index > lastTabIndex ) {
					index = 0;
				}
				if ( index < 0 ) {
					index = lastTabIndex;
				}
				return index;
			}

			while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
				index = goingForward ? index + 1 : index - 1;
			}

			return index;
		},

		_focusNextTab: function( index, goingForward ) {
			index = this._findNextTab( index, goingForward );
			this.tabs.eq( index ).focus();
			return index;
		},

		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}

			if ( key === "disabled" ) {
				// don't use the widget factory's disabled handling
				this._setupDisabled( value );
				return;
			}

			this._super( key, value);

			if ( key === "collapsible" ) {
				this.element.toggleClass( "ui-tabs-collapsible", value );
				// Setting collapsible: false while collapsed; open first panel
				if ( !value && this.options.active === false ) {
					this._activate( 0 );
				}
			}

			if ( key === "event" ) {
				this._setupEvents( value );
			}

			if ( key === "heightStyle" ) {
				this._setupHeightStyle( value );
			}
		},

		_tabId: function( tab ) {
			return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
		},

		_sanitizeSelector: function( hash ) {
			return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
		},

		refresh: function() {
			var options = this.options,
				lis = this.tablist.children( ":has(a[href])" );

			// get disabled tabs from class attribute from HTML
			// this will get converted to a boolean if needed in _refresh()
			options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
				return lis.index( tab );
			});

			this._processTabs();

			// was collapsed or no tabs
			if ( options.active === false || !this.anchors.length ) {
				options.active = false;
				this.active = $();
			// was active, but active tab is gone
			} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
				// all remaining tabs are disabled
				if ( this.tabs.length === options.disabled.length ) {
					options.active = false;
					this.active = $();
				// activate previous tab
				} else {
					this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
				}
			// was active, active tab still exists
			} else {
				// make sure active index is correct
				options.active = this.tabs.index( this.active );
			}

			this._refresh();
		},

		_refresh: function() {
			this._setupDisabled( this.options.disabled );
			this._setupEvents( this.options.event );
			this._setupHeightStyle( this.options.heightStyle );

			this.tabs.not( this.active ).attr({
				"aria-selected": "false",
				tabIndex: -1
			});
			this.panels.not( this._getPanelForTab( this.active ) )
				.hide()
				.attr({
					"aria-expanded": "false",
					"aria-hidden": "true"
				});

			// Make sure one tab is in the tab order
			if ( !this.active.length ) {
				this.tabs.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active
					.addClass( "ui-tabs-active ui-state-active" )
					.attr({
						"aria-selected": "true",
						tabIndex: 0
					});
				this._getPanelForTab( this.active )
					.show()
					.attr({
						"aria-expanded": "true",
						"aria-hidden": "false"
					});
			}
		},

		_processTabs: function() {
			var that = this;

			this.tablist = this._getList()
				.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.attr( "role", "tablist" );

			this.tabs = this.tablist.find( "> li:has(a[href])" )
				.addClass( "ui-state-default ui-corner-top" )
				.attr({
					role: "tab",
					tabIndex: -1
				});

			this.anchors = this.tabs.map(function() {
					return $( "a", this )[ 0 ];
				})
				.addClass( "ui-tabs-anchor" )
				.attr({
					role: "presentation",
					tabIndex: -1
				});

			this.panels = $();

			this.anchors.each(function( i, anchor ) {
				var selector, panel, panelId,
					anchorId = $( anchor ).uniqueId().attr( "id" ),
					tab = $( anchor ).closest( "li" ),
					originalAriaControls = tab.attr( "aria-controls" );

				// inline tab
				if ( isLocal( anchor ) ) {
					selector = anchor.hash;
					panel = that.element.find( that._sanitizeSelector( selector ) );
				// remote tab
				} else {
					panelId = that._tabId( tab );
					selector = "#" + panelId;
					panel = that.element.find( selector );
					if ( !panel.length ) {
						panel = that._createPanel( panelId );
						panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
					}
					panel.attr( "aria-live", "polite" );
				}

				if ( panel.length) {
					that.panels = that.panels.add( panel );
				}
				if ( originalAriaControls ) {
					tab.data( "ui-tabs-aria-controls", originalAriaControls );
				}
				tab.attr({
					"aria-controls": selector.substring( 1 ),
					"aria-labelledby": anchorId
				});
				panel.attr( "aria-labelledby", anchorId );
			});

			this.panels
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.attr( "role", "tabpanel" );
		},

		// allow overriding how to find the list for rare usage scenarios (#7715)
		_getList: function() {
			return this.element.find( "ol,ul" ).eq( 0 );
		},

		_createPanel: function( id ) {
			return $( "<div>" )
				.attr( "id", id )
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.data( "ui-tabs-destroy", true );
		},

		_setupDisabled: function( disabled ) {
			if ( $.isArray( disabled ) ) {
				if ( !disabled.length ) {
					disabled = false;
				} else if ( disabled.length === this.anchors.length ) {
					disabled = true;
				}
			}

			// disable tabs
			for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
				if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
					$( li )
						.addClass( "ui-state-disabled" )
						.attr( "aria-disabled", "true" );
				} else {
					$( li )
						.removeClass( "ui-state-disabled" )
						.removeAttr( "aria-disabled" );
				}
			}

			this.options.disabled = disabled;
		},

		_setupEvents: function( event ) {
			var events = {
				click: function( event ) {
					event.preventDefault();
				}
			};
			if ( event ) {
				$.each( event.split(" "), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}

			this._off( this.anchors.add( this.tabs ).add( this.panels ) );
			this._on( this.anchors, events );
			this._on( this.tabs, { keydown: "_tabKeydown" } );
			this._on( this.panels, { keydown: "_panelKeydown" } );

			this._focusable( this.tabs );
			this._hoverable( this.tabs );
		},

		_setupHeightStyle: function( heightStyle ) {
			var maxHeight,
				parent = this.element.parent();

			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				maxHeight -= this.element.outerHeight() - this.element.height();

				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );

					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});

				this.element.children().not( this.panels ).each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});

				this.panels.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.panels.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				}).height( maxHeight );
			}
		},

		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				anchor = $( event.currentTarget ),
				tab = anchor.closest( "li" ),
				clickedIsActive = tab[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : this._getPanelForTab( tab ),
				toHide = !active.length ? $() : this._getPanelForTab( active ),
				eventData = {
					oldTab: active,
					oldPanel: toHide,
					newTab: collapsing ? $() : tab,
					newPanel: toShow
				};

			event.preventDefault();

			if ( tab.hasClass( "ui-state-disabled" ) ||
					// tab is already loading
					tab.hasClass( "ui-tabs-loading" ) ||
					// can't switch durning an animation
					this.running ||
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}

			options.active = collapsing ? false : this.tabs.index( tab );

			this.active = clickedIsActive ? $() : tab;
			if ( this.xhr ) {
				this.xhr.abort();
			}

			if ( !toHide.length && !toShow.length ) {
				$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
			}

			if ( toShow.length ) {
				this.load( this.tabs.index( tab ), event );
			}
			this._toggle( event, eventData );
		},

		// handles show/hide for selecting tabs
		_toggle: function( event, eventData ) {
			var that = this,
				toShow = eventData.newPanel,
				toHide = eventData.oldPanel;

			this.running = true;

			function complete() {
				that.running = false;
				that._trigger( "activate", event, eventData );
			}

			function show() {
				eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

				if ( toShow.length && that.options.show ) {
					that._show( toShow, that.options.show, complete );
				} else {
					toShow.show();
					complete();
				}
			}

			// start out by hiding, then showing, then completing
			if ( toHide.length && this.options.hide ) {
				this._hide( toHide, this.options.hide, function() {
					eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
					show();
				});
			} else {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
				toHide.hide();
				show();
			}

			toHide.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});
			eventData.oldTab.attr( "aria-selected", "false" );
			// If we're switching tabs, remove the old tab from the tab order.
			// If we're opening from collapsed state, remove the previous tab from the tab order.
			// If we're collapsing, then keep the collapsing tab in the tab order.
			if ( toShow.length && toHide.length ) {
				eventData.oldTab.attr( "tabIndex", -1 );
			} else if ( toShow.length ) {
				this.tabs.filter(function() {
					return $( this ).attr( "tabIndex" ) === 0;
				})
				.attr( "tabIndex", -1 );
			}

			toShow.attr({
				"aria-expanded": "true",
				"aria-hidden": "false"
			});
			eventData.newTab.attr({
				"aria-selected": "true",
				tabIndex: 0
			});
		},

		_activate: function( index ) {
			var anchor,
				active = this._findActive( index );

			// trying to activate the already active panel
			if ( active[ 0 ] === this.active[ 0 ] ) {
				return;
			}

			// trying to collapse, simulate a click on the current active header
			if ( !active.length ) {
				active = this.active;
			}

			anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
			this._eventHandler({
				target: anchor,
				currentTarget: anchor,
				preventDefault: $.noop
			});
		},

		_findActive: function( index ) {
			return index === false ? $() : this.tabs.eq( index );
		},

		_getIndex: function( index ) {
			// meta-function to give users option to provide a href string instead of a numerical index.
			if ( typeof index === "string" ) {
				index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
			}

			return index;
		},

		_destroy: function() {
			if ( this.xhr ) {
				this.xhr.abort();
			}

			this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

			this.tablist
				.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.removeAttr( "role" );

			this.anchors
				.removeClass( "ui-tabs-anchor" )
				.removeAttr( "role" )
				.removeAttr( "tabIndex" )
				.removeUniqueId();

			this.tabs.add( this.panels ).each(function() {
				if ( $.data( this, "ui-tabs-destroy" ) ) {
					$( this ).remove();
				} else {
					$( this )
						.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
							"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
						.removeAttr( "tabIndex" )
						.removeAttr( "aria-live" )
						.removeAttr( "aria-busy" )
						.removeAttr( "aria-selected" )
						.removeAttr( "aria-labelledby" )
						.removeAttr( "aria-hidden" )
						.removeAttr( "aria-expanded" )
						.removeAttr( "role" );
				}
			});

			this.tabs.each(function() {
				var li = $( this ),
					prev = li.data( "ui-tabs-aria-controls" );
				if ( prev ) {
					li
						.attr( "aria-controls", prev )
						.removeData( "ui-tabs-aria-controls" );
				} else {
					li.removeAttr( "aria-controls" );
				}
			});

			this.panels.show();

			if ( this.options.heightStyle !== "content" ) {
				this.panels.css( "height", "" );
			}
		},

		enable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === false ) {
				return;
			}

			if ( index === undefined ) {
				disabled = false;
			} else {
				index = this._getIndex( index );
				if ( $.isArray( disabled ) ) {
					disabled = $.map( disabled, function( num ) {
						return num !== index ? num : null;
					});
				} else {
					disabled = $.map( this.tabs, function( li, num ) {
						return num !== index ? num : null;
					});
				}
			}
			this._setupDisabled( disabled );
		},

		disable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === true ) {
				return;
			}

			if ( index === undefined ) {
				disabled = true;
			} else {
				index = this._getIndex( index );
				if ( $.inArray( index, disabled ) !== -1 ) {
					return;
				}
				if ( $.isArray( disabled ) ) {
					disabled = $.merge( [ index ], disabled ).sort();
				} else {
					disabled = [ index ];
				}
			}
			this._setupDisabled( disabled );
		},

		load: function( index, event ) {
			index = this._getIndex( index );
			var that = this,
				tab = this.tabs.eq( index ),
				anchor = tab.find( ".ui-tabs-anchor" ),
				panel = this._getPanelForTab( tab ),
				eventData = {
					tab: tab,
					panel: panel
				};

			// not remote
			if ( isLocal( anchor[ 0 ] ) ) {
				return;
			}

			this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

			// support: jQuery <1.8
			// jQuery <1.8 returns false if the request is canceled in beforeSend,
			// but as of 1.8, $.ajax() always returns a jqXHR object.
			if ( this.xhr && this.xhr.statusText !== "canceled" ) {
				tab.addClass( "ui-tabs-loading" );
				panel.attr( "aria-busy", "true" );

				this.xhr
					.success(function( response ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							panel.html( response );
							that._trigger( "load", event, eventData );
						}, 1 );
					})
					.complete(function( jqXHR, status ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							if ( status === "abort" ) {
								that.panels.stop( false, true );
							}

							tab.removeClass( "ui-tabs-loading" );
							panel.removeAttr( "aria-busy" );

							if ( jqXHR === that.xhr ) {
								delete that.xhr;
							}
						}, 1 );
					});
			}
		},

		_ajaxSettings: function( anchor, event, eventData ) {
			var that = this;
			return {
				url: anchor.attr( "href" ),
				beforeSend: function( jqXHR, settings ) {
					return that._trigger( "beforeLoad", event,
						$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
				}
			};
		},

		_getPanelForTab: function( tab ) {
			var id = $( tab ).attr( "aria-controls" );
			return this.element.find( this._sanitizeSelector( "#" + id ) );
		}
	});

	})( jQuery );

	(function( $ ) {

	var increments = 0;

	function addDescribedBy( elem, id ) {
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	}

	function removeDescribedBy( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
			index = $.inArray( id, describedby );
		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	}

	$.widget( "ui.tooltip", {
		version: "1.10.3",
		options: {
			content: function() {
				// support: IE<9, Opera in jQuery <1.7
				// .text() can't accept undefined, so coerce to a string
				var title = $( this ).attr( "title" ) || "";
				// Escape title, since we're going from an attribute to raw HTML
				return $( "<a>" ).text( title ).html();
			},
			hide: true,
			// Disabled elements have inconsistent behavior across browsers (#8661)
			items: "[title]:not([disabled])",
			position: {
				my: "left top+15",
				at: "left bottom",
				collision: "flipfit flip"
			},
			show: true,
			tooltipClass: null,
			track: false,

			// callbacks
			close: null,
			open: null
		},

		_create: function() {
			this._on({
				mouseover: "open",
				focusin: "open"
			});

			// IDs of generated tooltips, needed for destroy
			this.tooltips = {};
			// IDs of parent tooltips where we removed the title attribute
			this.parents = {};

			if ( this.options.disabled ) {
				this._disable();
			}
		},

		_setOption: function( key, value ) {
			var that = this;

			if ( key === "disabled" ) {
				this[ value ? "_disable" : "_enable" ]();
				this.options[ key ] = value;
				// disable element style changes
				return;
			}

			this._super( key, value );

			if ( key === "content" ) {
				$.each( this.tooltips, function( id, element ) {
					that._updateContent( element );
				});
			}
		},

		_disable: function() {
			var that = this;

			// close open tooltips
			$.each( this.tooltips, function( id, element ) {
				var event = $.Event( "blur" );
				event.target = event.currentTarget = element[0];
				that.close( event, true );
			});

			// remove title attributes to prevent native tooltips
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.is( "[title]" ) ) {
					element
						.data( "ui-tooltip-title", element.attr( "title" ) )
						.attr( "title", "" );
				}
			});
		},

		_enable: function() {
			// restore title attributes
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.data( "ui-tooltip-title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
			});
		},

		open: function( event ) {
			var that = this,
				target = $( event ? event.target : this.element )
					// we need closest here due to mouseover bubbling,
					// but always pointing at the same event target
					.closest( this.options.items );

			// No element to show a tooltip for or the tooltip is already open
			if ( !target.length || target.data( "ui-tooltip-id" ) ) {
				return;
			}

			if ( target.attr( "title" ) ) {
				target.data( "ui-tooltip-title", target.attr( "title" ) );
			}

			target.data( "ui-tooltip-open", true );

			// kill parent tooltips, custom or native, for hover
			if ( event && event.type === "mouseover" ) {
				target.parents().each(function() {
					var parent = $( this ),
						blurEvent;
					if ( parent.data( "ui-tooltip-open" ) ) {
						blurEvent = $.Event( "blur" );
						blurEvent.target = blurEvent.currentTarget = this;
						that.close( blurEvent, true );
					}
					if ( parent.attr( "title" ) ) {
						parent.uniqueId();
						that.parents[ this.id ] = {
							element: this,
							title: parent.attr( "title" )
						};
						parent.attr( "title", "" );
					}
				});
			}

			this._updateContent( target, event );
		},

		_updateContent: function( target, event ) {
			var content,
				contentOption = this.options.content,
				that = this,
				eventType = event ? event.type : null;

			if ( typeof contentOption === "string" ) {
				return this._open( event, target, contentOption );
			}

			content = contentOption.call( target[0], function( response ) {
				// ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}
				// IE may instantly serve a cached response for ajax requests
				// delay this call to _open so the other call to _open runs first
				that._delay(function() {
					// jQuery creates a special event for focusin when it doesn't
					// exist natively. To improve performance, the native event
					// object is reused and the type is changed. Therefore, we can't
					// rely on the type being correct after the event finished
					// bubbling, so we set it back to the previous value. (#8740)
					if ( event ) {
						event.type = eventType;
					}
					this._open( event, target, response );
				});
			});
			if ( content ) {
				this._open( event, target, content );
			}
		},

		_open: function( event, target, content ) {
			var tooltip, events, delayedShow,
				positionOption = $.extend( {}, this.options.position );

			if ( !content ) {
				return;
			}

			// Content can be updated multiple times. If the tooltip already
			// exists, then just update the content and bail.
			tooltip = this._find( target );
			if ( tooltip.length ) {
				tooltip.find( ".ui-tooltip-content" ).html( content );
				return;
			}

			// if we have a title, clear it to prevent the native tooltip
			// we have to check first to avoid defining a title if none exists
			// (we don't want to cause an element to start matching [title])
			//
			// We use removeAttr only for key events, to allow IE to export the correct
			// accessible attributes. For mouse events, set to empty string to avoid
			// native tooltip showing up (happens only when removing inside mouseover).
			if ( target.is( "[title]" ) ) {
				if ( event && event.type === "mouseover" ) {
					target.attr( "title", "" );
				} else {
					target.removeAttr( "title" );
				}
			}

			tooltip = this._tooltip( target );
			addDescribedBy( target, tooltip.attr( "id" ) );
			tooltip.find( ".ui-tooltip-content" ).html( content );

			function position( event ) {
				positionOption.of = event;
				if ( tooltip.is( ":hidden" ) ) {
					return;
				}
				tooltip.position( positionOption );
			}
			if ( this.options.track && event && /^mouse/.test( event.type ) ) {
				this._on( this.document, {
					mousemove: position
				});
				// trigger once to override element-relative positioning
				position( event );
			} else {
				tooltip.position( $.extend({
					of: target
				}, this.options.position ) );
			}

			tooltip.hide();

			this._show( tooltip, this.options.show );
			// Handle tracking tooltips that are shown with a delay (#8644). As soon
			// as the tooltip is visible, position the tooltip using the most recent
			// event.
			if ( this.options.show && this.options.show.delay ) {
				delayedShow = this.delayedShow = setInterval(function() {
					if ( tooltip.is( ":visible" ) ) {
						position( positionOption.of );
						clearInterval( delayedShow );
					}
				}, $.fx.interval );
			}

			this._trigger( "open", event, { tooltip: tooltip } );

			events = {
				keyup: function( event ) {
					if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
						var fakeEvent = $.Event(event);
						fakeEvent.currentTarget = target[0];
						this.close( fakeEvent, true );
					}
				},
				remove: function() {
					this._removeTooltip( tooltip );
				}
			};
			if ( !event || event.type === "mouseover" ) {
				events.mouseleave = "close";
			}
			if ( !event || event.type === "focusin" ) {
				events.focusout = "close";
			}
			this._on( true, target, events );
		},

		close: function( event ) {
			var that = this,
				target = $( event ? event.currentTarget : this.element ),
				tooltip = this._find( target );

			// disabling closes the tooltip, so we need to track when we're closing
			// to avoid an infinite loop in case the tooltip becomes disabled on close
			if ( this.closing ) {
				return;
			}

			// Clear the interval for delayed tracking tooltips
			clearInterval( this.delayedShow );

			// only set title if we had one before (see comment in _open())
			if ( target.data( "ui-tooltip-title" ) ) {
				target.attr( "title", target.data( "ui-tooltip-title" ) );
			}

			removeDescribedBy( target );

			tooltip.stop( true );
			this._hide( tooltip, this.options.hide, function() {
				that._removeTooltip( $( this ) );
			});

			target.removeData( "ui-tooltip-open" );
			this._off( target, "mouseleave focusout keyup" );
			// Remove 'remove' binding only on delegated targets
			if ( target[0] !== this.element[0] ) {
				this._off( target, "remove" );
			}
			this._off( this.document, "mousemove" );

			if ( event && event.type === "mouseleave" ) {
				$.each( this.parents, function( id, parent ) {
					$( parent.element ).attr( "title", parent.title );
					delete that.parents[ id ];
				});
			}

			this.closing = true;
			this._trigger( "close", event, { tooltip: tooltip } );
			this.closing = false;
		},

		_tooltip: function( element ) {
			var id = "ui-tooltip-" + increments++,
				tooltip = $( "<div>" )
					.attr({
						id: id,
						role: "tooltip"
					})
					.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
						( this.options.tooltipClass || "" ) );
			$( "<div>" )
				.addClass( "ui-tooltip-content" )
				.appendTo( tooltip );
			tooltip.appendTo( this.document[0].body );
			this.tooltips[ id ] = element;
			return tooltip;
		},

		_find: function( target ) {
			var id = target.data( "ui-tooltip-id" );
			return id ? $( "#" + id ) : $();
		},

		_removeTooltip: function( tooltip ) {
			tooltip.remove();
			delete this.tooltips[ tooltip.attr( "id" ) ];
		},

		_destroy: function() {
			var that = this;

			// close open tooltips
			$.each( this.tooltips, function( id, element ) {
				// Delegate to close method to handle common cleanup
				var event = $.Event( "blur" );
				event.target = event.currentTarget = element[0];
				that.close( event, true );

				// Remove immediately; destroying an open tooltip doesn't use the
				// hide animation
				$( "#" + id ).remove();

				// Restore the title
				if ( element.data( "ui-tooltip-title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
					element.removeData( "ui-tooltip-title" );
				}
			});
		}
	});

	}( jQuery ) );


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * This software was developed at the National Institute of Standards and
	 * Technology by employees of the Federal Government in the course of
	 * their official duties. Pursuant to title 17 Section 105 of the United
	 * States Code this software is not subject to copyright protection and is
	 * in the public domain. This software is an experimental system. NIST assumes
	 * no responsibility whatsoever for its use by other parties, and makes no
	 * guarantees, expressed or implied, about its quality, reliability, or
	 * any other characteristic. We would appreciate acknowledgement if the
	 * software is used.
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	    /**
	     * This class is an improvement over the basic jQuery spinner to support
	     * 'Enter' to update the value (with validity checks).
	     * @param {Object} options Options object
	     * @return {Spinner} A spinner object
	     */
	    return function(options) {

	        options.$element.html('<input type="text" size="1" ' +
	            'class="ui-widget-content ui-corner-all"/>');

	        var $spinner = options.$element.find('input');
	        var value = options.init;
	        $spinner.spinner({
	            min: options.min,
	            max: options.max,
	            step: options.step,
	            spin: function(event, ui) {
	                /*jshint unused:true */
	                value = ui.value;
	                options.updateCallback(value);
	            }
	        });
	        $spinner.val(value);
	        $spinner.keyup(function(e) {
	            if (e.which === 13) {
	                if (!this.value.match(/^-?\d?\.?\d*$/)) {
	                    this.value = options.init;
	                } else if (options.min !== undefined &&
	                    this.value < options.min) {
	                    this.value = options.min;
	                } else if (options.max !== undefined &&
	                    this.value > options.max) {
	                    this.value = options.max;
	                }
	                value = this.value;
	                options.updateCallback(value);
	            }
	        });

	        this.getValue = function() {
	            return value;
	        };

	    };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * This software was developed at the National Institute of Standards and
	 * Technology by employees of the Federal Government in the course of
	 * their official duties. Pursuant to title 17 Section 105 of the United
	 * States Code this software is not subject to copyright protection and is
	 * in the public domain. This software is an experimental system. NIST assumes
	 * no responsibility whatsoever for its use by other parties, and makes no
	 * guarantees, expressed or implied, about its quality, reliability, or
	 * any other characteristic. We would appreciate acknowledgement if the
	 * software is used.
	 */

	!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {

	    var idIncrement = 0;

	    return function(options) {

	        this.hash = idIncrement++;

	        var spinnerId = 'wdzt-spinner-slider-spinner-' + this.hash;
	        var sliderId = 'wdzt-spinner-slider-slider-' + this.hash;

	        var value = options.init;


	        options.$element.html(
	            '<div class="wdzt-table-layout wdzt-full-width">' +
	            '    <div class="wdzt-row-layout">' +
	            '        <div class="wdzt-cell-layout">' +
	            '            <input id="' + spinnerId + '" type="text" size="1"' +
	            '                   class="ui-widget-content ui-corner-all"/>' +
	            '        </div>' +
	            '        <div class="wdzt-cell-layout wdzt-full-width">' +
	            '            <div id="' + sliderId + '" class="wdzt-menu-slider">' +
	            '            </div>' +
	            '        </div>' +
	            '    </div>' +
	            '</div>');

	        var $slider = options.$element.find('#' + sliderId)
	            .slider({
	                min: options.min,
	                max: options.sliderMax !== undefined ?
	                    options.sliderMax : options.max,
	                step: options.step,
	                value: value,
	                slide: function(event, ui) {
	                    /*jshint unused:true */
	                    value = ui.value;
	                    $spinner.spinner('value', value);
	                    options.updateCallback(value);
	                }
	            });
	        var $spinner = options.$element.find('#' + spinnerId)
	            .spinner({
	                min: options.min,
	                max: options.max,
	                step: options.step,
	                spin: function(event, ui) {
	                    /*jshint unused:true */
	                    value = ui.value;
	                    $slider.slider('value', value);
	                    options.updateCallback(value);
	                }
	            });
	        $spinner.val(value);
	        $spinner.keyup(function(e) {
	            if (e.which === 13) {
	                value = $spinner.spinner('value');
	                $slider.slider('value', value);
	                options.updateCallback(value);
	            }
	        });


	        this.getValue = function() {
	            return value;
	        };

	    };
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;//! openseadragon 2.1.0
	//! Built on 2015-12-01
	//! Git commit: v2.1.0-3-b2c17b5-dirty
	//! http://openseadragon.github.io
	//! License: http://openseadragon.github.io/license/

	/*
	 * OpenSeadragon
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/*
	 * Portions of this source file taken from jQuery:
	 *
	 * Copyright 2011 John Resig
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */

	/*
	 * Portions of this source file taken from mattsnider.com:
	 *
	 * Copyright (c) 2006-2013 Matt Snider
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included
	 * in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
	 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
	 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */


	/**
	 * @version  openseadragon 2.1.0
	 *
	 * @file
	 * <h2><strong>OpenSeadragon - Javascript Deep Zooming</strong></h2>
	 * <p>
	 * OpenSeadragon provides an html interface for creating
	 * deep zoom user interfaces.  The simplest examples include deep
	 * zoom for large resolution images, and complex examples include
	 * zoomable map interfaces driven by SVG files.
	 * </p>
	 *
	 */

	/**
	 * @module OpenSeadragon
	 *
	 */

	/**
	 * @namespace OpenSeadragon
	 *
	 * @classdesc The root namespace for OpenSeadragon.  All utility methods
	 * and classes are defined on or below this namespace.
	 *
	 */


	// Typedefs

	 /**
	  * All required and optional settings for instantiating a new instance of an OpenSeadragon image viewer.
	  *
	  * @typedef {Object} Options
	  * @memberof OpenSeadragon
	  *
	  * @property {String} id
	  *     Id of the element to append the viewer's container element to. If not provided, the 'element' property must be provided.
	  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
	  *
	  * @property {Element} element
	  *     The element to append the viewer's container element to. If not provided, the 'id' property must be provided.
	  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
	  *
	  * @property {Array|String|Function|Object} [tileSources=null]
	  *     Tile source(s) to open initially. This is a complex parameter; see
	  *     {@link OpenSeadragon.Viewer#open} for details.
	  *
	  * @property {Number} [tabIndex=0]
	  *     Tabbing order index to assign to the viewer element. Positive values are selected in increasing order. When tabIndex is 0
	  *     source order is used. A negative value omits the viewer from the tabbing order.
	  *
	  * @property {Array} overlays Array of objects defining permanent overlays of
	  *     the viewer. The overlays added via this option and later removed with
	  *     {@link OpenSeadragon.Viewer#removeOverlay} will be added back when a new
	  *     image is opened.
	  *     To add overlays which can be definitively removed, one must use
	  *     {@link OpenSeadragon.Viewer#addOverlay}
	  *     If displaying a sequence of images, the overlays can be associated
	  *     with a specific page by passing the overlays array to the page's
	  *     tile source configuration.
	  *     Expected properties:
	  *     * x, y, (or px, py for pixel coordinates) to define the location.
	  *     * width, height in point if using x,y or in pixels if using px,py. If width
	  *       and height are specified, the overlay size is adjusted when zooming,
	  *       otherwise the size stays the size of the content (or the size defined by CSS).
	  *     * className to associate a class to the overlay
	  *     * id to set the overlay element. If an element with this id already exists,
	  *       it is reused, otherwise it is created. If not specified, a new element is
	  *       created.
	  *     * placement a string to define the relative position to the viewport.
	  *       Only used if no width and height are specified. Default: 'TOP_LEFT'.
	  *       See {@link OpenSeadragon.OverlayPlacement} for possible values.
	  *
	  * @property {String} [xmlPath=null]
	  *     <strong>DEPRECATED</strong>. A relative path to load a DZI file from the server.
	  *     Prefer the newer Options.tileSources.
	  *
	  * @property {String} [prefixUrl='/images/']
	  *     Prepends the prefixUrl to navImages paths, which is very useful
	  *     since the default paths are rarely useful for production
	  *     environments.
	  *
	  * @property {OpenSeadragon.NavImages} [navImages]
	  *     An object with a property for each button or other built-in navigation
	  *     control, eg the current 'zoomIn', 'zoomOut', 'home', and 'fullpage'.
	  *     Each of those in turn provides an image path for each state of the button
	  *     or navigation control, eg 'REST', 'GROUP', 'HOVER', 'PRESS'. Finally the
	  *     image paths, by default assume there is a folder on the servers root path
	  *     called '/images', eg '/images/zoomin_rest.png'.  If you need to adjust
	  *     these paths, prefer setting the option.prefixUrl rather than overriding
	  *     every image path directly through this setting.
	  *
	  * @property {Boolean} [debugMode=false]
	  *     TODO: provide an in-screen panel providing event detail feedback.
	  *
	  * @property {String} [debugGridColor='#437AB2']
	  *
	  * @property {Number} [blendTime=0]
	  *     Specifies the duration of animation as higher or lower level tiles are
	  *     replacing the existing tile.
	  *
	  * @property {Boolean} [alwaysBlend=false]
	  *     Forces the tile to always blend.  By default the tiles skip blending
	  *     when the blendTime is surpassed and the current animation frame would
	  *     not complete the blend.
	  *
	  * @property {Boolean} [autoHideControls=true]
	  *     If the user stops interacting with the viewport, fade the navigation
	  *     controls.  Useful for presentation since the controls are by default
	  *     floated on top of the image the user is viewing.
	  *
	  * @property {Boolean} [immediateRender=false]
	  *     Render the best closest level first, ignoring the lowering levels which
	  *     provide the effect of very blurry to sharp. It is recommended to change
	  *     setting to true for mobile devices.
	  *
	  * @property {Number} [defaultZoomLevel=0]
	  *     Zoom level to use when image is first opened or the home button is clicked.
	  *     If 0, adjusts to fit viewer.
	  *
	  * @property {Number} [opacity=1]
	  *     Default opacity of the tiled images (1=opaque, 0=transparent)
	  *
	  * @property {String|CanvasGradient|CanvasPattern|Function} [placeholderFillStyle=null]
	  *     Draws a colored rectangle behind the tile if it is not loaded yet.
	  *     You can pass a CSS color value like "#FF8800".
	  *     When passing a function the tiledImage and canvas context are available as argument which is useful when you draw a gradient or pattern.
	  *
	  * @property {Number} [degrees=0]
	  *     Initial rotation.
	  *
	  * @property {Number} [minZoomLevel=null]
	  *
	  * @property {Number} [maxZoomLevel=null]
	  *
	  * @property {Boolean} [homeFillsViewer=false]
	  *     Make the 'home' button fill the viewer and clip the image, instead
	  *     of fitting the image to the viewer and letterboxing.
	  *
	  * @property {Boolean} [panHorizontal=true]
	  *     Allow horizontal pan.
	  *
	  * @property {Boolean} [panVertical=true]
	  *     Allow vertical pan.
	  *
	  * @property {Boolean} [constrainDuringPan=false]
	  *
	  * @property {Boolean} [wrapHorizontal=false]
	  *     Set to true to force the image to wrap horizontally within the viewport.
	  *     Useful for maps or images representing the surface of a sphere or cylinder.
	  *
	  * @property {Boolean} [wrapVertical=false]
	  *     Set to true to force the image to wrap vertically within the viewport.
	  *     Useful for maps or images representing the surface of a sphere or cylinder.
	  *
	  * @property {Number} [minZoomImageRatio=0.9]
	  *     The minimum percentage ( expressed as a number between 0 and 1 ) of
	  *     the viewport height or width at which the zoom out will be constrained.
	  *     Setting it to 0, for example will allow you to zoom out infinity.
	  *
	  * @property {Number} [maxZoomPixelRatio=1.1]
	  *     The maximum ratio to allow a zoom-in to affect the highest level pixel
	  *     ratio. This can be set to Infinity to allow 'infinite' zooming into the
	  *     image though it is less effective visually if the HTML5 Canvas is not
	  *     availble on the viewing device.
	  *
	  * @property {Boolean} [autoResize=true]
	  *     Set to false to prevent polling for viewer size changes. Useful for providing custom resize behavior.
	  *
	  * @property {Boolean} [preserveImageSizeOnResize=false]
	  *     Set to true to have the image size preserved when the viewer is resized. This requires autoResize=true (default).
	  *
	  * @property {Number} [minScrollDeltaTime=50]
	  *     Number of milliseconds between canvas-scroll events. This value helps normalize the rate of canvas-scroll
	  *     events between different devices, causing the faster devices to slow down enough to make the zoom control
	  *     more manageable.
	  *
	  * @property {Number} [pixelsPerWheelLine=40]
	  *     For pixel-resolution scrolling devices, the number of pixels equal to one scroll line.
	  *
	  * @property {Number} [visibilityRatio=0.5]
	  *     The percentage ( as a number from 0 to 1 ) of the source image which
	  *     must be kept within the viewport.  If the image is dragged beyond that
	  *     limit, it will 'bounce' back until the minimum visibility ratio is
	  *     achieved.  Setting this to 0 and wrapHorizontal ( or wrapVertical ) to
	  *     true will provide the effect of an infinitely scrolling viewport.
	  *
	  * @property {Object} [viewportMargins={}]
	  *     Pushes the "home" region in from the sides by the specified amounts.
	  *     Possible subproperties (Numbers, in screen coordinates): left, top, right, bottom.
	  *
	  * @property {Number} [imageLoaderLimit=0]
	  *     The maximum number of image requests to make concurrently. By default
	  *     it is set to 0 allowing the browser to make the maximum number of
	  *     image requests in parallel as allowed by the browsers policy.
	  *
	  * @property {Number} [clickTimeThreshold=300]
	  *      The number of milliseconds within which a pointer down-up event combination
	  *      will be treated as a click gesture.
	  *
	  * @property {Number} [clickDistThreshold=5]
	  *      The maximum distance allowed between a pointer down event and a pointer up event
	  *      to be treated as a click gesture.
	  *
	  * @property {Number} [dblClickTimeThreshold=300]
	  *      The number of milliseconds within which two pointer down-up event combinations
	  *      will be treated as a double-click gesture.
	  *
	  * @property {Number} [dblClickDistThreshold=20]
	  *      The maximum distance allowed between two pointer click events
	  *      to be treated as a double-click gesture.
	  *
	  * @property {Number} [springStiffness=6.5]
	  *
	  * @property {Number} [animationTime=1.2]
	  *     Specifies the animation duration per each {@link OpenSeadragon.Spring}
	  *     which occur when the image is dragged or zoomed.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsMouse]
	  *     Settings for gestures generated by a mouse pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsMouse.scrollToZoom=true] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsMouse.clickToZoom=true] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsMouse.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsMouse.pinchToZoom=false] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsMouse.flickEnabled=false] - Enable flick gesture
	  * @property {Number} [gestureSettingsMouse.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsMouse.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsMouse.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsTouch]
	  *     Settings for gestures generated by a touch pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsTouch.scrollToZoom=false] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsTouch.clickToZoom=false] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsTouch.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsTouch.pinchToZoom=true] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsTouch.flickEnabled=true] - Enable flick gesture
	  * @property {Number} [gestureSettingsTouch.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsTouch.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsTouch.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsPen]
	  *     Settings for gestures generated by a pen pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsPen.scrollToZoom=false] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsPen.clickToZoom=true] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsPen.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsPen.pinchToZoom=false] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsPen.flickEnabled=false] - Enable flick gesture
	  * @property {Number} [gestureSettingsPen.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsPen.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsPen.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsUnknown]
	  *     Settings for gestures generated by unknown pointer devices. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsUnknown.scrollToZoom=true] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsUnknown.clickToZoom=false] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsUnknown.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsUnknown.pinchToZoom=true] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsUnknown.flickEnabled=true] - Enable flick gesture
	  * @property {Number} [gestureSettingsUnknown.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsUnknown.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsUnknown.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {Number} [zoomPerClick=2.0]
	  *     The "zoom distance" per mouse click or touch tap. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).</em>
	  *
	  * @property {Number} [zoomPerScroll=1.2]
	  *     The "zoom distance" per mouse scroll or touch pinch. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).</em>
	  *
	  * @property {Number} [zoomPerSecond=1.0]
	  *     The number of seconds to animate a single zoom event over.
	  *
	  * @property {Boolean} [showNavigator=false]
	  *     Set to true to make the navigator minimap appear.
	  *
	  * @property {String} [navigatorId=navigator-GENERATED DATE]
	  *     The ID of a div to hold the navigator minimap.
	  *     If an ID is specified, the navigatorPosition, navigatorSizeRatio, navigatorMaintainSizeRatio, and navigatorTop|Left|Height|Width options will be ignored.
	  *     If an ID is not specified, a div element will be generated and placed on top of the main image.
	  *
	  * @property {String} [navigatorPosition='TOP_RIGHT']
	  *     Valid values are 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', or 'ABSOLUTE'.<br>
	  *     If 'ABSOLUTE' is specified, then navigatorTop|Left|Height|Width determines the size and position of the navigator minimap in the viewer, and navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.<br>
	  *     For 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', and 'BOTTOM_RIGHT', the navigatorSizeRatio or navigatorHeight|Width values determine the size of the navigator minimap.
	  *
	  * @property {Number} [navigatorSizeRatio=0.2]
	  *     Ratio of navigator size to viewer size. Ignored if navigatorHeight|Width are specified.
	  *
	  * @property {Boolean} [navigatorMaintainSizeRatio=false]
	  *     If true, the navigator minimap is resized (using navigatorSizeRatio) when the viewer size changes.
	  *
	  * @property {Number|String} [navigatorTop=null]
	  *     Specifies the location of the navigator minimap (see navigatorPosition).
	  *
	  * @property {Number|String} [navigatorLeft=null]
	  *     Specifies the location of the navigator minimap (see navigatorPosition).
	  *
	  * @property {Number|String} [navigatorHeight=null]
	  *     Specifies the size of the navigator minimap (see navigatorPosition).
	  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
	  *
	  * @property {Number|String} [navigatorWidth=null]
	  *     Specifies the size of the navigator minimap (see navigatorPosition).
	  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
	  *
	  * @property {Boolean} [navigatorAutoResize=true]
	  *     Set to false to prevent polling for navigator size changes. Useful for providing custom resize behavior.
	  *     Setting to false can also improve performance when the navigator is configured to a fixed size.
	  *
	  * @property {Boolean} [navigatorRotate=true]
	  *     If true, the navigator will be rotated together with the viewer.
	  *
	  * @property {Number} [controlsFadeDelay=2000]
	  *     The number of milliseconds to wait once the user has stopped interacting
	  *     with the interface before begining to fade the controls. Assumes
	  *     showNavigationControl and autoHideControls are both true.
	  *
	  * @property {Number} [controlsFadeLength=1500]
	  *     The number of milliseconds to animate the controls fading out.
	  *
	  * @property {Number} [maxImageCacheCount=200]
	  *     The max number of images we should keep in memory (per drawer).
	  *
	  * @property {Number} [timeout=30000]
	  *
	  * @property {Boolean} [useCanvas=true]
	  *     Set to false to not use an HTML canvas element for image rendering even if canvas is supported.
	  *
	  * @property {Number} [minPixelRatio=0.5]
	  *     The higher the minPixelRatio, the lower the quality of the image that
	  *     is considered sufficient to stop rendering a given zoom level.  For
	  *     example, if you are targeting mobile devices with less bandwith you may
	  *     try setting this to 1.5 or higher.
	  *
	  * @property {Boolean} [mouseNavEnabled=true]
	  *     Is the user able to interact with the image via mouse or touch. Default
	  *     interactions include draging the image in a plane, and zooming in toward
	  *     and away from the image.
	  *
	  * @property {Boolean} [showNavigationControl=true]
	  *     Set to false to prevent the appearance of the default navigation controls.<br>
	  *     Note that if set to false, the customs buttons set by the options
	  *     zoomInButton, zoomOutButton etc, are rendered inactive.
	  *
	  * @property {OpenSeadragon.ControlAnchor} [navigationControlAnchor=TOP_LEFT]
	  *     Placement of the default navigation controls.
	  *     To set the placement of the sequence controls, see the
	  *     sequenceControlAnchor option.
	  *
	  * @property {Boolean} [showZoomControl=true]
	  *     If true then + and - buttons to zoom in and out are displayed.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showHomeControl=true]
	  *     If true then the 'Go home' button is displayed to go back to the original
	  *     zoom and pan.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showFullPageControl=true]
	  *     If true then the 'Toggle full page' button is displayed to switch
	  *     between full page and normal mode.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showRotationControl=false]
	  *     If true then the rotate left/right controls will be displayed as part of the
	  *     standard controls. This is also subject to the browser support for rotate
	  *     (e.g. viewer.drawer.canRotate()).<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showSequenceControl=true]
	  *     If sequenceMode is true, then provide buttons for navigating forward and
	  *     backward through the images.
	  *
	  * @property {OpenSeadragon.ControlAnchor} [sequenceControlAnchor=TOP_LEFT]
	  *     Placement of the default sequence controls.
	  *
	  * @property {Boolean} [navPrevNextWrap=false]
	  *     If true then the 'previous' button will wrap to the last image when
	  *     viewing the first image and the 'next' button will wrap to the first
	  *     image when viewing the last image.
	  *
	  * @property {String} zoomInButton
	  *     Set the id of the custom 'Zoom in' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} zoomOutButton
	  *     Set the id of the custom 'Zoom out' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} homeButton
	  *     Set the id of the custom 'Go home' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} fullPageButton
	  *     Set the id of the custom 'Toggle full page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} rotateLeftButton
	  *     Set the id of the custom 'Rotate left' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} rotateRightButton
	  *     Set the id of the custom 'Rotate right' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} previousButton
	  *     Set the id of the custom 'Previous page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} nextButton
	  *     Set the id of the custom 'Next page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {Boolean} [sequenceMode=false]
	  *     Set to true to have the viewer treat your tilesources as a sequence of images to
	  *     be opened one at a time rather than all at once.
	  *
	  * @property {Number} [initialPage=0]
	  *     If sequenceMode is true, display this page initially.
	  *
	  * @property {Boolean} [preserveViewport=false]
	  *     If sequenceMode is true, then normally navigating through each image resets the
	  *     viewport to 'home' position.  If preserveViewport is set to true, then the viewport
	  *     position is preserved when navigating between images in the sequence.
	  *
	  * @property {Boolean} [preserveOverlays=false]
	  *     If sequenceMode is true, then normally navigating through each image
	  *     resets the overlays.
	  *     If preserveOverlays is set to true, then the overlays added with {@link OpenSeadragon.Viewer#addOverlay}
	  *     are preserved when navigating between images in the sequence.
	  *     Note: setting preserveOverlays overrides any overlays specified in the global
	  *     "overlays" option for the Viewer. It's also not compatible with specifying
	  *     per-tileSource overlays via the options, as those overlays will persist
	  *     even after the tileSource is closed.
	  *
	  * @property {Boolean} [showReferenceStrip=false]
	  *     If sequenceMode is true, then display a scrolling strip of image thumbnails for
	  *     navigating through the images.
	  *
	  * @property {String} [referenceStripScroll='horizontal']
	  *
	  * @property {Element} [referenceStripElement=null]
	  *
	  * @property {Number} [referenceStripHeight=null]
	  *
	  * @property {Number} [referenceStripWidth=null]
	  *
	  * @property {String} [referenceStripPosition='BOTTOM_LEFT']
	  *
	  * @property {Number} [referenceStripSizeRatio=0.2]
	  *
	  * @property {Boolean} [collectionMode=false]
	  *     Set to true to have the viewer arrange your TiledImages in a grid or line.
	  *
	  * @property {Number} [collectionRows=3]
	  *     If collectionMode is true, specifies how many rows the grid should have. Use 1 to make a line.
	  *     If collectionLayout is 'vertical', specifies how many columns instead.
	  *
	  * @property {Number} [collectionColumns=0]
	  *     If collectionMode is true, specifies how many columns the grid should have. Use 1 to make a line.
	  *     If collectionLayout is 'vertical', specifies how many rows instead. Ignored if collectionRows is not set to a falsy value.
	  *
	  * @property {String} [collectionLayout='horizontal']
	  *     If collectionMode is true, specifies whether to arrange vertically or horizontally.
	  *
	  * @property {Number} [collectionTileSize=800]
	  *     If collectionMode is true, specifies the size, in viewport coordinates, for each TiledImage to fit into.
	  *     The TiledImage will be centered within a square of the specified size.
	  *
	  * @property {Number} [collectionTileMargin=80]
	  *     If collectionMode is true, specifies the margin, in viewport coordinates, between each TiledImage.
	  *
	  * @property {String|Boolean} [crossOriginPolicy=false]
	  *     Valid values are 'Anonymous', 'use-credentials', and false. If false, canvas requests will
	  *     not use CORS, and the canvas will be tainted.
	  *
	  * @property {Boolean} [ajaxWithCredentials=false]
	  *     Whether to set the withCredentials XHR flag for AJAX requests (when loading tile sources).
	  *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.
	  *
	  */

	 /**
	  * Settings for gestures generated by a pointer device.
	  *
	  * @typedef {Object} GestureSettings
	  * @memberof OpenSeadragon
	  *
	  * @property {Boolean} scrollToZoom
	  *     Set to false to disable zooming on scroll gestures.
	  *
	  * @property {Boolean} clickToZoom
	  *     Set to false to disable zooming on click gestures.
	  *
	  * @property {Boolean} dblClickToZoom
	  *     Set to false to disable zooming on double-click gestures. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  *
	  * @property {Boolean} pinchToZoom
	  *     Set to false to disable zooming on pinch gestures.
	  *
	  * @property {Boolean} flickEnabled
	  *     Set to false to disable the kinetic panning effect (flick) at the end of a drag gesture.
	  *
	  * @property {Number} flickMinSpeed
	  *     If flickEnabled is true, the minimum speed (in pixels-per-second) required to cause the kinetic panning effect (flick) at the end of a drag gesture.
	  *
	  * @property {Number} flickMomentum
	  *     If flickEnabled is true, a constant multiplied by the velocity to determine the distance of the kinetic panning effect (flick) at the end of a drag gesture.
	  *     A larger value will make the flick feel "lighter", while a smaller value will make the flick feel "heavier".
	  *     Note: springStiffness and animationTime also affect the "spring" used to stop the flick animation.
	  *
	  */

	/**
	  * The names for the image resources used for the image navigation buttons.
	  *
	  * @typedef {Object} NavImages
	  * @memberof OpenSeadragon
	  *
	  * @property {Object} zoomIn - Images for the zoom-in button.
	  * @property {String} zoomIn.REST
	  * @property {String} zoomIn.GROUP
	  * @property {String} zoomIn.HOVER
	  * @property {String} zoomIn.DOWN
	  *
	  * @property {Object} zoomOut - Images for the zoom-out button.
	  * @property {String} zoomOut.REST
	  * @property {String} zoomOut.GROUP
	  * @property {String} zoomOut.HOVER
	  * @property {String} zoomOut.DOWN
	  *
	  * @property {Object} home - Images for the home button.
	  * @property {String} home.REST
	  * @property {String} home.GROUP
	  * @property {String} home.HOVER
	  * @property {String} home.DOWN
	  *
	  * @property {Object} fullpage - Images for the full-page button.
	  * @property {String} fullpage.REST
	  * @property {String} fullpage.GROUP
	  * @property {String} fullpage.HOVER
	  * @property {String} fullpage.DOWN
	  *
	  * @property {Object} rotateleft - Images for the rotate left button.
	  * @property {String} rotateleft.REST
	  * @property {String} rotateleft.GROUP
	  * @property {String} rotateleft.HOVER
	  * @property {String} rotateleft.DOWN
	  *
	  * @property {Object} rotateright - Images for the rotate right button.
	  * @property {String} rotateright.REST
	  * @property {String} rotateright.GROUP
	  * @property {String} rotateright.HOVER
	  * @property {String} rotateright.DOWN
	  *
	  * @property {Object} previous - Images for the previous button.
	  * @property {String} previous.REST
	  * @property {String} previous.GROUP
	  * @property {String} previous.HOVER
	  * @property {String} previous.DOWN
	  *
	  * @property {Object} next - Images for the next button.
	  * @property {String} next.REST
	  * @property {String} next.GROUP
	  * @property {String} next.HOVER
	  * @property {String} next.DOWN
	  *
	  */


	 /**
	  * This function serves as a single point of instantiation for an {@link OpenSeadragon.Viewer}, including all
	  * combinations of out-of-the-box configurable features.
	  *
	  * @function OpenSeadragon
	  * @memberof module:OpenSeadragon
	  * @param {OpenSeadragon.Options} options - Viewer options.
	  * @returns {OpenSeadragon.Viewer}
	  */
	window.OpenSeadragon = window.OpenSeadragon || function( options ){

	    return new OpenSeadragon.Viewer( options );

	};

	if (true) {
	   !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	       return (window.OpenSeadragon);
	   }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}


	(function( $ ){


	    /**
	     * The OpenSeadragon version.
	     *
	     * @member {Object} OpenSeadragon.version
	     * @property {String} versionStr - The version number as a string ('major.minor.revision').
	     * @property {Number} major - The major version number.
	     * @property {Number} minor - The minor version number.
	     * @property {Number} revision - The revision number.
	     * @since 1.0.0
	     */
	    $.version = {
	        versionStr: '2.1.0',
	        major: parseInt('2', 10),
	        minor: parseInt('1', 10),
	        revision: parseInt('0', 10)
	    };


	    /**
	     * Taken from jquery 1.6.1
	     * [[Class]] -> type pairs
	     * @private
	     */
	    var class2type = {
	            '[object Boolean]':     'boolean',
	            '[object Number]':      'number',
	            '[object String]':      'string',
	            '[object Function]':    'function',
	            '[object Array]':       'array',
	            '[object Date]':        'date',
	            '[object RegExp]':      'regexp',
	            '[object Object]':      'object'
	        },
	        // Save a reference to some core methods
	        toString    = Object.prototype.toString,
	        hasOwn      = Object.prototype.hasOwnProperty;

	    /**
	     * Taken from jQuery 1.6.1
	     * @function isFunction
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isFunction = function( obj ) {
	        return $.type(obj) === "function";
	    };


	    /**
	     * Taken from jQuery 1.6.1
	     * @function isArray
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isArray = Array.isArray || function( obj ) {
	        return $.type(obj) === "array";
	    };


	    /**
	     * A crude way of determining if an object is a window.
	     * Taken from jQuery 1.6.1
	     * @function isWindow
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isWindow = function( obj ) {
	        return obj && typeof obj === "object" && "setInterval" in obj;
	    };


	    /**
	     * Taken from jQuery 1.6.1
	     * @function type
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.type = function( obj ) {
	        return ( obj === null ) || ( obj === undefined ) ?
	            String( obj ) :
	            class2type[ toString.call(obj) ] || "object";
	    };


	    /**
	     * Taken from jQuery 1.6.1
	     * @function isPlainObject
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isPlainObject = function( obj ) {
	        // Must be an Object.
	        // Because of IE, we also have to check the presence of the constructor property.
	        // Make sure that DOM nodes and window objects don't pass through, as well
	        if ( !obj || OpenSeadragon.type(obj) !== "object" || obj.nodeType || $.isWindow( obj ) ) {
	            return false;
	        }

	        // Not own constructor property must be Object
	        if ( obj.constructor &&
	            !hasOwn.call(obj, "constructor") &&
	            !hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
	            return false;
	        }

	        // Own properties are enumerated firstly, so to speed up,
	        // if last one is own, then all properties are own.

	        var lastKey;
	        for (var key in obj ) {
	            lastKey = key;
	        }

	        return lastKey === undefined || hasOwn.call( obj, lastKey );
	    };


	    /**
	     * Taken from jQuery 1.6.1
	     * @function isEmptyObject
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isEmptyObject = function( obj ) {
	        for ( var name in obj ) {
	            return false;
	        }
	        return true;
	    };


	    /**
	     * True if the browser supports the HTML5 canvas element
	     * @member {Boolean} supportsCanvas
	     * @memberof OpenSeadragon
	     */
	    $.supportsCanvas = (function () {
	        var canvasElement = document.createElement( 'canvas' );
	        return !!( $.isFunction( canvasElement.getContext ) &&
	                    canvasElement.getContext( '2d' ) );
	    }());

	    /**
	     * Test whether the submitted canvas is tainted or not.
	     * @argument {Canvas} canvas The canvas to test.
	     * @returns {Boolean} True if the canvas is tainted.
	     */
	    $.isCanvasTainted = function(canvas) {
	        var isTainted = false;
	        try {
	            // We test if the canvas is tainted by retrieving data from it.
	            // An exception will be raised if the canvas is tainted.
	            var data = canvas.getContext('2d').getImageData(0, 0, 1, 1);
	        } catch (e) {
	            isTainted = true;
	        }
	        return isTainted;
	    };

	    /**
	     * A ratio comparing the device screen's pixel density to the canvas's backing store pixel density. Defaults to 1 if canvas isn't supported by the browser.
	     * @member {Number} pixelDensityRatio
	     * @memberof OpenSeadragon
	     */
	    $.pixelDensityRatio = (function () {
	        if ( $.supportsCanvas ) {
	            var context = document.createElement('canvas').getContext('2d');
	            var devicePixelRatio = window.devicePixelRatio || 1;
	            var backingStoreRatio = context.webkitBackingStorePixelRatio ||
	                                    context.mozBackingStorePixelRatio ||
	                                    context.msBackingStorePixelRatio ||
	                                    context.oBackingStorePixelRatio ||
	                                    context.backingStorePixelRatio || 1;
	            return devicePixelRatio / backingStoreRatio;
	        } else {
	            return 1;
	        }
	    }());

	}( OpenSeadragon ));

	/**
	 *  This closure defines all static methods available to the OpenSeadragon
	 *  namespace.  Many, if not most, are taked directly from jQuery for use
	 *  to simplify and reduce common programming patterns.  More static methods
	 *  from jQuery may eventually make their way into this though we are
	 *  attempting to avoid an explicit dependency on jQuery only because
	 *  OpenSeadragon is a broadly useful code base and would be made less broad
	 *  by requiring jQuery fully.
	 *
	 *  Some static methods have also been refactored from the original OpenSeadragon
	 *  project.
	 */
	(function( $ ){

	    /**
	     * Taken from jQuery 1.6.1
	     * @function extend
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.extend = function() {
	        var options,
	            name,
	            src,
	            copy,
	            copyIsArray,
	            clone,
	            target  = arguments[ 0 ] || {},
	            length  = arguments.length,
	            deep    = false,
	            i       = 1;

	        // Handle a deep copy situation
	        if ( typeof target === "boolean" ) {
	            deep    = target;
	            target  = arguments[ 1 ] || {};
	            // skip the boolean and the target
	            i = 2;
	        }

	        // Handle case when target is a string or something (possible in deep copy)
	        if ( typeof target !== "object" && !OpenSeadragon.isFunction( target ) ) {
	            target = {};
	        }

	        // extend jQuery itself if only one argument is passed
	        if ( length === i ) {
	            target = this;
	            --i;
	        }

	        for ( ; i < length; i++ ) {
	            // Only deal with non-null/undefined values
	            options = arguments[ i ];
	            if ( options !== null || options !== undefined ) {
	                // Extend the base object
	                for ( name in options ) {
	                    src = target[ name ];
	                    copy = options[ name ];

	                    // Prevent never-ending loop
	                    if ( target === copy ) {
	                        continue;
	                    }

	                    // Recurse if we're merging plain objects or arrays
	                    if ( deep && copy && ( OpenSeadragon.isPlainObject( copy ) || ( copyIsArray = OpenSeadragon.isArray( copy ) ) ) ) {
	                        if ( copyIsArray ) {
	                            copyIsArray = false;
	                            clone = src && OpenSeadragon.isArray( src ) ? src : [];

	                        } else {
	                            clone = src && OpenSeadragon.isPlainObject( src ) ? src : {};
	                        }

	                        // Never move original objects, clone them
	                        target[ name ] = OpenSeadragon.extend( deep, clone, copy );

	                    // Don't bring in undefined values
	                    } else if ( copy !== undefined ) {
	                        target[ name ] = copy;
	                    }
	                }
	            }
	        }

	        // Return the modified object
	        return target;
	    };


	    $.extend( $, /** @lends OpenSeadragon */{
	        /**
	         * The default values for the optional settings documented at {@link OpenSeadragon.Options}.
	         * @static
	         * @type {Object}
	         */
	        DEFAULT_SETTINGS: {
	            //DATA SOURCE DETAILS
	            xmlPath:                null,
	            tileSources:            null,
	            tileHost:               null,
	            initialPage:            0,
	            crossOriginPolicy:      false,
	            ajaxWithCredentials:    false,

	            //PAN AND ZOOM SETTINGS AND CONSTRAINTS
	            panHorizontal:          true,
	            panVertical:            true,
	            constrainDuringPan:     false,
	            wrapHorizontal:         false,
	            wrapVertical:           false,
	            visibilityRatio:        0.5, //-> how much of the viewer can be negative space
	            minPixelRatio:          0.5, //->closer to 0 draws tiles meant for a higher zoom at this zoom
	            defaultZoomLevel:       0,
	            minZoomLevel:           null,
	            maxZoomLevel:           null,
	            homeFillsViewer:        false,

	            //UI RESPONSIVENESS AND FEEL
	            clickTimeThreshold:     300,
	            clickDistThreshold:     5,
	            dblClickTimeThreshold:  300,
	            dblClickDistThreshold:  20,
	            springStiffness:        6.5,
	            animationTime:          1.2,
	            gestureSettingsMouse:   { scrollToZoom: true,  clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsTouch:   { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsPen:     { scrollToZoom: false, clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsUnknown: { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            zoomPerClick:           2,
	            zoomPerScroll:          1.2,
	            zoomPerSecond:          1.0,
	            blendTime:              0,
	            alwaysBlend:            false,
	            autoHideControls:       true,
	            immediateRender:        false,
	            minZoomImageRatio:      0.9, //-> closer to 0 allows zoom out to infinity
	            maxZoomPixelRatio:      1.1, //-> higher allows 'over zoom' into pixels
	            pixelsPerWheelLine:     40,
	            autoResize:             true,
	            preserveImageSizeOnResize: false, // requires autoResize=true
	            minScrollDeltaTime:     50,

	            //DEFAULT CONTROL SETTINGS
	            showSequenceControl:     true,  //SEQUENCE
	            sequenceControlAnchor:   null,  //SEQUENCE
	            preserveViewport:        false, //SEQUENCE
	            preserveOverlays:        false, //SEQUENCE
	            navPrevNextWrap:         false, //SEQUENCE
	            showNavigationControl:   true,  //ZOOM/HOME/FULL/ROTATION
	            navigationControlAnchor: null,  //ZOOM/HOME/FULL/ROTATION
	            showZoomControl:         true,  //ZOOM
	            showHomeControl:         true,  //HOME
	            showFullPageControl:     true,  //FULL
	            showRotationControl:     false, //ROTATION
	            controlsFadeDelay:       2000,  //ZOOM/HOME/FULL/SEQUENCE
	            controlsFadeLength:      1500,  //ZOOM/HOME/FULL/SEQUENCE
	            mouseNavEnabled:         true,  //GENERAL MOUSE INTERACTIVITY

	            //VIEWPORT NAVIGATOR SETTINGS
	            showNavigator:              false,
	            navigatorId:                null,
	            navigatorPosition:          null,
	            navigatorSizeRatio:         0.2,
	            navigatorMaintainSizeRatio: false,
	            navigatorTop:               null,
	            navigatorLeft:              null,
	            navigatorHeight:            null,
	            navigatorWidth:             null,
	            navigatorAutoResize:        true,
	            navigatorRotate:            true,

	            // INITIAL ROTATION
	            degrees:                    0,

	            // APPEARANCE
	            opacity:                    1,
	            placeholderFillStyle:       null,

	            //REFERENCE STRIP SETTINGS
	            showReferenceStrip:          false,
	            referenceStripScroll:       'horizontal',
	            referenceStripElement:       null,
	            referenceStripHeight:        null,
	            referenceStripWidth:         null,
	            referenceStripPosition:      'BOTTOM_LEFT',
	            referenceStripSizeRatio:     0.2,

	            //COLLECTION VISUALIZATION SETTINGS
	            collectionRows:         3, //or columns depending on layout
	            collectionColumns:      0, //columns in horizontal layout, rows in vertical layout
	            collectionLayout:       'horizontal', //vertical
	            collectionMode:         false,
	            collectionTileSize:     800,
	            collectionTileMargin:   80,

	            //PERFORMANCE SETTINGS
	            imageLoaderLimit:       0,
	            maxImageCacheCount:     200,
	            timeout:                30000,
	            useCanvas:              true,  // Use canvas element for drawing if available

	            //INTERFACE RESOURCE SETTINGS
	            prefixUrl:              "/images/",
	            navImages: {
	                zoomIn: {
	                    REST:   'zoomin_rest.png',
	                    GROUP:  'zoomin_grouphover.png',
	                    HOVER:  'zoomin_hover.png',
	                    DOWN:   'zoomin_pressed.png'
	                },
	                zoomOut: {
	                    REST:   'zoomout_rest.png',
	                    GROUP:  'zoomout_grouphover.png',
	                    HOVER:  'zoomout_hover.png',
	                    DOWN:   'zoomout_pressed.png'
	                },
	                home: {
	                    REST:   'home_rest.png',
	                    GROUP:  'home_grouphover.png',
	                    HOVER:  'home_hover.png',
	                    DOWN:   'home_pressed.png'
	                },
	                fullpage: {
	                    REST:   'fullpage_rest.png',
	                    GROUP:  'fullpage_grouphover.png',
	                    HOVER:  'fullpage_hover.png',
	                    DOWN:   'fullpage_pressed.png'
	                },
	                rotateleft: {
	                    REST:   'rotateleft_rest.png',
	                    GROUP:  'rotateleft_grouphover.png',
	                    HOVER:  'rotateleft_hover.png',
	                    DOWN:   'rotateleft_pressed.png'
	                },
	                rotateright: {
	                    REST:   'rotateright_rest.png',
	                    GROUP:  'rotateright_grouphover.png',
	                    HOVER:  'rotateright_hover.png',
	                    DOWN:   'rotateright_pressed.png'
	                },
	                previous: {
	                    REST:   'previous_rest.png',
	                    GROUP:  'previous_grouphover.png',
	                    HOVER:  'previous_hover.png',
	                    DOWN:   'previous_pressed.png'
	                },
	                next: {
	                    REST:   'next_rest.png',
	                    GROUP:  'next_grouphover.png',
	                    HOVER:  'next_hover.png',
	                    DOWN:   'next_pressed.png'
	                }
	            },

	            //DEVELOPER SETTINGS
	            debugMode:              false,
	            debugGridColor:         '#437AB2'
	        },


	        /**
	         * TODO: get rid of this.  I can't see how it's required at all.  Looks
	         *       like an early legacy code artifact.
	         * @static
	         * @ignore
	         */
	        SIGNAL: "----seadragon----",


	        /**
	         * Returns a function which invokes the method as if it were a method belonging to the object.
	         * @function
	         * @param {Object} object
	         * @param {Function} method
	         * @returns {Function}
	         */
	        delegate: function( object, method ) {
	            return function(){
	                var args = arguments;
	                if ( args === undefined ){
	                    args = [];
	                }
	                return method.apply( object, args );
	            };
	        },


	        /**
	         * An enumeration of Browser vendors.
	         * @static
	         * @type {Object}
	         * @property {Number} UNKNOWN
	         * @property {Number} IE
	         * @property {Number} FIREFOX
	         * @property {Number} SAFARI
	         * @property {Number} CHROME
	         * @property {Number} OPERA
	         */
	        BROWSERS: {
	            UNKNOWN:    0,
	            IE:         1,
	            FIREFOX:    2,
	            SAFARI:     3,
	            CHROME:     4,
	            OPERA:      5
	        },


	        /**
	         * Returns a DOM Element for the given id or element.
	         * @function
	         * @param {String|Element} element Accepts an id or element.
	         * @returns {Element} The element with the given id, null, or the element itself.
	         */
	        getElement: function( element ) {
	            if ( typeof ( element ) == "string" ) {
	                element = document.getElementById( element );
	            }
	            return element;
	        },


	        /**
	         * Determines the position of the upper-left corner of the element.
	         * @function
	         * @param {Element|String} element - the elemenet we want the position for.
	         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element.
	         */
	        getElementPosition: function( element ) {
	            var result = new $.Point(),
	                isFixed,
	                offsetParent;

	            element      = $.getElement( element );
	            isFixed      = $.getElementStyle( element ).position == "fixed";
	            offsetParent = getOffsetParent( element, isFixed );

	            while ( offsetParent ) {

	                result.x += element.offsetLeft;
	                result.y += element.offsetTop;

	                if ( isFixed ) {
	                    result = result.plus( $.getPageScroll() );
	                }

	                element = offsetParent;
	                isFixed = $.getElementStyle( element ).position == "fixed";
	                offsetParent = getOffsetParent( element, isFixed );
	            }

	            return result;
	        },


	        /**
	         * Determines the position of the upper-left corner of the element adjusted for current page and/or element scroll.
	         * @function
	         * @param {Element|String} element - the element we want the position for.
	         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element adjusted for current page and/or element scroll.
	         */
	        getElementOffset: function( element ) {
	            element = $.getElement( element );

	            var doc = element && element.ownerDocument,
	                docElement,
	                win,
	                boundingRect = { top: 0, left: 0 };

	            if ( !doc ) {
	                return new $.Point();
	            }

	            docElement = doc.documentElement;

	            if ( typeof element.getBoundingClientRect !== typeof undefined ) {
	                boundingRect = element.getBoundingClientRect();
	            }

	            win = ( doc == doc.window ) ?
	                doc :
	                ( doc.nodeType === 9 ) ?
	                    doc.defaultView || doc.parentWindow :
	                    false;

	            return new $.Point(
	                boundingRect.left + ( win.pageXOffset || docElement.scrollLeft ) - ( docElement.clientLeft || 0 ),
	                boundingRect.top + ( win.pageYOffset || docElement.scrollTop ) - ( docElement.clientTop || 0 )
	            );
	        },


	        /**
	         * Determines the height and width of the given element.
	         * @function
	         * @param {Element|String} element
	         * @returns {OpenSeadragon.Point}
	         */
	        getElementSize: function( element ) {
	            element = $.getElement( element );

	            return new $.Point(
	                element.clientWidth,
	                element.clientHeight
	            );
	        },


	        /**
	         * Returns the CSSStyle object for the given element.
	         * @function
	         * @param {Element|String} element
	         * @returns {CSSStyle}
	         */
	        getElementStyle:
	            document.documentElement.currentStyle ?
	            function( element ) {
	                element = $.getElement( element );
	                return element.currentStyle;
	            } :
	            function( element ) {
	                element = $.getElement( element );
	                return window.getComputedStyle( element, "" );
	            },


	        /**
	         * Determines if a point is within the bounding rectangle of the given element (hit-test).
	         * @function
	         * @param {Element|String} element
	         * @param {OpenSeadragon.Point} point
	         * @returns {Boolean}
	         */
	        pointInElement: function( element, point ) {
	            element = $.getElement( element );
	            var offset = $.getElementOffset( element ),
	                size = $.getElementSize( element );
	            return point.x >= offset.x && point.x < offset.x + size.x && point.y < offset.y + size.y && point.y >= offset.y;
	        },


	        /**
	         * Gets the latest event, really only useful internally since its
	         * specific to IE behavior.
	         * @function
	         * @param {Event} [event]
	         * @returns {Event}
	         * @deprecated For internal use only
	         * @private
	         */
	        getEvent: function( event ) {
	            if( event ){
	                $.getEvent = function( event ) {
	                    return event;
	                };
	            } else {
	                $.getEvent = function() {
	                    return window.event;
	                };
	            }
	            return $.getEvent( event );
	        },


	        /**
	         * Gets the position of the mouse on the screen for a given event.
	         * @function
	         * @param {Event} [event]
	         * @returns {OpenSeadragon.Point}
	         */
	        getMousePosition: function( event ) {

	            if ( typeof( event.pageX ) == "number" ) {
	                $.getMousePosition = function( event ){
	                    var result = new $.Point();

	                    event = $.getEvent( event );
	                    result.x = event.pageX;
	                    result.y = event.pageY;

	                    return result;
	                };
	            } else if ( typeof( event.clientX ) == "number" ) {
	                $.getMousePosition = function( event ){
	                    var result = new $.Point();

	                    event = $.getEvent( event );
	                    result.x =
	                        event.clientX +
	                        document.body.scrollLeft +
	                        document.documentElement.scrollLeft;
	                    result.y =
	                        event.clientY +
	                        document.body.scrollTop +
	                        document.documentElement.scrollTop;

	                    return result;
	                };
	            } else {
	                throw new Error(
	                    "Unknown event mouse position, no known technique."
	                );
	            }

	            return $.getMousePosition( event );
	        },


	        /**
	         * Determines the page's current scroll position.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        getPageScroll: function() {
	            var docElement  = document.documentElement || {},
	                body        = document.body || {};

	            if ( typeof( window.pageXOffset ) == "number" ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        window.pageXOffset,
	                        window.pageYOffset
	                    );
	                };
	            } else if ( body.scrollLeft || body.scrollTop ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        document.body.scrollLeft,
	                        document.body.scrollTop
	                    );
	                };
	            } else if ( docElement.scrollLeft || docElement.scrollTop ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        document.documentElement.scrollLeft,
	                        document.documentElement.scrollTop
	                    );
	                };
	            } else {
	                // We can't reassign the function yet, as there was no scroll.
	                return new $.Point(0,0);
	            }

	            return $.getPageScroll();
	        },

	        /**
	         * Set the page scroll position.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        setPageScroll: function( scroll ) {
	            if ( typeof ( window.scrollTo ) !== "undefined" ) {
	                $.setPageScroll = function( scroll ) {
	                    window.scrollTo( scroll.x, scroll.y );
	                };
	            } else {
	                var originalScroll = $.getPageScroll();
	                if ( originalScroll.x === scroll.x &&
	                    originalScroll.y === scroll.y ) {
	                    // We are already correctly positioned and there
	                    // is no way to detect the correct method.
	                    return;
	                }

	                document.body.scrollLeft = scroll.x;
	                document.body.scrollTop = scroll.y;
	                var currentScroll = $.getPageScroll();
	                if ( currentScroll.x !== originalScroll.x &&
	                    currentScroll.y !== originalScroll.y ) {
	                    $.setPageScroll = function( scroll ) {
	                        document.body.scrollLeft = scroll.x;
	                        document.body.scrollTop = scroll.y;
	                    };
	                    return;
	                }

	                document.documentElement.scrollLeft = scroll.x;
	                document.documentElement.scrollTop = scroll.y;
	                currentScroll = $.getPageScroll();
	                if ( currentScroll.x !== originalScroll.x &&
	                    currentScroll.y !== originalScroll.y ) {
	                    $.setPageScroll = function( scroll ) {
	                        document.documentElement.scrollLeft = scroll.x;
	                        document.documentElement.scrollTop = scroll.y;
	                    };
	                    return;
	                }

	                // We can't find anything working, so we do nothing.
	                $.setPageScroll = function( scroll ) {
	                };
	            }

	            return $.setPageScroll( scroll );
	        },

	        /**
	         * Determines the size of the browsers window.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        getWindowSize: function() {
	            var docElement = document.documentElement || {},
	                body    = document.body || {};

	            if ( typeof( window.innerWidth ) == 'number' ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        window.innerWidth,
	                        window.innerHeight
	                    );
	                };
	            } else if ( docElement.clientWidth || docElement.clientHeight ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        document.documentElement.clientWidth,
	                        document.documentElement.clientHeight
	                    );
	                };
	            } else if ( body.clientWidth || body.clientHeight ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        document.body.clientWidth,
	                        document.body.clientHeight
	                    );
	                };
	            } else {
	                throw new Error("Unknown window size, no known technique.");
	            }

	            return $.getWindowSize();
	        },


	        /**
	         * Wraps the given element in a nest of divs so that the element can
	         * be easily centered using CSS tables
	         * @function
	         * @param {Element|String} element
	         * @returns {Element} outermost wrapper element
	         */
	        makeCenteredNode: function( element ) {
	            // Convert a possible ID to an actual HTMLElement
	            element = $.getElement( element );

	            /*
	                CSS tables require you to have a display:table/row/cell hierarchy so we need to create
	                three nested wrapper divs:
	             */

	            var wrappers = [
	                $.makeNeutralElement( 'div' ),
	                $.makeNeutralElement( 'div' ),
	                $.makeNeutralElement( 'div' )
	            ];

	            // It feels like we should be able to pass style dicts to makeNeutralElement:
	            $.extend(wrappers[0].style, {
	                display: "table",
	                height: "100%",
	                width: "100%"
	            });

	            $.extend(wrappers[1].style, {
	                display: "table-row"
	            });

	            $.extend(wrappers[2].style, {
	                display: "table-cell",
	                verticalAlign: "middle",
	                textAlign: "center"
	            });

	            wrappers[0].appendChild(wrappers[1]);
	            wrappers[1].appendChild(wrappers[2]);
	            wrappers[2].appendChild(element);

	            return wrappers[0];
	        },


	        /**
	         * Creates an easily positionable element of the given type that therefor
	         * serves as an excellent container element.
	         * @function
	         * @param {String} tagName
	         * @returns {Element}
	         */
	        makeNeutralElement: function( tagName ) {
	            var element = document.createElement( tagName ),
	                style   = element.style;

	            style.background = "transparent none";
	            style.border     = "none";
	            style.margin     = "0px";
	            style.padding    = "0px";
	            style.position   = "static";

	            return element;
	        },


	        /**
	         * Returns the current milliseconds, using Date.now() if available
	         * @function
	         */
	        now: function( ) {
	          if (Date.now) {
	            $.now = Date.now;
	          } else {
	            $.now = function() { return new Date().getTime(); };
	          }

	          return $.now();
	        },


	        /**
	         * Ensures an image is loaded correctly to support alpha transparency.
	         * Generally only IE has issues doing this correctly for formats like
	         * png.
	         * @function
	         * @param {String} src
	         * @returns {Element}
	         */
	        makeTransparentImage: function( src ) {

	            $.makeTransparentImage = function( src ){
	                var img = $.makeNeutralElement( "img" );

	                img.src = src;

	                return img;
	            };

	            if ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 7 ) {

	                $.makeTransparentImage = function( src ){
	                    var img     = $.makeNeutralElement( "img" ),
	                        element = null;

	                    element = $.makeNeutralElement("span");
	                    element.style.display = "inline-block";

	                    img.onload = function() {
	                        element.style.width  = element.style.width || img.width + "px";
	                        element.style.height = element.style.height || img.height + "px";

	                        img.onload = null;
	                        img = null;     // to prevent memory leaks in IE
	                    };

	                    img.src = src;
	                    element.style.filter =
	                        "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" +
	                        src +
	                        "', sizingMethod='scale')";

	                    return element;
	                };

	            }

	            return $.makeTransparentImage( src );
	        },


	        /**
	         * Sets the opacity of the specified element.
	         * @function
	         * @param {Element|String} element
	         * @param {Number} opacity
	         * @param {Boolean} [usesAlpha]
	         */
	        setElementOpacity: function( element, opacity, usesAlpha ) {

	            var ieOpacity,
	                ieFilter;

	            element = $.getElement( element );

	            if ( usesAlpha && !$.Browser.alpha ) {
	                opacity = Math.round( opacity );
	            }

	            if ( $.Browser.opacity ) {
	                element.style.opacity = opacity < 1 ? opacity : "";
	            } else {
	                if ( opacity < 1 ) {
	                    ieOpacity = Math.round( 100 * opacity );
	                    ieFilter  = "alpha(opacity=" + ieOpacity + ")";
	                    element.style.filter = ieFilter;
	                } else {
	                    element.style.filter = "";
	                }
	            }
	        },


	        /**
	         * Sets the specified element's touch-action style attribute to 'none'.
	         * @function
	         * @param {Element|String} element
	         */
	        setElementTouchActionNone: function( element ) {
	            element = $.getElement( element );
	            if ( typeof element.style.touchAction !== 'undefined' ) {
	                element.style.touchAction = 'none';
	            } else if ( typeof element.style.msTouchAction !== 'undefined' ) {
	                element.style.msTouchAction = 'none';
	            }
	        },


	        /**
	         * Add the specified CSS class to the element if not present.
	         * @function
	         * @param {Element|String} element
	         * @param {String} className
	         */
	        addClass: function( element, className ) {
	            element = $.getElement( element );

	            if ( ! element.className ) {
	                element.className = className;
	            } else if ( ( ' ' + element.className + ' ' ).
	                indexOf( ' ' + className + ' ' ) === -1 ) {
	                element.className += ' ' + className;
	            }
	        },

	        /**
	         * Find the first index at which an element is found in an array or -1
	         * if not present.
	         *
	         * Code taken and adapted from
	         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility
	         *
	         * @function
	         * @param {Array} array The array from which to find the element
	         * @param {Object} searchElement The element to find
	         * @param {Number} [fromIndex=0] Index to start research.
	         * @returns {Number} The index of the element in the array.
	         */
	        indexOf: function( array, searchElement, fromIndex ) {
	            if ( Array.prototype.indexOf ) {
	                this.indexOf = function( array, searchElement, fromIndex ) {
	                    return array.indexOf( searchElement, fromIndex );
	                };
	            } else {
	                this.indexOf = function( array, searchElement, fromIndex ) {
	                    var i,
	                        pivot = ( fromIndex ) ? fromIndex : 0,
	                        length;
	                    if ( !array ) {
	                        throw new TypeError( );
	                    }

	                    length = array.length;
	                    if ( length === 0 || pivot >= length ) {
	                        return -1;
	                    }

	                    if ( pivot < 0 ) {
	                        pivot = length - Math.abs( pivot );
	                    }

	                    for ( i = pivot; i < length; i++ ) {
	                        if ( array[i] === searchElement ) {
	                            return i;
	                        }
	                    }
	                    return -1;
	                };
	            }
	            return this.indexOf( array, searchElement, fromIndex );
	        },

	        /**
	         * Remove the specified CSS class from the element.
	         * @function
	         * @param {Element|String} element
	         * @param {String} className
	         */
	        removeClass: function( element, className ) {
	            var oldClasses,
	                newClasses = [],
	                i;

	            element = $.getElement( element );
	            oldClasses = element.className.split( /\s+/ );
	            for ( i = 0; i < oldClasses.length; i++ ) {
	                if ( oldClasses[ i ] && oldClasses[ i ] !== className ) {
	                    newClasses.push( oldClasses[ i ] );
	                }
	            }
	            element.className = newClasses.join(' ');
	        },


	        /**
	         * Adds an event listener for the given element, eventName and handler.
	         * @function
	         * @param {Element|String} element
	         * @param {String} eventName
	         * @param {Function} handler
	         * @param {Boolean} [useCapture]
	         */
	        addEvent: (function () {
	            if ( window.addEventListener ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.addEventListener( eventName, handler, useCapture );
	                };
	            } else if ( window.attachEvent ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.attachEvent( 'on' + eventName, handler );
	                };
	            } else {
	                throw new Error( "No known event model." );
	            }
	        }()),


	        /**
	         * Remove a given event listener for the given element, event type and
	         * handler.
	         * @function
	         * @param {Element|String} element
	         * @param {String} eventName
	         * @param {Function} handler
	         * @param {Boolean} [useCapture]
	         */
	        removeEvent: (function () {
	            if ( window.removeEventListener ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.removeEventListener( eventName, handler, useCapture );
	                };
	            } else if ( window.detachEvent ) {
	                return function( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.detachEvent( 'on' + eventName, handler );
	                };
	            } else {
	                throw new Error( "No known event model." );
	            }
	        }()),


	        /**
	         * Cancels the default browser behavior had the event propagated all
	         * the way up the DOM to the window object.
	         * @function
	         * @param {Event} [event]
	         */
	        cancelEvent: function( event ) {
	            event = $.getEvent( event );

	            if ( event.preventDefault ) {
	                $.cancelEvent = function( event ){
	                    // W3C for preventing default
	                    event.preventDefault();
	                };
	            } else {
	                $.cancelEvent = function( event ){
	                    event = $.getEvent( event );
	                    // legacy for preventing default
	                    event.cancel = true;
	                    // IE for preventing default
	                    event.returnValue = false;
	                };
	            }
	            $.cancelEvent( event );
	        },


	        /**
	         * Stops the propagation of the event up the DOM.
	         * @function
	         * @param {Event} [event]
	         */
	        stopEvent: function( event ) {
	            event = $.getEvent( event );

	            if ( event.stopPropagation ) {
	                // W3C for stopping propagation
	                $.stopEvent = function( event ){
	                    event.stopPropagation();
	                };
	            } else {
	                // IE for stopping propagation
	                $.stopEvent = function( event ){
	                    event = $.getEvent( event );
	                    event.cancelBubble = true;
	                };

	            }

	            $.stopEvent( event );
	        },


	        /**
	         * Similar to OpenSeadragon.delegate, but it does not immediately call
	         * the method on the object, returning a function which can be called
	         * repeatedly to delegate the method. It also allows additonal arguments
	         * to be passed during construction which will be added during each
	         * invocation, and each invocation can add additional arguments as well.
	         *
	         * @function
	         * @param {Object} object
	         * @param {Function} method
	         * @param [args] any additional arguments are passed as arguments to the
	         *  created callback
	         * @returns {Function}
	         */
	        createCallback: function( object, method ) {
	            //TODO: This pattern is painful to use and debug.  It's much cleaner
	            //      to use pinning plus anonymous functions.  Get rid of this
	            //      pattern!
	            var initialArgs = [],
	                i;
	            for ( i = 2; i < arguments.length; i++ ) {
	                initialArgs.push( arguments[ i ] );
	            }

	            return function() {
	                var args = initialArgs.concat( [] ),
	                    i;
	                for ( i = 0; i < arguments.length; i++ ) {
	                    args.push( arguments[ i ] );
	                }

	                return method.apply( object, args );
	            };
	        },


	        /**
	         * Retreives the value of a url parameter from the window.location string.
	         * @function
	         * @param {String} key
	         * @returns {String} The value of the url parameter or null if no param matches.
	         */
	        getUrlParameter: function( key ) {
	            var value = URLPARAMS[ key ];
	            return value ? value : null;
	        },

	        /**
	         * Retrieves the protocol used by the url. The url can either be absolute
	         * or relative.
	         * @function
	         * @private
	         * @param {String} url The url to retrieve the protocol from.
	         * @return {String} The protocol (http:, https:, file:, ftp: ...)
	         */
	        getUrlProtocol: function( url ) {
	            var match = url.match(/^([a-z]+:)\/\//i);
	            if ( match === null ) {
	                // Relative URL, retrive the protocol from window.location
	                return window.location.protocol;
	            }
	            return match[1].toLowerCase();
	        },

	        /**
	         * Create an XHR object
	         * @private
	         * @param {type} [local] If set to true, the XHR will be file: protocol
	         * compatible if possible (but may raise a warning in the browser).
	         * @returns {XMLHttpRequest}
	         */
	        createAjaxRequest: function( local ) {
	            // IE11 does not support window.ActiveXObject so we just try to
	            // create one to see if it is supported.
	            // See: http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx
	            var supportActiveX;
	            try {
	                /* global ActiveXObject:true */
	                supportActiveX = !!new ActiveXObject( "Microsoft.XMLHTTP" );
	            } catch( e ) {
	                supportActiveX = false;
	            }

	            if ( supportActiveX ) {
	                if ( window.XMLHttpRequest ) {
	                    $.createAjaxRequest = function( local ) {
	                        if ( local ) {
	                            return new ActiveXObject( "Microsoft.XMLHTTP" );
	                        }
	                        return new XMLHttpRequest();
	                    };
	                } else {
	                    $.createAjaxRequest = function() {
	                        return new ActiveXObject( "Microsoft.XMLHTTP" );
	                    };
	                }
	            } else if ( window.XMLHttpRequest ) {
	                $.createAjaxRequest = function() {
	                    return new XMLHttpRequest();
	                };
	            } else {
	                throw new Error( "Browser doesn't support XMLHttpRequest." );
	            }
	            return $.createAjaxRequest( local );
	        },

	        /**
	         * Makes an AJAX request.
	         * @param {Object} options
	         * @param {String} options.url - the url to request
	         * @param {Function} options.success - a function to call on a successful response
	         * @param {Function} options.error - a function to call on when an error occurs
	         * @param {Boolean} [options.withCredentials=false] - whether to set the XHR's withCredentials
	         * @throws {Error}
	         */
	        makeAjaxRequest: function( url, onSuccess, onError ) {
	            var withCredentials;

	            // Note that our preferred API is that you pass in a single object; the named
	            // arguments are for legacy support.
	            if( $.isPlainObject( url ) ){
	                onSuccess = url.success;
	                onError = url.error;
	                withCredentials = url.withCredentials;
	                url = url.url;
	            }

	            var protocol = $.getUrlProtocol( url );
	            var request = $.createAjaxRequest( protocol === "file:" );

	            if ( !$.isFunction( onSuccess ) ) {
	                throw new Error( "makeAjaxRequest requires a success callback" );
	            }

	            request.onreadystatechange = function() {
	                // 4 = DONE (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)
	                if ( request.readyState == 4 ) {
	                    request.onreadystatechange = function(){};

	                    // With protocols other than http/https, the status is 200
	                    // on Firefox and 0 on other browsers
	                    if ( request.status === 200 ||
	                        ( request.status === 0 &&
	                          protocol !== "http:" &&
	                          protocol !== "https:" )) {
	                        onSuccess( request );
	                    } else {
	                        $.console.log( "AJAX request returned %d: %s", request.status, url );

	                        if ( $.isFunction( onError ) ) {
	                            onError( request );
	                        }
	                    }
	                }
	            };

	            if (withCredentials) {
	                request.withCredentials = true;
	            }

	            try {
	                request.open( "GET", url, true );
	                request.send( null );
	            } catch (e) {
	                var msg = e.message;

	                /*
	                    IE < 10 does not support CORS and an XHR request to a different origin will fail as soon
	                    as send() is called. This is particularly easy to miss during development and appear in
	                    production if you use a CDN or domain sharding and the security policy is likely to break
	                    exception handlers since any attempt to access a property of the request object will
	                    raise an access denied TypeError inside the catch block.

	                    To be friendlier, we'll check for this specific error and add a documentation pointer
	                    to point developers in the right direction. We test the exception number because IE's
	                    error messages are localized.
	                */
	                var oldIE = $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 10;
	                if ( oldIE && typeof( e.number ) != "undefined" && e.number == -2147024891 ) {
	                    msg += "\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain";
	                }

	                $.console.log( "%s while making AJAX request: %s", e.name, msg );

	                request.onreadystatechange = function(){};

	                if (window.XDomainRequest) { // IE9 or IE8 might as well try to use XDomainRequest
	                    var xdr = new XDomainRequest();
	                    if (xdr) {
	                        xdr.onload = function (e) {
	                            if ( $.isFunction( onSuccess ) ) {
	                                onSuccess({ // Faking an xhr object
	                                    responseText: xdr.responseText,
	                                    status: 200, // XDomainRequest doesn't support status codes, so we just fake one! :/
	                                    statusText: 'OK'
	                                });
	                            }
	                        };
	                        xdr.onerror = function (e) {
	                            if ( $.isFunction ( onError ) ) {
	                                onError({ // Faking an xhr object
	                                    responseText: xdr.responseText,
	                                    status: 444, // 444 No Response
	                                    statusText: 'An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser.'
	                                });
	                            }
	                        };
	                        try {
	                            xdr.open('GET', url);
	                            xdr.send();
	                        } catch (e2) {
	                            if ( $.isFunction( onError ) ) {
	                                onError( request, e );
	                            }
	                        }
	                    }
	                } else {
	                    if ( $.isFunction( onError ) ) {
	                        onError( request, e );
	                    }
	                }
	            }
	        },

	        /**
	         * Taken from jQuery 1.6.1
	         * @function
	         * @param {Object} options
	         * @param {String} options.url
	         * @param {Function} options.callback
	         * @param {String} [options.param='callback'] The name of the url parameter
	         *      to request the jsonp provider with.
	         * @param {String} [options.callbackName=] The name of the callback to
	         *      request the jsonp provider with.
	         */
	        jsonp: function( options ){
	            var script,
	                url     = options.url,
	                head    = document.head ||
	                    document.getElementsByTagName( "head" )[ 0 ] ||
	                    document.documentElement,
	                jsonpCallback = options.callbackName || 'openseadragon' + $.now(),
	                previous      = window[ jsonpCallback ],
	                replace       = "$1" + jsonpCallback + "$2",
	                callbackParam = options.param || 'callback',
	                callback      = options.callback;

	            url = url.replace( /(\=)\?(&|$)|\?\?/i, replace );
	            // Add callback manually
	            url += (/\?/.test( url ) ? "&" : "?") + callbackParam + "=" + jsonpCallback;

	            // Install callback
	            window[ jsonpCallback ] = function( response ) {
	                if ( !previous ){
	                    try{
	                        delete window[ jsonpCallback ];
	                    }catch(e){
	                        //swallow
	                    }
	                } else {
	                    window[ jsonpCallback ] = previous;
	                }
	                if( callback && $.isFunction( callback ) ){
	                    callback( response );
	                }
	            };

	            script = document.createElement( "script" );

	            //TODO: having an issue with async info requests
	            if( undefined !== options.async || false !== options.async ){
	                script.async = "async";
	            }

	            if ( options.scriptCharset ) {
	                script.charset = options.scriptCharset;
	            }

	            script.src = url;

	            // Attach handlers for all browsers
	            script.onload = script.onreadystatechange = function( _, isAbort ) {

	                if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

	                    // Handle memory leak in IE
	                    script.onload = script.onreadystatechange = null;

	                    // Remove the script
	                    if ( head && script.parentNode ) {
	                        head.removeChild( script );
	                    }

	                    // Dereference the script
	                    script = undefined;
	                }
	            };
	            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
	            // This arises when a base node is used (#2709 and #4378).
	            head.insertBefore( script, head.firstChild );

	        },


	        /**
	         * Fully deprecated. Will throw an error.
	         * @function
	         * @deprecated use {@link OpenSeadragon.Viewer#open}
	         */
	        createFromDZI: function() {
	            throw "OpenSeadragon.createFromDZI is deprecated, use Viewer.open.";
	        },

	        /**
	         * Parses an XML string into a DOM Document.
	         * @function
	         * @param {String} string
	         * @returns {Document}
	         */
	        parseXml: function( string ) {
	            if ( window.DOMParser ) {

	                $.parseXml = function( string ) {
	                    var xmlDoc = null,
	                        parser;

	                    parser = new DOMParser();
	                    xmlDoc = parser.parseFromString( string, "text/xml" );
	                    return xmlDoc;
	                };

	            } else if ( window.ActiveXObject ) {

	                $.parseXml = function( string ) {
	                    var xmlDoc = null;

	                    xmlDoc = new ActiveXObject( "Microsoft.XMLDOM" );
	                    xmlDoc.async = false;
	                    xmlDoc.loadXML( string );
	                    return xmlDoc;
	                };

	            } else {
	                throw new Error( "Browser doesn't support XML DOM." );
	            }

	            return $.parseXml( string );
	        },

	        /**
	         * Parses a JSON string into a Javascript object.
	         * @function
	         * @param {String} string
	         * @returns {Object}
	         */
	        parseJSON: function(string) {
	            if (window.JSON && window.JSON.parse) {
	                $.parseJSON = window.JSON.parse;
	            } else {
	                // Should only be used by IE8 in non standards mode
	                $.parseJSON = function(string) {
	                    /*jshint evil:true*/
	                    return eval('(' + string + ')');
	                };
	            }
	            return $.parseJSON(string);
	        },

	        /**
	         * Reports whether the image format is supported for tiling in this
	         * version.
	         * @function
	         * @param {String} [extension]
	         * @returns {Boolean}
	         */
	        imageFormatSupported: function( extension ) {
	            extension = extension ? extension : "";
	            return !!FILEFORMATS[ extension.toLowerCase() ];
	        }

	    });


	    /**
	     * The current browser vendor, version, and related information regarding detected features.
	     * @member {Object} Browser
	     * @memberof OpenSeadragon
	     * @static
	     * @type {Object}
	     * @property {OpenSeadragon.BROWSERS} vendor - One of the {@link OpenSeadragon.BROWSERS} enumeration values.
	     * @property {Number} version
	     * @property {Boolean} alpha - Does the browser support image alpha transparency.
	     */
	    $.Browser = {
	        vendor:     $.BROWSERS.UNKNOWN,
	        version:    0,
	        alpha:      true
	    };


	    var FILEFORMATS = {
	            "bmp":  false,
	            "jpeg": true,
	            "jpg":  true,
	            "png":  true,
	            "tif":  false,
	            "wdp":  false
	        },
	        URLPARAMS = {};

	    (function() {
	        //A small auto-executing routine to determine the browser vendor,
	        //version and supporting feature sets.
	        var app = navigator.appName,
	            ver = navigator.appVersion,
	            ua  = navigator.userAgent,
	            regex;

	        //console.error( 'appName: ' + navigator.appName );
	        //console.error( 'appVersion: ' + navigator.appVersion );
	        //console.error( 'userAgent: ' + navigator.userAgent );

	        switch( navigator.appName ){
	            case "Microsoft Internet Explorer":
	                if( !!window.attachEvent &&
	                    !!window.ActiveXObject ) {

	                    $.Browser.vendor = $.BROWSERS.IE;
	                    $.Browser.version = parseFloat(
	                        ua.substring(
	                            ua.indexOf( "MSIE" ) + 5,
	                            ua.indexOf( ";", ua.indexOf( "MSIE" ) ) )
	                        );
	                }
	                break;
	            case "Netscape":
	                if( !!window.addEventListener ){
	                    if ( ua.indexOf( "Firefox" ) >= 0 ) {
	                        $.Browser.vendor = $.BROWSERS.FIREFOX;
	                        $.Browser.version = parseFloat(
	                            ua.substring( ua.indexOf( "Firefox" ) + 8 )
	                        );
	                    } else if ( ua.indexOf( "Safari" ) >= 0 ) {
	                        $.Browser.vendor = ua.indexOf( "Chrome" ) >= 0 ?
	                            $.BROWSERS.CHROME :
	                            $.BROWSERS.SAFARI;
	                        $.Browser.version = parseFloat(
	                            ua.substring(
	                                ua.substring( 0, ua.indexOf( "Safari" ) ).lastIndexOf( "/" ) + 1,
	                                ua.indexOf( "Safari" )
	                            )
	                        );
	                    } else {
	                        regex = new RegExp( "Trident/.*rv:([0-9]{1,}[.0-9]{0,})");
	                        if ( regex.exec( ua ) !== null ) {
	                            $.Browser.vendor = $.BROWSERS.IE;
	                            $.Browser.version = parseFloat( RegExp.$1 );
	                        }
	                    }
	                }
	                break;
	            case "Opera":
	                $.Browser.vendor = $.BROWSERS.OPERA;
	                $.Browser.version = parseFloat( ver );
	                break;
	        }

	            // ignore '?' portion of query string
	        var query = window.location.search.substring( 1 ),
	            parts = query.split('&'),
	            part,
	            sep,
	            i;

	        for ( i = 0; i < parts.length; i++ ) {
	            part = parts[ i ];
	            sep  = part.indexOf( '=' );

	            if ( sep > 0 ) {
	                URLPARAMS[ part.substring( 0, sep ) ] =
	                    decodeURIComponent( part.substring( sep + 1 ) );
	            }
	        }

	        //determine if this browser supports image alpha transparency
	        $.Browser.alpha = !(
	            (
	                $.Browser.vendor == $.BROWSERS.IE &&
	                $.Browser.version < 9
	            ) || (
	                $.Browser.vendor == $.BROWSERS.CHROME &&
	                $.Browser.version < 2
	            )
	        );

	        //determine if this browser supports element.style.opacity
	        $.Browser.opacity = !(
	            $.Browser.vendor == $.BROWSERS.IE &&
	            $.Browser.version < 9
	        );

	    })();


	    //TODO: $.console is often used inside a try/catch block which generally
	    //      prevents allowings errors to occur with detection until a debugger
	    //      is attached.  Although I've been guilty of the same anti-pattern
	    //      I eventually was convinced that errors should naturally propogate in
	    //      all but the most special cases.
	    /**
	     * A convenient alias for console when available, and a simple null
	     * function when console is unavailable.
	     * @static
	     * @private
	     */
	    var nullfunction = function( msg ){
	            //document.location.hash = msg;
	        };

	    $.console = window.console || {
	        log:    nullfunction,
	        debug:  nullfunction,
	        info:   nullfunction,
	        warn:   nullfunction,
	        error:  nullfunction,
	        assert: nullfunction
	    };


	    // Adding support for HTML5's requestAnimationFrame as suggested by acdha.
	    // Implementation taken from matt synder's post here:
	    // http://mattsnider.com/cross-browser-and-legacy-supported-requestframeanimation/
	    (function( w ) {

	        // most browsers have an implementation
	        var requestAnimationFrame = w.requestAnimationFrame ||
	            w.mozRequestAnimationFrame ||
	            w.webkitRequestAnimationFrame ||
	            w.msRequestAnimationFrame;

	        var cancelAnimationFrame = w.cancelAnimationFrame ||
	            w.mozCancelAnimationFrame ||
	            w.webkitCancelAnimationFrame ||
	            w.msCancelAnimationFrame;

	        // polyfill, when necessary
	        if ( requestAnimationFrame && cancelAnimationFrame ) {
	            // We can't assign these window methods directly to $ because they
	            // expect their "this" to be "window", so we call them in wrappers.
	            $.requestAnimationFrame = function(){
	                return requestAnimationFrame.apply( w, arguments );
	            };
	            $.cancelAnimationFrame = function(){
	                return cancelAnimationFrame.apply( w, arguments );
	            };
	        } else {
	            var aAnimQueue = [],
	                processing = [],
	                iRequestId = 0,
	                iIntervalId;

	            // create a mock requestAnimationFrame function
	            $.requestAnimationFrame = function( callback ) {
	                aAnimQueue.push( [ ++iRequestId, callback ] );

	                if ( !iIntervalId ) {
	                    iIntervalId = setInterval( function() {
	                        if ( aAnimQueue.length ) {
	                            var time = $.now();
	                            // Process all of the currently outstanding frame
	                            // requests, but none that get added during the
	                            // processing.
	                            // Swap the arrays so we don't have to create a new
	                            // array every frame.
	                            var temp = processing;
	                            processing = aAnimQueue;
	                            aAnimQueue = temp;
	                            while ( processing.length ) {
	                                processing.shift()[ 1 ]( time );
	                            }
	                        } else {
	                            // don't continue the interval, if unnecessary
	                            clearInterval( iIntervalId );
	                            iIntervalId = undefined;
	                        }
	                    }, 1000 / 50);  // estimating support for 50 frames per second
	                }

	                return iRequestId;
	            };

	            // create a mock cancelAnimationFrame function
	            $.cancelAnimationFrame = function( requestId ) {
	                // find the request ID and remove it
	                var i, j;
	                for ( i = 0, j = aAnimQueue.length; i < j; i += 1 ) {
	                    if ( aAnimQueue[ i ][ 0 ] === requestId ) {
	                        aAnimQueue.splice( i, 1 );
	                        return;
	                    }
	                }

	                // If it's not in the queue, it may be in the set we're currently
	                // processing (if cancelAnimationFrame is called from within a
	                // requestAnimationFrame callback).
	                for ( i = 0, j = processing.length; i < j; i += 1 ) {
	                    if ( processing[ i ][ 0 ] === requestId ) {
	                        processing.splice( i, 1 );
	                        return;
	                    }
	                }
	            };
	        }
	    })( window );

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Element} element
	     * @param {Boolean} [isFixed]
	     * @returns {Element}
	     */
	    function getOffsetParent( element, isFixed ) {
	        if ( isFixed && element != document.body ) {
	            return document.body;
	        } else {
	            return element.offsetParent;
	        }
	    }

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {XMLHttpRequest} xhr
	     * @param {String} tilesUrl
	     * @deprecated
	     */
	    function processDZIResponse( xhr, tilesUrl ) {
	        var status,
	            statusText,
	            doc = null;

	        if ( !xhr ) {
	            throw new Error( $.getString( "Errors.Security" ) );
	        } else if ( xhr.status !== 200 && xhr.status !== 0 ) {
	            status     = xhr.status;
	            statusText = ( status == 404 ) ?
	                "Not Found" :
	                xhr.statusText;
	            throw new Error( $.getString( "Errors.Status", status, statusText ) );
	        }

	        if ( xhr.responseXML && xhr.responseXML.documentElement ) {
	            doc = xhr.responseXML;
	        } else if ( xhr.responseText ) {
	            doc = $.parseXml( xhr.responseText );
	        }

	        return processDZIXml( doc, tilesUrl );
	    }

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Document} xmlDoc
	     * @param {String} tilesUrl
	     * @deprecated
	     */
	    function processDZIXml( xmlDoc, tilesUrl ) {

	        if ( !xmlDoc || !xmlDoc.documentElement ) {
	            throw new Error( $.getString( "Errors.Xml" ) );
	        }

	        var root     = xmlDoc.documentElement,
	            rootName = root.tagName;

	        if ( rootName == "Image" ) {
	            try {
	                return processDZI( root, tilesUrl );
	            } catch ( e ) {
	                throw (e instanceof Error) ?
	                    e :
	                    new Error( $.getString("Errors.Dzi") );
	            }
	        } else if ( rootName == "Collection" ) {
	            throw new Error( $.getString( "Errors.Dzc" ) );
	        } else if ( rootName == "Error" ) {
	            return $._processDZIError( root );
	        }

	        throw new Error( $.getString( "Errors.Dzi" ) );
	    }

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Element} imageNode
	     * @param {String} tilesUrl
	     * @deprecated
	     */
	    function processDZI( imageNode, tilesUrl ) {
	        var fileFormat    = imageNode.getAttribute( "Format" ),
	            sizeNode      = imageNode.getElementsByTagName( "Size" )[ 0 ],
	            dispRectNodes = imageNode.getElementsByTagName( "DisplayRect" ),
	            width         = parseInt( sizeNode.getAttribute( "Width" ), 10 ),
	            height        = parseInt( sizeNode.getAttribute( "Height" ), 10 ),
	            tileSize      = parseInt( imageNode.getAttribute( "TileSize" ), 10 ),
	            tileOverlap   = parseInt( imageNode.getAttribute( "Overlap" ), 10 ),
	            dispRects     = [],
	            dispRectNode,
	            rectNode,
	            i;

	        if ( !$.imageFormatSupported( fileFormat ) ) {
	            throw new Error(
	                $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )
	            );
	        }

	        for ( i = 0; i < dispRectNodes.length; i++ ) {
	            dispRectNode = dispRectNodes[ i ];
	            rectNode     = dispRectNode.getElementsByTagName( "Rect" )[ 0 ];

	            dispRects.push( new $.DisplayRect(
	                parseInt( rectNode.getAttribute( "X" ), 10 ),
	                parseInt( rectNode.getAttribute( "Y" ), 10 ),
	                parseInt( rectNode.getAttribute( "Width" ), 10 ),
	                parseInt( rectNode.getAttribute( "Height" ), 10 ),
	                0,  // ignore MinLevel attribute, bug in Deep Zoom Composer
	                parseInt( dispRectNode.getAttribute( "MaxLevel" ), 10 )
	            ));
	        }
	        return new $.DziTileSource(
	            width,
	            height,
	            tileSize,
	            tileOverlap,
	            tilesUrl,
	            fileFormat,
	            dispRects
	        );
	    }

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Element} imageNode
	     * @param {String} tilesUrl
	     * @deprecated
	     */
	    function processDZIJSON( imageData, tilesUrl ) {
	        var fileFormat    = imageData.Format,
	            sizeData      = imageData.Size,
	            dispRectData  = imageData.DisplayRect || [],
	            width         = parseInt( sizeData.Width, 10 ),
	            height        = parseInt( sizeData.Height, 10 ),
	            tileSize      = parseInt( imageData.TileSize, 10 ),
	            tileOverlap   = parseInt( imageData.Overlap, 10 ),
	            dispRects     = [],
	            rectData,
	            i;

	        if ( !$.imageFormatSupported( fileFormat ) ) {
	            throw new Error(
	                $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )
	            );
	        }

	        for ( i = 0; i < dispRectData.length; i++ ) {
	            rectData     = dispRectData[ i ].Rect;

	            dispRects.push( new $.DisplayRect(
	                parseInt( rectData.X, 10 ),
	                parseInt( rectData.Y, 10 ),
	                parseInt( rectData.Width, 10 ),
	                parseInt( rectData.Height, 10 ),
	                0,  // ignore MinLevel attribute, bug in Deep Zoom Composer
	                parseInt( rectData.MaxLevel, 10 )
	            ));
	        }
	        return new $.DziTileSource(
	            width,
	            height,
	            tileSize,
	            tileOverlap,
	            tilesUrl,
	            fileFormat,
	            dispRects
	        );
	    }

	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Document} errorNode
	     * @throws {Error}
	     * @deprecated
	     */
	    $._processDZIError = function ( errorNode ) {
	        var messageNode = errorNode.getElementsByTagName( "Message" )[ 0 ],
	            message     = messageNode.firstChild.nodeValue;

	        throw new Error(message);
	    };

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - full-screen support functions
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ) {
	    /**
	     * Determine native full screen support we can get from the browser.
	     * @member fullScreenApi
	     * @memberof OpenSeadragon
	     * @type {object}
	     * @property {Boolean} supportsFullScreen Return true if full screen API is supported.
	     * @property {Function} isFullScreen Return true if currently in full screen mode.
	     * @property {Function} getFullScreenElement Return the element currently in full screen mode.
	     * @property {Function} requestFullScreen Make a request to go in full screen mode.
	     * @property {Function} exitFullScreen Make a request to exit full screen mode.
	     * @property {Function} cancelFullScreen Deprecated, use exitFullScreen instead.
	     * @property {String} fullScreenEventName Event fired when the full screen mode change.
	     * @property {String} fullScreenErrorEventName Event fired when a request to go
	     * in full screen mode failed.
	     */
	    var fullScreenApi = {
	        supportsFullScreen: false,
	        isFullScreen: function() { return false; },
	        getFullScreenElement: function() { return null; },
	        requestFullScreen: function() {},
	        exitFullScreen: function() {},
	        cancelFullScreen: function() {},
	        fullScreenEventName: '',
	        fullScreenErrorEventName: ''
	    };

	    // check for native support
	    if ( document.exitFullscreen ) {
	        // W3C standard
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.fullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.requestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.exitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "fullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "fullscreenerror";
	    } else if ( document.msExitFullscreen ) {
	        // IE 11
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.msFullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.msRequestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.msExitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "MSFullscreenChange";
	        fullScreenApi.fullScreenErrorEventName = "MSFullscreenError";
	    } else if ( document.webkitExitFullscreen ) {
	        // Recent webkit
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.webkitFullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.webkitRequestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.webkitExitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
	    } else if ( document.webkitCancelFullScreen ) {
	        // Old webkit
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.webkitCurrentFullScreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.webkitRequestFullScreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.webkitCancelFullScreen();
	        };
	        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
	    } else if ( document.mozCancelFullScreen ) {
	        // Firefox
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.mozFullScreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.mozRequestFullScreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.mozCancelFullScreen();
	        };
	        fullScreenApi.fullScreenEventName = "mozfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "mozfullscreenerror";
	    }
	    fullScreenApi.isFullScreen = function() {
	        return fullScreenApi.getFullScreenElement() !== null;
	    };
	    fullScreenApi.cancelFullScreen = function() {
	        $.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead.");
	        fullScreenApi.exitFullScreen();
	    };

	    // export api
	    $.extend( $, fullScreenApi );

	})( OpenSeadragon );

	/*
	 * OpenSeadragon - EventSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function($){

	/**
	 * Event handler method signature used by all OpenSeadragon events.
	 *
	 * @callback EventHandler
	 * @memberof OpenSeadragon
	 * @param {Object} event - See individual events for event-specific properties.
	 */


	/**
	 * @class EventSource
	 * @classdesc For use by classes which want to support custom, non-browser events.
	 *
	 * @memberof OpenSeadragon
	 */
	$.EventSource = function() {
	    this.events = {};
	};

	$.EventSource.prototype = /** @lends OpenSeadragon.EventSource.prototype */{

	    // TODO: Add a method 'one' which automatically unbinds a listener after the first triggered event that matches.

	    /**
	     * Add an event handler for a given event.
	     * @function
	     * @param {String} eventName - Name of event to register.
	     * @param {OpenSeadragon.EventHandler} handler - Function to call when event is triggered.
	     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged to the handler.
	     */
	    addHandler: function ( eventName, handler, userData ) {
	        var events = this.events[ eventName ];
	        if ( !events ) {
	            this.events[ eventName ] = events = [];
	        }
	        if ( handler && $.isFunction( handler ) ) {
	            events[ events.length ] = { handler: handler, userData: userData || null };
	        }
	    },

	    /**
	     * Remove a specific event handler for a given event.
	     * @function
	     * @param {String} eventName - Name of event for which the handler is to be removed.
	     * @param {OpenSeadragon.EventHandler} handler - Function to be removed.
	     */
	    removeHandler: function ( eventName, handler ) {
	        var events = this.events[ eventName ],
	            handlers = [],
	            i;
	        if ( !events ) {
	            return;
	        }
	        if ( $.isArray( events ) ) {
	            for ( i = 0; i < events.length; i++ ) {
	                if ( events[i].handler !== handler ) {
	                    handlers.push( events[ i ] );
	                }
	            }
	            this.events[ eventName ] = handlers;
	        }
	    },


	    /**
	     * Remove all event handlers for a given event type. If no type is given all
	     * event handlers for every event type are removed.
	     * @function
	     * @param {String} eventName - Name of event for which all handlers are to be removed.
	     */
	    removeAllHandlers: function( eventName ) {
	        if ( eventName ){
	            this.events[ eventName ] = [];
	        } else{
	            for ( var eventType in this.events ) {
	                this.events[ eventType ] = [];
	            }
	        }
	    },

	    /**
	     * Get a function which iterates the list of all handlers registered for a given event, calling the handler for each.
	     * @function
	     * @param {String} eventName - Name of event to get handlers for.
	     */
	    getHandler: function ( eventName ) {
	        var events = this.events[ eventName ];
	        if ( !events || !events.length ) {
	            return null;
	        }
	        events = events.length === 1 ?
	            [ events[ 0 ] ] :
	            Array.apply( null, events );
	        return function ( source, args ) {
	            var i,
	                length = events.length;
	            for ( i = 0; i < length; i++ ) {
	                if ( events[ i ] ) {
	                    args.eventSource = source;
	                    args.userData = events[ i ].userData;
	                    events[ i ].handler( args );
	                }
	            }
	        };
	    },

	    /**
	     * Trigger an event, optionally passing additional information.
	     * @function
	     * @param {String} eventName - Name of event to register.
	     * @param {Object} eventArgs - Event-specific data.
	     */
	    raiseEvent: function( eventName, eventArgs ) {
	        //uncomment if you want to get a log of all events
	        //$.console.log( eventName );
	        var handler = this.getHandler( eventName );

	        if ( handler ) {
	            if ( !eventArgs ) {
	                eventArgs = {};
	            }

	            handler( this, eventArgs );
	        }
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - MouseTracker
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function ( $ ) {

	    // All MouseTracker instances
	    var MOUSETRACKERS  = [];

	    // dictionary from hash to private properties
	    var THIS           = {};


	    /**
	     * @class MouseTracker
	     * @classdesc Provides simplified handling of common pointer device (mouse, touch, pen, etc.) gestures
	     *            and keyboard events on a specified element.
	     * @memberof OpenSeadragon
	     * @param {Object} options
	     *      Allows configurable properties to be entirely specified by passing
	     *      an options object to the constructor.  The constructor also supports
	     *      the original positional arguments 'element', 'clickTimeThreshold',
	     *      and 'clickDistThreshold' in that order.
	     * @param {Element|String} options.element
	     *      A reference to an element or an element id for which the pointer/key
	     *      events will be monitored.
	     * @param {Boolean} [options.startDisabled=false]
	     *      If true, event tracking on the element will not start until
	     *      {@link OpenSeadragon.MouseTracker.setTracking|setTracking} is called.
	     * @param {Number} options.clickTimeThreshold
	     *      The number of milliseconds within which a pointer down-up event combination
	     *      will be treated as a click gesture.
	     * @param {Number} options.clickDistThreshold
	     *      The maximum distance allowed between a pointer down event and a pointer up event
	     *      to be treated as a click gesture.
	     * @param {Number} options.dblClickTimeThreshold
	     *      The number of milliseconds within which two pointer down-up event combinations
	     *      will be treated as a double-click gesture.
	     * @param {Number} options.dblClickDistThreshold
	     *      The maximum distance allowed between two pointer click events
	     *      to be treated as a click gesture.
	     * @param {Number} [options.stopDelay=50]
	     *      The number of milliseconds without pointer move before the stop
	     *      event is fired.
	     * @param {OpenSeadragon.EventHandler} [options.enterHandler=null]
	     *      An optional handler for pointer enter.
	     * @param {OpenSeadragon.EventHandler} [options.exitHandler=null]
	     *      An optional handler for pointer exit.
	     * @param {OpenSeadragon.EventHandler} [options.pressHandler=null]
	     *      An optional handler for pointer press.
	     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryPressHandler=null]
	     *      An optional handler for pointer non-primary button press.
	     * @param {OpenSeadragon.EventHandler} [options.releaseHandler=null]
	     *      An optional handler for pointer release.
	     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryReleaseHandler=null]
	     *      An optional handler for pointer non-primary button release.
	     * @param {OpenSeadragon.EventHandler} [options.moveHandler=null]
	     *      An optional handler for pointer move.
	     * @param {OpenSeadragon.EventHandler} [options.scrollHandler=null]
	     *      An optional handler for mouse wheel scroll.
	     * @param {OpenSeadragon.EventHandler} [options.clickHandler=null]
	     *      An optional handler for pointer click.
	     * @param {OpenSeadragon.EventHandler} [options.dblClickHandler=null]
	     *      An optional handler for pointer double-click.
	     * @param {OpenSeadragon.EventHandler} [options.dragHandler=null]
	     *      An optional handler for the drag gesture.
	     * @param {OpenSeadragon.EventHandler} [options.dragEndHandler=null]
	     *      An optional handler for after a drag gesture.
	     * @param {OpenSeadragon.EventHandler} [options.pinchHandler=null]
	     *      An optional handler for the pinch gesture.
	     * @param {OpenSeadragon.EventHandler} [options.keyDownHandler=null]
	     *      An optional handler for keydown.
	     * @param {OpenSeadragon.EventHandler} [options.keyUpHandler=null]
	     *      An optional handler for keyup.
	     * @param {OpenSeadragon.EventHandler} [options.keyHandler=null]
	     *      An optional handler for keypress.
	     * @param {OpenSeadragon.EventHandler} [options.focusHandler=null]
	     *      An optional handler for focus.
	     * @param {OpenSeadragon.EventHandler} [options.blurHandler=null]
	     *      An optional handler for blur.
	     * @param {Object} [options.userData=null]
	     *      Arbitrary object to be passed unchanged to any attached handler methods.
	     */
	    $.MouseTracker = function ( options ) {

	        MOUSETRACKERS.push( this );

	        var args = arguments;

	        if ( !$.isPlainObject( options ) ) {
	            options = {
	                element:            args[ 0 ],
	                clickTimeThreshold: args[ 1 ],
	                clickDistThreshold: args[ 2 ]
	            };
	        }

	        this.hash               = Math.random(); // An unique hash for this tracker.
	        /**
	         * The element for which pointer events are being monitored.
	         * @member {Element} element
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.element            = $.getElement( options.element );
	        /**
	         * The number of milliseconds within which a pointer down-up event combination
	         * will be treated as a click gesture.
	         * @member {Number} clickTimeThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.clickTimeThreshold = options.clickTimeThreshold || $.DEFAULT_SETTINGS.clickTimeThreshold;
	        /**
	         * The maximum distance allowed between a pointer down event and a pointer up event
	         * to be treated as a click gesture.
	         * @member {Number} clickDistThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.clickDistThreshold = options.clickDistThreshold || $.DEFAULT_SETTINGS.clickDistThreshold;
	        /**
	         * The number of milliseconds within which two pointer down-up event combinations
	         * will be treated as a double-click gesture.
	         * @member {Number} dblClickTimeThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.dblClickTimeThreshold = options.dblClickTimeThreshold || $.DEFAULT_SETTINGS.dblClickTimeThreshold;
	        /**
	         * The maximum distance allowed between two pointer click events
	         * to be treated as a click gesture.
	         * @member {Number} clickDistThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.dblClickDistThreshold = options.dblClickDistThreshold || $.DEFAULT_SETTINGS.dblClickDistThreshold;
	        this.userData              = options.userData          || null;
	        this.stopDelay             = options.stopDelay         || 50;

	        this.enterHandler             = options.enterHandler             || null;
	        this.exitHandler              = options.exitHandler              || null;
	        this.pressHandler             = options.pressHandler             || null;
	        this.nonPrimaryPressHandler   = options.nonPrimaryPressHandler   || null;
	        this.releaseHandler           = options.releaseHandler           || null;
	        this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null;
	        this.moveHandler              = options.moveHandler              || null;
	        this.scrollHandler            = options.scrollHandler            || null;
	        this.clickHandler             = options.clickHandler             || null;
	        this.dblClickHandler          = options.dblClickHandler          || null;
	        this.dragHandler              = options.dragHandler              || null;
	        this.dragEndHandler           = options.dragEndHandler           || null;
	        this.pinchHandler             = options.pinchHandler             || null;
	        this.stopHandler              = options.stopHandler              || null;
	        this.keyDownHandler           = options.keyDownHandler           || null;
	        this.keyUpHandler             = options.keyUpHandler             || null;
	        this.keyHandler               = options.keyHandler               || null;
	        this.focusHandler             = options.focusHandler             || null;
	        this.blurHandler              = options.blurHandler              || null;

	        //Store private properties in a scope sealed hash map
	        var _this = this;

	        /**
	         * @private
	         * @property {Boolean} tracking
	         *      Are we currently tracking pointer events for this element.
	         */
	        THIS[ this.hash ] = {
	            click:                 function ( event ) { onClick( _this, event ); },
	            dblclick:              function ( event ) { onDblClick( _this, event ); },
	            keydown:               function ( event ) { onKeyDown( _this, event ); },
	            keyup:                 function ( event ) { onKeyUp( _this, event ); },
	            keypress:              function ( event ) { onKeyPress( _this, event ); },
	            focus:                 function ( event ) { onFocus( _this, event ); },
	            blur:                  function ( event ) { onBlur( _this, event ); },

	            wheel:                 function ( event ) { onWheel( _this, event ); },
	            mousewheel:            function ( event ) { onMouseWheel( _this, event ); },
	            DOMMouseScroll:        function ( event ) { onMouseWheel( _this, event ); },
	            MozMousePixelScroll:   function ( event ) { onMouseWheel( _this, event ); },

	            mouseenter:            function ( event ) { onMouseEnter( _this, event ); }, // Used on IE8 only
	            mouseleave:            function ( event ) { onMouseLeave( _this, event ); }, // Used on IE8 only
	            mouseover:             function ( event ) { onMouseOver( _this, event ); },
	            mouseout:              function ( event ) { onMouseOut( _this, event ); },
	            mousedown:             function ( event ) { onMouseDown( _this, event ); },
	            mouseup:               function ( event ) { onMouseUp( _this, event ); },
	            mouseupcaptured:       function ( event ) { onMouseUpCaptured( _this, event ); },
	            mousemove:             function ( event ) { onMouseMove( _this, event ); },
	            mousemovecaptured:     function ( event ) { onMouseMoveCaptured( _this, event ); },

	            touchstart:            function ( event ) { onTouchStart( _this, event ); },
	            touchend:              function ( event ) { onTouchEnd( _this, event ); },
	            touchendcaptured:      function ( event ) { onTouchEndCaptured( _this, event ); },
	            touchmove:             function ( event ) { onTouchMove( _this, event ); },
	            touchmovecaptured:     function ( event ) { onTouchMoveCaptured( _this, event ); },
	            touchcancel:           function ( event ) { onTouchCancel( _this, event ); },

	            gesturestart:          function ( event ) { onGestureStart( _this, event ); },
	            gesturechange:         function ( event ) { onGestureChange( _this, event ); },

	            pointerover:           function ( event ) { onPointerOver( _this, event ); },
	            MSPointerOver:         function ( event ) { onPointerOver( _this, event ); },
	            pointerout:            function ( event ) { onPointerOut( _this, event ); },
	            MSPointerOut:          function ( event ) { onPointerOut( _this, event ); },
	            pointerdown:           function ( event ) { onPointerDown( _this, event ); },
	            MSPointerDown:         function ( event ) { onPointerDown( _this, event ); },
	            pointerup:             function ( event ) { onPointerUp( _this, event ); },
	            MSPointerUp:           function ( event ) { onPointerUp( _this, event ); },
	            pointermove:           function ( event ) { onPointerMove( _this, event ); },
	            MSPointerMove:         function ( event ) { onPointerMove( _this, event ); },
	            pointercancel:         function ( event ) { onPointerCancel( _this, event ); },
	            MSPointerCancel:       function ( event ) { onPointerCancel( _this, event ); },
	            pointerupcaptured:     function ( event ) { onPointerUpCaptured( _this, event ); },
	            pointermovecaptured:   function ( event ) { onPointerMoveCaptured( _this, event ); },

	            tracking:              false,

	            // Active pointers lists. Array of GesturePointList objects, one for each pointer device type.
	            // GesturePointList objects are added each time a pointer is tracked by a new pointer device type (see getActivePointersListByType()).
	            // Active pointers are any pointer being tracked for this element which are in the hit-test area
	            //     of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
	            activePointersLists:   [],

	            // Tracking for double-click gesture
	            lastClickPos:          null,
	            dblClickTimeOut:       null,

	            // Tracking for pinch gesture
	            pinchGPoints:          [],
	            lastPinchDist:         0,
	            currentPinchDist:      0,
	            lastPinchCenter:       null,
	            currentPinchCenter:    null
	        };

	        if ( !options.startDisabled ) {
	            this.setTracking( true );
	        }
	    };

	    $.MouseTracker.prototype = /** @lends OpenSeadragon.MouseTracker.prototype */{

	        /**
	         * Clean up any events or objects created by the tracker.
	         * @function
	         */
	        destroy: function () {
	            var i;

	            stopTracking( this );
	            this.element = null;

	            for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	                if ( MOUSETRACKERS[ i ] === this ) {
	                    MOUSETRACKERS.splice( i, 1 );
	                    break;
	                }
	            }

	            THIS[ this.hash ] = null;
	            delete THIS[ this.hash ];
	        },

	        /**
	         * Are we currently tracking events on this element.
	         * @deprecated Just use this.tracking
	         * @function
	         * @returns {Boolean} Are we currently tracking events on this element.
	         */
	        isTracking: function () {
	            return THIS[ this.hash ].tracking;
	        },

	        /**
	         * Enable or disable whether or not we are tracking events on this element.
	         * @function
	         * @param {Boolean} track True to start tracking, false to stop tracking.
	         * @returns {OpenSeadragon.MouseTracker} Chainable.
	         */
	        setTracking: function ( track ) {
	            if ( track ) {
	                startTracking( this );
	            } else {
	                stopTracking( this );
	            }
	            //chain
	            return this;
	        },

	        /**
	         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for the given pointer device type,
	         * creating and caching a new {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} if one doesn't already exist for the type.
	         * @function
	         * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
	         * @returns {OpenSeadragon.MouseTracker.GesturePointList}
	         */
	        getActivePointersListByType: function ( type ) {
	            var delegate = THIS[ this.hash ],
	                i,
	                len = delegate.activePointersLists.length,
	                list;

	            for ( i = 0; i < len; i++ ) {
	                if ( delegate.activePointersLists[ i ].type === type ) {
	                    return delegate.activePointersLists[ i ];
	                }
	            }

	            list = new $.MouseTracker.GesturePointList( type );
	            delegate.activePointersLists.push( list );
	            return list;
	        },

	        /**
	         * Returns the total number of pointers currently active on the tracked element.
	         * @function
	         * @returns {Number}
	         */
	        getActivePointerCount: function () {
	            var delegate = THIS[ this.hash ],
	                i,
	                len = delegate.activePointersLists.length,
	                count = 0;

	            for ( i = 0; i < len; i++ ) {
	                count += delegate.activePointersLists[ i ].getLength();
	            }

	            return count;
	        },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Number} event.pointers
	         *      Number of pointers (all types) active in the tracked element.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.buttonDownAny
	         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        enterHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Number} event.pointers
	         *      Number of pointers (all types) active in the tracked element.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.buttonDownAny
	         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        exitHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        pressHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.button
	         *      Button which caused the event.
	         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        nonPrimaryPressHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.insideElementReleased
	         *      True if the cursor inside the tracked element when the button was released.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        releaseHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.button
	         *      Button which caused the event.
	         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        nonPrimaryReleaseHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        moveHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.scroll
	         *      The scroll delta for the event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead. Touch devices no longer generate scroll event.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        scrollHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Boolean} event.quick
	         *      True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for ignoring drag events.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        clickHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dblClickHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {OpenSeadragon.Point} event.delta
	         *      The x,y components of the difference between the current position and the last drag event position.  Useful for ignoring or weighting the events.
	         * @param {Number} event.speed
	         *     Current computed speed, in pixels per second.
	         * @param {Number} event.direction
	         *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dragHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.speed
	         *     Speed at the end of a drag gesture, in pixels per second.
	         * @param {Number} event.direction
	         *     Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dragEndHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} event.gesturePoints
	         *      Gesture points associated with the gesture. Velocity data can be found here.
	         * @param {OpenSeadragon.Point} event.lastCenter
	         *      The previous center point of the two pinch contact points relative to the tracked element.
	         * @param {OpenSeadragon.Point} event.center
	         *      The center point of the two pinch contact points relative to the tracked element.
	         * @param {Number} event.lastDistance
	         *      The previous distance between the two pinch contact points in CSS pixels.
	         * @param {Number} event.distance
	         *      The distance between the two pinch contact points in CSS pixels.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        pinchHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        stopHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyDownHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyUpHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        focusHandler: function () { },

	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        blurHandler: function () { }
	    };


	    /**
	     * Provides continuous computation of velocity (speed and direction) of active pointers.
	     * This is a singleton, used by all MouseTracker instances, as it is unlikely there will ever be more than
	     * two active gesture pointers at a time.
	     *
	     * @private
	     * @member gesturePointVelocityTracker
	     * @memberof OpenSeadragon.MouseTracker
	     */
	    $.MouseTracker.gesturePointVelocityTracker = (function () {
	        var trackerPoints = [],
	            intervalId = 0,
	            lastTime = 0;

	        // Generates a unique identifier for a tracked gesture point
	        var _generateGuid = function ( tracker, gPoint ) {
	            return tracker.hash.toString() + gPoint.type + gPoint.id.toString();
	        };

	        // Interval timer callback. Computes velocity for all tracked gesture points.
	        var _doTracking = function () {
	            var i,
	                len = trackerPoints.length,
	                trackPoint,
	                gPoint,
	                now = $.now(),
	                elapsedTime,
	                distance,
	                speed;

	            elapsedTime = now - lastTime;
	            lastTime = now;

	            for ( i = 0; i < len; i++ ) {
	                trackPoint = trackerPoints[ i ];
	                gPoint = trackPoint.gPoint;
	                // Math.atan2 gives us just what we need for a velocity vector, as we can simply
	                //   use cos()/sin() to extract the x/y velocity components.
	                gPoint.direction = Math.atan2( gPoint.currentPos.y - trackPoint.lastPos.y, gPoint.currentPos.x - trackPoint.lastPos.x );
	                // speed = distance / elapsed time
	                distance = trackPoint.lastPos.distanceTo( gPoint.currentPos );
	                trackPoint.lastPos = gPoint.currentPos;
	                speed = 1000 * distance / ( elapsedTime + 1 );
	                // Simple biased average, favors the most recent speed computation. Smooths out erratic gestures a bit.
	                gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed;
	            }
	        };

	        // Public. Add a gesture point to be tracked
	        var addPoint = function ( tracker, gPoint ) {
	            var guid = _generateGuid( tracker, gPoint );

	            trackerPoints.push(
	                {
	                    guid: guid,
	                    gPoint: gPoint,
	                    lastPos: gPoint.currentPos
	                } );

	            // Only fire up the interval timer when there's gesture pointers to track
	            if ( trackerPoints.length === 1 ) {
	                lastTime = $.now();
	                intervalId = window.setInterval( _doTracking, 50 );
	            }
	        };

	        // Public. Stop tracking a gesture point
	        var removePoint = function ( tracker, gPoint ) {
	            var guid = _generateGuid( tracker, gPoint ),
	                i,
	                len = trackerPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( trackerPoints[ i ].guid === guid ) {
	                    trackerPoints.splice( i, 1 );
	                    // Only run the interval timer if theres gesture pointers to track
	                    len--;
	                    if ( len === 0 ) {
	                        window.clearInterval( intervalId );
	                    }
	                    break;
	                }
	            }
	        };

	        return {
	            addPoint:    addPoint,
	            removePoint: removePoint
	        };
	    } )();


	///////////////////////////////////////////////////////////////////////////////
	// Pointer event model and feature detection
	///////////////////////////////////////////////////////////////////////////////

	    $.MouseTracker.captureElement = document;

	    /**
	     * Detect available mouse wheel event name.
	     */
	    $.MouseTracker.wheelEventName = ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version > 8 ) ||
	                                                ( 'onwheel' in document.createElement( 'div' ) ) ? 'wheel' : // Modern browsers support 'wheel'
	                                    document.onmousewheel !== undefined ? 'mousewheel' :                     // Webkit and IE support at least 'mousewheel'
	                                    'DOMMouseScroll';                                                        // Assume old Firefox

	    /**
	     * Detect legacy mouse capture support.
	     */
	    $.MouseTracker.supportsMouseCapture = (function () {
	        var divElement = document.createElement( 'div' );
	        return $.isFunction( divElement.setCapture ) && $.isFunction( divElement.releaseCapture );
	    }());

	    /**
	     * Detect browser pointer device event model(s) and build appropriate list of events to subscribe to.
	     */
	    $.MouseTracker.subscribeEvents = [ "click", "dblclick", "keydown", "keyup", "keypress", "focus", "blur", $.MouseTracker.wheelEventName ];

	    if( $.MouseTracker.wheelEventName == "DOMMouseScroll" ) {
	        // Older Firefox
	        $.MouseTracker.subscribeEvents.push( "MozMousePixelScroll" );
	    }

	    // Note: window.navigator.pointerEnable is deprecated on IE 11 and not part of W3C spec.
	    if ( window.PointerEvent && ( window.navigator.pointerEnabled || $.Browser.vendor !== $.BROWSERS.IE ) ) {
	        // IE11 and other W3C Pointer Event implementations (see http://www.w3.org/TR/pointerevents)
	        $.MouseTracker.havePointerEvents = true;
	        $.MouseTracker.subscribeEvents.push( "pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel" );
	        $.MouseTracker.unprefixedPointerEvents = true;
	        if( navigator.maxTouchPoints ) {
	            $.MouseTracker.maxTouchPoints = navigator.maxTouchPoints;
	        } else {
	            $.MouseTracker.maxTouchPoints = 0;
	        }
	        $.MouseTracker.haveMouseEnter = false;
	    } else if ( window.MSPointerEvent && window.navigator.msPointerEnabled ) {
	        // IE10
	        $.MouseTracker.havePointerEvents = true;
	        $.MouseTracker.subscribeEvents.push( "MSPointerOver", "MSPointerOut", "MSPointerDown", "MSPointerUp", "MSPointerMove", "MSPointerCancel" );
	        $.MouseTracker.unprefixedPointerEvents = false;
	        if( navigator.msMaxTouchPoints ) {
	            $.MouseTracker.maxTouchPoints = navigator.msMaxTouchPoints;
	        } else {
	            $.MouseTracker.maxTouchPoints = 0;
	        }
	        $.MouseTracker.haveMouseEnter = false;
	    } else {
	        // Legacy W3C mouse events
	        $.MouseTracker.havePointerEvents = false;
	        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	            $.MouseTracker.subscribeEvents.push( "mouseenter", "mouseleave" );
	            $.MouseTracker.haveMouseEnter = true;
	        } else {
	            $.MouseTracker.subscribeEvents.push( "mouseover", "mouseout" );
	            $.MouseTracker.haveMouseEnter = false;
	        }
	        $.MouseTracker.subscribeEvents.push( "mousedown", "mouseup", "mousemove" );
	        if ( 'ontouchstart' in window ) {
	            // iOS, Android, and other W3c Touch Event implementations
	            //    (see http://www.w3.org/TR/touch-events/)
	            //    (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            //    (see https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            $.MouseTracker.subscribeEvents.push( "touchstart", "touchend", "touchmove", "touchcancel" );
	        }
	        if ( 'ongesturestart' in window ) {
	            // iOS (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            //   Subscribe to these to prevent default gesture handling
	            $.MouseTracker.subscribeEvents.push( "gesturestart", "gesturechange" );
	        }
	        $.MouseTracker.mousePointerId = "legacy-mouse";
	        $.MouseTracker.maxTouchPoints = 10;
	    }


	///////////////////////////////////////////////////////////////////////////////
	// Classes and typedefs
	///////////////////////////////////////////////////////////////////////////////

	    /**
	     * Represents a point of contact on the screen made by a mouse cursor, pen, touch, or other pointer device.
	     *
	     * @typedef {Object} GesturePoint
	     * @memberof OpenSeadragon.MouseTracker
	     *
	     * @property {Number} id
	     *     Identifier unique from all other active GesturePoints for a given pointer device.
	     * @property {String} type
	     *     The pointer device type: "mouse", "touch", "pen", etc.
	     * @property {Boolean} captured
	     *     True if events for the gesture point are captured to the tracked element.
	     * @property {Boolean} isPrimary
	     *     True if the gesture point is a master pointer amongst the set of active pointers for each pointer type. True for mouse and primary (first) touch/pen pointers.
	     * @property {Boolean} insideElementPressed
	     *     True if button pressed or contact point initiated inside the screen area of the tracked element.
	     * @property {Boolean} insideElement
	     *     True if pointer or contact point is currently inside the bounds of the tracked element.
	     * @property {Number} speed
	     *     Current computed speed, in pixels per second.
	     * @property {Number} direction
	     *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {OpenSeadragon.Point} contactPos
	     *     The initial pointer contact position, relative to the page including any scrolling. Only valid if the pointer has contact (pressed, touch contact, pen contact).
	     * @property {Number} contactTime
	     *     The initial pointer contact time, in milliseconds. Only valid if the pointer has contact (pressed, touch contact, pen contact).
	     * @property {OpenSeadragon.Point} lastPos
	     *     The last pointer position, relative to the page including any scrolling.
	     * @property {Number} lastTime
	     *     The last pointer contact time, in milliseconds.
	     * @property {OpenSeadragon.Point} currentPos
	     *     The current pointer position, relative to the page including any scrolling.
	     * @property {Number} currentTime
	     *     The current pointer contact time, in milliseconds.
	     */


	    /**
	     * @class GesturePointList
	     * @classdesc Provides an abstraction for a set of active {@link OpenSeadragon.MouseTracker.GesturePoint|GesturePoint} objects for a given pointer device type.
	     *            Active pointers are any pointer being tracked for this element which are in the hit-test area
	     *            of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
	     * @memberof OpenSeadragon.MouseTracker
	     * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
	     */
	    $.MouseTracker.GesturePointList = function ( type ) {
	        this._gPoints = [];
	        /**
	         * The pointer device type: "mouse", "touch", "pen", etc.
	         * @member {String} type
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.type = type;
	        /**
	         * Current buttons pressed for the device.
	         * Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @member {Number} buttons
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.buttons = 0;
	        /**
	         * Current number of contact points (touch points, mouse down, etc.) for the device.
	         * @member {Number} contacts
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.contacts = 0;
	        /**
	         * Current number of clicks for the device. Used for multiple click gesture tracking.
	         * @member {Number} clicks
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.clicks = 0;
	        /**
	         * Current number of captured pointers for the device.
	         * @member {Number} captureCount
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.captureCount = 0;
	    };
	    $.MouseTracker.GesturePointList.prototype = /** @lends OpenSeadragon.MouseTracker.GesturePointList.prototype */{
	        /**
	         * @function
	         * @returns {Number} Number of gesture points in the list.
	         */
	        getLength: function () {
	            return this._gPoints.length;
	        },
	        /**
	         * @function
	         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePoint>} The list of gesture points in the list as an array (read-only).
	         */
	        asArray: function () {
	            return this._gPoints;
	        },
	        /**
	         * @function
	         * @param {OpenSeadragon.MouseTracker.GesturePoint} gesturePoint - A gesture point to add to the list.
	         * @returns {Number} Number of gesture points in the list.
	         */
	        add: function ( gp ) {
	            return this._gPoints.push( gp );
	        },
	        /**
	         * @function
	         * @param {Number} id - The id of the gesture point to remove from the list.
	         * @returns {Number} Number of gesture points in the list.
	         */
	        removeById: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].id === id ) {
	                    this._gPoints.splice( i, 1 );
	                    break;
	                }
	            }
	            return this._gPoints.length;
	        },
	        /**
	         * @function
	         * @param {Number} index - The index of the gesture point to retrieve from the list.
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point at the given index, or null if not found.
	         */
	        getByIndex: function ( index ) {
	            if ( index < this._gPoints.length) {
	                return this._gPoints[ index ];
	            }

	            return null;
	        },
	        /**
	         * @function
	         * @param {Number} id - The id of the gesture point to retrieve from the list.
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point with the given id, or null if not found.
	         */
	        getById: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].id === id ) {
	                    return this._gPoints[ i ];
	                }
	            }
	            return null;
	        },
	        /**
	         * @function
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The primary gesture point in the list, or null if not found.
	         */
	        getPrimary: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].isPrimary ) {
	                    return this._gPoints[ i ];
	                }
	            }
	            return null;
	        }
	    };


	///////////////////////////////////////////////////////////////////////////////
	// Utility functions
	///////////////////////////////////////////////////////////////////////////////

	    /**
	     * Removes all tracked pointers.
	     * @private
	     * @inner
	     */
	    function clearTrackedPointers( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            i,
	            pointerListCount = delegate.activePointersLists.length;

	        for ( i = 0; i < pointerListCount; i++ ) {
	            if ( delegate.activePointersLists[ i ].captureCount > 0 ) {
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'mousemove',
	                    delegate.mousemovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'mouseup',
	                    delegate.mouseupcaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    $.MouseTracker.unprefixedPointerEvents ? 'pointermove' : 'MSPointerMove',
	                    delegate.pointermovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    $.MouseTracker.unprefixedPointerEvents ? 'pointerup' : 'MSPointerUp',
	                    delegate.pointerupcaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'touchmove',
	                    delegate.touchmovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'touchend',
	                    delegate.touchendcaptured,
	                    true
	                );

	                delegate.activePointersLists[ i ].captureCount = 0;
	            }
	        }

	        for ( i = 0; i < pointerListCount; i++ ) {
	            delegate.activePointersLists.pop();
	        }
	    }

	    /**
	     * Starts tracking pointer events on the tracked element.
	     * @private
	     * @inner
	     */
	    function startTracking( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            event,
	            i;

	        if ( !delegate.tracking ) {
	            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {
	                event = $.MouseTracker.subscribeEvents[ i ];
	                $.addEvent(
	                    tracker.element,
	                    event,
	                    delegate[ event ],
	                    false
	                );
	            }

	            clearTrackedPointers( tracker );

	            delegate.tracking = true;
	        }
	    }

	    /**
	     * Stops tracking pointer events on the tracked element.
	     * @private
	     * @inner
	     */
	    function stopTracking( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            event,
	            i;

	        if ( delegate.tracking ) {
	            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {
	                event = $.MouseTracker.subscribeEvents[ i ];
	                $.removeEvent(
	                    tracker.element,
	                    event,
	                    delegate[ event ],
	                    false
	                );
	            }

	            clearTrackedPointers( tracker );

	            delegate.tracking = false;
	        }
	    }

	    /**
	     * @private
	     * @inner
	     */
	    function getCaptureEventParams( tracker, pointerType ) {
	        var delegate = THIS[ tracker.hash ];

	        if ( pointerType === 'pointerevent' ) {
	            return {
	                upName: $.MouseTracker.unprefixedPointerEvents ? 'pointerup' : 'MSPointerUp',
	                upHandler: delegate.pointerupcaptured,
	                moveName: $.MouseTracker.unprefixedPointerEvents ? 'pointermove' : 'MSPointerMove',
	                moveHandler: delegate.pointermovecaptured
	            };
	        } else if ( pointerType === 'mouse' ) {
	            return {
	                upName: 'mouseup',
	                upHandler: delegate.mouseupcaptured,
	                moveName: 'mousemove',
	                moveHandler: delegate.mousemovecaptured
	            };
	        } else if ( pointerType === 'touch' ) {
	            return {
	                upName: 'touchend',
	                upHandler: delegate.touchendcaptured,
	                moveName: 'touchmove',
	                moveHandler: delegate.touchmovecaptured
	            };
	        } else {
	            throw new Error( "MouseTracker.getCaptureEventParams: Unknown pointer type." );
	        }
	    }

	    /**
	     * Begin capturing pointer events to the tracked element.
	     * @private
	     * @inner
	     */
	    function capturePointer( tracker, pointerType ) {
	        var pointsList = tracker.getActivePointersListByType( pointerType ),
	            eventParams;

	        pointsList.captureCount++;

	        if ( pointsList.captureCount === 1 ) {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                tracker.element.setCapture( true );
	            } else {
	                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? 'pointerevent' : pointerType );
	                // We emulate mouse capture by hanging listeners on the document object.
	                //    (Note we listen on the capture phase so the captured handlers will get called first)
	                $.addEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.upName,
	                    eventParams.upHandler,
	                    true
	                );
	                $.addEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.moveName,
	                    eventParams.moveHandler,
	                    true
	                );
	            }
	        }
	    }


	    /**
	     * Stop capturing pointer events to the tracked element.
	     * @private
	     * @inner
	     */
	    function releasePointer( tracker, pointerType ) {
	        var pointsList = tracker.getActivePointersListByType( pointerType ),
	            eventParams;

	        pointsList.captureCount--;

	        if ( pointsList.captureCount === 0 ) {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                tracker.element.releaseCapture();
	            } else {
	                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? 'pointerevent' : pointerType );
	                // We emulate mouse capture by hanging listeners on the document object.
	                //    (Note we listen on the capture phase so the captured handlers will get called first)
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.moveName,
	                    eventParams.moveHandler,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.upName,
	                    eventParams.upHandler,
	                    true
	                );
	            }
	        }
	    }


	    /**
	     * Gets a W3C Pointer Events model compatible pointer type string from a DOM pointer event.
	     * IE10 used a long integer value, but the W3C specification (and IE11+) use a string "mouse", "touch", "pen", etc.
	     * @private
	     * @inner
	     */
	    function getPointerType( event ) {
	        var pointerTypeStr;
	        if ( $.MouseTracker.unprefixedPointerEvents ) {
	            pointerTypeStr = event.pointerType;
	        } else {
	            // IE10
	            //  MSPOINTER_TYPE_TOUCH: 0x00000002
	            //  MSPOINTER_TYPE_PEN:   0x00000003
	            //  MSPOINTER_TYPE_MOUSE: 0x00000004
	            switch( event.pointerType )
	            {
	                case 0x00000002:
	                    pointerTypeStr = 'touch';
	                    break;
	                case 0x00000003:
	                    pointerTypeStr = 'pen';
	                    break;
	                case 0x00000004:
	                    pointerTypeStr = 'mouse';
	                    break;
	                default:
	                    pointerTypeStr = '';
	            }
	        }
	        return pointerTypeStr;
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function getMouseAbsolute( event ) {
	        return $.getMousePosition( event );
	    }

	    /**
	     * @private
	     * @inner
	     */
	    function getMouseRelative( event, element ) {
	        return getPointRelativeToAbsolute( getMouseAbsolute( event ), element );
	    }

	    /**
	     * @private
	     * @inner
	     */
	    function getPointRelativeToAbsolute( point, element ) {
	        var offset = $.getElementOffset( element );
	        return point.minus( offset );
	    }

	    /**
	     * @private
	     * @inner
	     */
	    function getCenterPoint( point1, point2 ) {
	        return new $.Point( ( point1.x + point2.x ) / 2, ( point1.y + point2.y ) / 2 );
	    }


	///////////////////////////////////////////////////////////////////////////////
	// Device-specific DOM event handlers
	///////////////////////////////////////////////////////////////////////////////

	    /**
	     * @private
	     * @inner
	     */
	    function onClick( tracker, event ) {
	        if ( tracker.clickHandler ) {
	            $.cancelEvent( event );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onDblClick( tracker, event ) {
	        if ( tracker.dblClickHandler ) {
	            $.cancelEvent( event );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onKeyDown( tracker, event ) {
	        //$.console.log( "keydown %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyDownHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyDownHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onKeyUp( tracker, event ) {
	        //$.console.log( "keyup %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyUpHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyUpHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onKeyPress( tracker, event ) {
	        //$.console.log( "keypress %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onFocus( tracker, event ) {
	        //console.log( "focus %s", event );
	        var propagate;
	        if ( tracker.focusHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.focusHandler(
	                {
	                    eventSource:          tracker,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( event );
	            }
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onBlur( tracker, event ) {
	        //console.log( "blur %s", event );
	        var propagate;
	        if ( tracker.blurHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.blurHandler(
	                {
	                    eventSource:          tracker,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( event );
	            }
	        }
	    }


	    /**
	     * Handler for 'wheel' events
	     *
	     * @private
	     * @inner
	     */
	    function onWheel( tracker, event ) {
	        handleWheelEvent( tracker, event, event );
	    }


	    /**
	     * Handler for 'mousewheel', 'DOMMouseScroll', and 'MozMousePixelScroll' events
	     *
	     * @private
	     * @inner
	     */
	    function onMouseWheel( tracker, event ) {
	        event = $.getEvent( event );

	        // Simulate a 'wheel' event
	        var simulatedEvent = {
	            target:     event.target || event.srcElement,
	            type:       "wheel",
	            shiftKey:   event.shiftKey || false,
	            clientX:    event.clientX,
	            clientY:    event.clientY,
	            pageX:      event.pageX ? event.pageX : event.clientX,
	            pageY:      event.pageY ? event.pageY : event.clientY,
	            deltaMode:  event.type == "MozMousePixelScroll" ? 0 : 1, // 0=pixel, 1=line, 2=page
	            deltaX:     0,
	            deltaZ:     0
	        };

	        // Calculate deltaY
	        if ( $.MouseTracker.wheelEventName == "mousewheel" ) {
	            simulatedEvent.deltaY = - 1 / $.DEFAULT_SETTINGS.pixelsPerWheelLine * event.wheelDelta;
	        } else {
	            simulatedEvent.deltaY = event.detail;
	        }

	        handleWheelEvent( tracker, simulatedEvent, event );
	    }


	    /**
	     * Handles 'wheel' events.
	     * The event may be simulated by the legacy mouse wheel event handler (onMouseWheel()).
	     *
	     * @private
	     * @inner
	     */
	    function handleWheelEvent( tracker, event, originalEvent ) {
	        var nDelta = 0,
	            propagate;

	        // The nDelta variable is gated to provide smooth z-index scrolling
	        //   since the mouse wheel allows for substantial deltas meant for rapid
	        //   y-index scrolling.
	        // event.deltaMode: 0=pixel, 1=line, 2=page
	        // TODO: Deltas in pixel mode should be accumulated then a scroll value computed after $.DEFAULT_SETTINGS.pixelsPerWheelLine threshold reached
	        nDelta = event.deltaY < 0 ? 1 : -1;

	        if ( tracker.scrollHandler ) {
	            propagate = tracker.scrollHandler(
	                {
	                    eventSource:          tracker,
	                    pointerType:          'mouse',
	                    position:             getMouseRelative( event, tracker.element ),
	                    scroll:               nDelta,
	                    shift:                event.shiftKey,
	                    isTouchEvent:         false,
	                    originalEvent:        originalEvent,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( originalEvent );
	            }
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function isParentChild( parent, child )
	    {
	       if ( parent === child ) {
	           return false;
	       }
	       while ( child && child !== parent ) {
	           child = child.parentNode;
	       }
	       return child === parent;
	    }


	    /**
	     * Only used on IE 8
	     *
	     * @private
	     * @inner
	     */
	    function onMouseEnter( tracker, event ) {
	        event = $.getEvent( event );

	        handleMouseEnter( tracker, event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onMouseOver( tracker, event ) {
	        event = $.getEvent( event );

	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }

	        handleMouseEnter( tracker, event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseEnter( tracker, event ) {
	        var gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersEnter( tracker, event, [ gPoint ] );
	    }


	    /**
	     * Only used on IE 8
	     *
	     * @private
	     * @inner
	     */
	    function onMouseLeave( tracker, event ) {
	        event = $.getEvent( event );

	        handleMouseExit( tracker, event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onMouseOut( tracker, event ) {
	        event = $.getEvent( event );

	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }

	        handleMouseExit( tracker, event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseExit( tracker, event ) {
	        var gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersExit( tracker, event, [ gPoint ] );
	    }


	    /**
	     * Returns a W3C DOM level 3 standard button value given an event.button property:
	     *   -1 == none, 0 == primary/left, 1 == middle, 2 == secondary/right, 3 == X1/back, 4 == X2/forward, 5 == eraser (pen)
	     * @private
	     * @inner
	     */
	    function getStandardizedButton( button ) {
	        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	            // On IE 8, 0 == none, 1 == left, 2 == right, 3 == left and right, 4 == middle, 5 == left and middle, 6 == right and middle, 7 == all three
	            // TODO: Support chorded (multiple) button presses on IE 8?
	            if ( button === 1 ) {
	                return 0;
	            } else if ( button === 2 ) {
	                return 2;
	            } else if ( button === 4 ) {
	                return 1;
	            } else {
	                return -1;
	            }
	        } else {
	            return button;
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onMouseDown( tracker, event ) {
	        var gPoint;

	        event = $.getEvent( event );

	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        if ( updatePointersDown( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {
	            $.stopEvent( event );
	            capturePointer( tracker, 'mouse' );
	        }

	        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler ) {
	            $.cancelEvent( event );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onMouseUp( tracker, event ) {
	        handleMouseUp( tracker, event );
	    }

	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onMouseUp is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onMouseUpCaptured( tracker, event ) {
	        handleMouseUp( tracker, event );
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseUp( tracker, event ) {
	        var gPoint;

	        event = $.getEvent( event );

	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        if ( updatePointersUp( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {
	            releasePointer( tracker, 'mouse' );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onMouseMove( tracker, event ) {
	        handleMouseMove( tracker, event );
	   }


	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onMouseMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onMouseMoveCaptured( tracker, event ) {
	        handleMouseMove( tracker, event );
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseMove( tracker, event ) {
	        var gPoint;

	        event = $.getEvent( event );

	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersMove( tracker, event, [ gPoint ] );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function abortTouchContacts( tracker, event, pointsList ) {
	        var i,
	            gPointCount = pointsList.getLength(),
	            abortGPoints = [];

	        for ( i = 0; i < gPointCount; i++ ) {
	            abortGPoints.push( pointsList.getByIndex( i ) );
	        }

	        if ( abortGPoints.length > 0 ) {
	            // simulate touchend
	            updatePointersUp( tracker, event, abortGPoints, 0 ); // 0 means primary button press/release or touch contact
	            // release pointer capture
	            pointsList.captureCount = 1;
	            releasePointer( tracker, 'touch' );
	            // simulate touchleave
	            updatePointersExit( tracker, event, abortGPoints );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onTouchStart( tracker, event ) {
	        var time,
	            i,
	            j,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            parentGPoints,
	            pointsList = tracker.getActivePointersListByType( 'touch' );

	        time = $.now();

	        if ( pointsList.getLength() > event.touches.length - touchCount ) {
	            $.console.warn('Tracked touch contact count doesn\'t match event.touches.length. Removing all tracked touch pointers.');
	            abortTouchContacts( tracker, event, pointsList );
	        }

	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: time
	            } );
	        }

	        // simulate touchenter on our tracked element
	        updatePointersEnter( tracker, event, gPoints );

	        // simulate touchenter on our tracked element's tracked ancestor elements
	        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {
	                parentGPoints = [];
	                for ( j = 0; j < touchCount; j++ ) {
	                    parentGPoints.push( {
	                        id: event.changedTouches[ j ].identifier,
	                        type: 'touch',
	                        // isPrimary not set - let the updatePointers functions determine it
	                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),
	                        currentTime: time
	                    } );
	                }
	                updatePointersEnter( MOUSETRACKERS[ i ], event, parentGPoints );
	            }
	        }

	        if ( updatePointersDown( tracker, event, gPoints, 0 ) ) { // 0 means primary button press/release or touch contact
	            $.stopEvent( event );
	            capturePointer( tracker, 'touch' );
	        }

	        $.cancelEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onTouchEnd( tracker, event ) {
	        handleTouchEnd( tracker, event );
	    }


	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.
	     * onTouchEnd is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onTouchEndCaptured( tracker, event ) {
	        handleTouchEnd( tracker, event );
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleTouchEnd( tracker, event ) {
	        var time,
	            i,
	            j,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            parentGPoints;

	        time = $.now();

	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: time
	            } );
	        }

	        if ( updatePointersUp( tracker, event, gPoints, 0 ) ) {
	            releasePointer( tracker, 'touch' );
	        }

	        // simulate touchleave on our tracked element
	        updatePointersExit( tracker, event, gPoints );

	        // simulate touchleave on our tracked element's tracked ancestor elements
	        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {
	                parentGPoints = [];
	                for ( j = 0; j < touchCount; j++ ) {
	                    parentGPoints.push( {
	                        id: event.changedTouches[ j ].identifier,
	                        type: 'touch',
	                        // isPrimary not set - let the updatePointers functions determine it
	                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),
	                        currentTime: time
	                    } );
	                }
	                updatePointersExit( MOUSETRACKERS[ i ], event, parentGPoints );
	            }
	        }

	        $.cancelEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onTouchMove( tracker, event ) {
	        handleTouchMove( tracker, event );
	    }


	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.
	     * onTouchMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onTouchMoveCaptured( tracker, event ) {
	        handleTouchMove( tracker, event );
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handleTouchMove( tracker, event ) {
	        var i,
	            touchCount = event.changedTouches.length,
	            gPoints = [];

	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: $.now()
	            } );
	        }

	        updatePointersMove( tracker, event, gPoints );

	        $.cancelEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onTouchCancel( tracker, event ) {
	        var i,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            pointsList = tracker.getActivePointersListByType( 'touch' );
	        
	        abortTouchContacts( tracker, event, pointsList );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onGestureStart( tracker, event ) {
	        event.stopPropagation();
	        event.preventDefault();
	        return false;
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onGestureChange( tracker, event ) {
	        event.stopPropagation();
	        event.preventDefault();
	        return false;
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerOver( tracker, event ) {
	        var gPoint;

	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersEnter( tracker, event, [ gPoint ] );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerOut( tracker, event ) {
	        var gPoint;

	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersExit( tracker, event, [ gPoint ] );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerDown( tracker, event ) {
	        var gPoint;

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        if ( updatePointersDown( tracker, event, [ gPoint ], event.button ) ) {
	            $.stopEvent( event );
	            capturePointer( tracker, gPoint.type );
	        }

	        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	            $.cancelEvent( event );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerUp( tracker, event ) {
	        handlePointerUp( tracker, event );
	    }


	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onPointerUp is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onPointerUpCaptured( tracker, event ) {
	        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );
	        if ( pointsList.getById( event.pointerId ) ) {
	            handlePointerUp( tracker, event );
	        }
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerUp( tracker, event ) {
	        var gPoint;

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        if ( updatePointersUp( tracker, event, [ gPoint ], event.button ) ) {
	            releasePointer( tracker, gPoint.type );
	        }
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerMove( tracker, event ) {
	        handlePointerMove( tracker, event );
	    }


	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onPointerMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onPointerMoveCaptured( tracker, event ) {
	        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );
	        if ( pointsList.getById( event.pointerId ) ) {
	            handlePointerMove( tracker, event );
	        }
	        $.stopEvent( event );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerMove( tracker, event ) {
	        // Pointer changed coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)
	        var gPoint;

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };

	        updatePointersMove( tracker, event, [ gPoint ] );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function onPointerCancel( tracker, event ) {
	        var gPoint;

	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event )
	        };

	        updatePointersCancel( tracker, event, [ gPoint ] );
	    }


	///////////////////////////////////////////////////////////////////////////////
	// Device-agnostic DOM event handlers
	///////////////////////////////////////////////////////////////////////////////

	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
	     *     The GesturePointList to track the pointer in.
	     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
	     *      Gesture point to track.
	     * @returns {Number} Number of gesture points in pointsList.
	     */
	    function startTrackingPointer( pointsList, gPoint ) {

	        // If isPrimary is not known for the pointer then set it according to our rules:
	        //    true if the first pointer in the gesture, otherwise false
	        if ( !gPoint.hasOwnProperty( 'isPrimary' ) ) {
	            if ( pointsList.getLength() === 0 ) {
	                gPoint.isPrimary = true;
	            } else {
	                gPoint.isPrimary = false;
	            }
	        }
	        gPoint.speed = 0;
	        gPoint.direction = 0;
	        gPoint.contactPos = gPoint.currentPos;
	        gPoint.contactTime = gPoint.currentTime;
	        gPoint.lastPos = gPoint.currentPos;
	        gPoint.lastTime = gPoint.currentTime;

	        return pointsList.add( gPoint );
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
	     *     The GesturePointList to stop tracking the pointer on.
	     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
	     *      Gesture point to stop tracking.
	     * @returns {Number} Number of gesture points in pointsList.
	     */
	    function stopTrackingPointer( pointsList, gPoint ) {
	        var listLength,
	            primaryPoint;

	        if ( pointsList.getById( gPoint.id ) ) {
	            listLength = pointsList.removeById( gPoint.id );

	            // If isPrimary is not known for the pointer and we just removed the primary pointer from the list then we need to set another pointer as primary
	            if ( !gPoint.hasOwnProperty( 'isPrimary' ) ) {
	                primaryPoint = pointsList.getPrimary();
	                if ( !primaryPoint ) {
	                    primaryPoint = pointsList.getByIndex( 0 );
	                    if ( primaryPoint ) {
	                        primaryPoint.isPrimary = true;
	                    }
	                }
	            }
	        } else {
	            listLength = pointsList.getLength();
	        }

	        return listLength;
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersEnter( tracker, event, gPoints ) {
	        var pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            propagate;

	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );

	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                updateGPoint.insideElement = true;
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;

	                curGPoint = updateGPoint;
	            } else {
	                // Initialize for tracking and add to the tracking list
	                curGPoint.captured = false;
	                curGPoint.insideElementPressed = false;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }

	            // Enter
	            if ( tracker.enterHandler ) {
	                propagate = tracker.enterHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          curGPoint.type,
	                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        pointers:             tracker.getActivePointerCount(),
	                        insideElementPressed: curGPoint.insideElementPressed,
	                        buttonDownAny:        pointsList.buttons !== 0,
	                        isTouchEvent:         curGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        }
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersExit( tracker, event, gPoints ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            propagate;

	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );

	            if ( updateGPoint ) {
	                // Already tracking the pointer. If captured then update it, else stop tracking it
	                if ( updateGPoint.captured ) {
	                    updateGPoint.insideElement = false;
	                    updateGPoint.lastPos = updateGPoint.currentPos;
	                    updateGPoint.lastTime = updateGPoint.currentTime;
	                    updateGPoint.currentPos = curGPoint.currentPos;
	                    updateGPoint.currentTime = curGPoint.currentTime;
	                } else {
	                    stopTrackingPointer( pointsList, updateGPoint );
	                }

	                curGPoint = updateGPoint;
	            }

	            // Exit
	            if ( tracker.exitHandler ) {
	                propagate = tracker.exitHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          curGPoint.type,
	                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        pointers:             tracker.getActivePointerCount(),
	                        insideElementPressed: updateGPoint ? updateGPoint.insideElementPressed : false,
	                        buttonDownAny:        pointsList.buttons !== 0,
	                        isTouchEvent:         curGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );

	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        }
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     * @param {Number} buttonChanged
	     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
	     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
	     *
	     * @returns {Boolean} True if pointers should be captured to the tracked element, otherwise false.
	     */
	    function updatePointersDown( tracker, event, gPoints, buttonChanged ) {
	        var delegate = THIS[ tracker.hash ],
	            propagate,
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint;

	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        } else {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons += 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons += 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons += 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons += 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons += 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons += 32;
	                }
	            } else {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons |= 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons |= 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons |= 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons |= 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons |= 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons |= 32;
	                }
	            }
	        }

	        // Only capture and track primary button, pen, and touch contacts
	        if ( buttonChanged !== 0 ) {
	            // Aux Press
	            if ( tracker.nonPrimaryPressHandler ) {
	                propagate = tracker.nonPrimaryPressHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPoints[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),
	                        button:               buttonChanged,
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPoints[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }

	            return false;
	        }

	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );

	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                updateGPoint.captured = true;
	                updateGPoint.insideElementPressed = true;
	                updateGPoint.insideElement = true;
	                updateGPoint.contactPos = curGPoint.currentPos;
	                updateGPoint.contactTime = curGPoint.currentTime;
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;

	                curGPoint = updateGPoint;
	            } else {
	                // Initialize for tracking and add to the tracking list (no pointerover or pointermove event occurred before this)
	                curGPoint.captured = true;
	                curGPoint.insideElementPressed = true;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }

	            pointsList.contacts++;
	            //$.console.log('contacts++ ', pointsList.contacts);

	            if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	                $.MouseTracker.gesturePointVelocityTracker.addPoint( tracker, curGPoint );
	            }

	            if ( pointsList.contacts === 1 ) {
	                // Press
	                if ( tracker.pressHandler ) {
	                    propagate = tracker.pressHandler(
	                        {
	                            eventSource:          tracker,
	                            pointerType:          curGPoint.type,
	                            position:             getPointRelativeToAbsolute( curGPoint.contactPos, tracker.element ),
	                            buttons:              pointsList.buttons,
	                            isTouchEvent:         curGPoint.type === 'touch',
	                            originalEvent:        event,
	                            preventDefaultAction: false,
	                            userData:             tracker.userData
	                        }
	                    );
	                    if ( propagate === false ) {
	                        $.cancelEvent( event );
	                    }
	                }
	            } else if ( pointsList.contacts === 2 ) {
	                if ( tracker.pinchHandler && curGPoint.type === 'touch' ) {
	                    // Initialize for pinch
	                    delegate.pinchGPoints = pointsList.asArray();
	                    delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                    delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                }
	            }
	        }

	        return true;
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     * @param {Number} buttonChanged
	     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
	     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
	     *
	     * @returns {Boolean} True if pointer capture should be released from the tracked element, otherwise false.
	     */
	    function updatePointersUp( tracker, event, gPoints, buttonChanged ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            propagate,
	            insideElementReleased,
	            releasePoint,
	            releaseTime,
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            releaseCapture = false,
	            wasCaptured = false,
	            quick;

	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        } else {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons -= 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons -= 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons -= 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons -= 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons -= 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons -= 32;
	                }
	            } else {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons ^= ~1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons ^= ~4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons ^= ~2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons ^= ~8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons ^= ~16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons ^= ~32;
	                }
	            }
	        }

	        // Only capture and track primary button, pen, and touch contacts
	        if ( buttonChanged !== 0 ) {
	            // Aux Release
	            if ( tracker.nonPrimaryReleaseHandler ) {
	                propagate = tracker.nonPrimaryReleaseHandler(
	                    {
	                        eventSource:           tracker,
	                        pointerType:           gPoints[ 0 ].type,
	                        position:              getPointRelativeToAbsolute(  gPoints[ 0 ].currentPos, tracker.element ),
	                        button:                buttonChanged,
	                        buttons:               pointsList.buttons,
	                        isTouchEvent:          gPoints[ 0 ].type === 'touch',
	                        originalEvent:         event,
	                        preventDefaultAction:  false,
	                        userData:              tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }

	            return false;
	        }

	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );

	            if ( updateGPoint ) {
	                // Update the pointer, stop tracking it if not still in this element
	                if ( updateGPoint.captured ) {
	                    updateGPoint.captured = false;
	                    releaseCapture = true;
	                    wasCaptured = true;
	                }
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	                if ( !updateGPoint.insideElement ) {
	                    stopTrackingPointer( pointsList, updateGPoint );
	                }

	                releasePoint = updateGPoint.currentPos;
	                releaseTime = updateGPoint.currentTime;

	                if ( wasCaptured ) {
	                    // Pointer was activated in our element but could have been removed in any element since events are captured to our element

	                    pointsList.contacts--;
	                    //$.console.log('contacts-- ', pointsList.contacts);

	                    if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	                        $.MouseTracker.gesturePointVelocityTracker.removePoint( tracker, updateGPoint );
	                    }

	                    if ( pointsList.contacts === 0 ) {

	                        // Release (pressed in our element)
	                        if ( tracker.releaseHandler ) {
	                            propagate = tracker.releaseHandler(
	                                {
	                                    eventSource:           tracker,
	                                    pointerType:           updateGPoint.type,
	                                    position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),
	                                    buttons:               pointsList.buttons,
	                                    insideElementPressed:  updateGPoint.insideElementPressed,
	                                    insideElementReleased: updateGPoint.insideElement,
	                                    isTouchEvent:          updateGPoint.type === 'touch',
	                                    originalEvent:         event,
	                                    preventDefaultAction:  false,
	                                    userData:              tracker.userData
	                                }
	                            );
	                            if ( propagate === false ) {
	                                $.cancelEvent( event );
	                            }
	                        }

	                        // Drag End
	                        if ( tracker.dragEndHandler && !updateGPoint.currentPos.equals( updateGPoint.contactPos ) ) {
	                            propagate = tracker.dragEndHandler(
	                                {
	                                    eventSource:          tracker,
	                                    pointerType:          updateGPoint.type,
	                                    position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                    speed:                updateGPoint.speed,
	                                    direction:            updateGPoint.direction,
	                                    shift:                event.shiftKey,
	                                    isTouchEvent:         updateGPoint.type === 'touch',
	                                    originalEvent:        event,
	                                    preventDefaultAction: false,
	                                    userData:             tracker.userData
	                                }
	                            );
	                            if ( propagate === false ) {
	                                $.cancelEvent( event );
	                            }
	                        }

	                        // Click / Double-Click
	                        if ( ( tracker.clickHandler || tracker.dblClickHandler ) && updateGPoint.insideElement ) {
	                            quick = releaseTime - updateGPoint.contactTime <= tracker.clickTimeThreshold &&
	                                            updateGPoint.contactPos.distanceTo( releasePoint ) <= tracker.clickDistThreshold;

	                            // Click
	                            if ( tracker.clickHandler ) {
	                                propagate = tracker.clickHandler(
	                                    {
	                                        eventSource:          tracker,
	                                        pointerType:          updateGPoint.type,
	                                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                        quick:                quick,
	                                        shift:                event.shiftKey,
	                                        isTouchEvent:         updateGPoint.type === 'touch',
	                                        originalEvent:        event,
	                                        preventDefaultAction: false,
	                                        userData:             tracker.userData
	                                    }
	                                );
	                                if ( propagate === false ) {
	                                    $.cancelEvent( event );
	                                }
	                            }

	                            // Double-Click
	                            if ( tracker.dblClickHandler && quick ) {
	                                pointsList.clicks++;
	                                if ( pointsList.clicks === 1 ) {
	                                    delegate.lastClickPos = releasePoint;
	                                    /*jshint loopfunc:true*/
	                                    delegate.dblClickTimeOut = setTimeout( function() {
	                                        pointsList.clicks = 0;
	                                    }, tracker.dblClickTimeThreshold );
	                                    /*jshint loopfunc:false*/
	                                } else if ( pointsList.clicks === 2 ) {
	                                    clearTimeout( delegate.dblClickTimeOut );
	                                    pointsList.clicks = 0;
	                                    if ( delegate.lastClickPos.distanceTo( releasePoint ) <= tracker.dblClickDistThreshold ) {
	                                        propagate = tracker.dblClickHandler(
	                                            {
	                                                eventSource:          tracker,
	                                                pointerType:          updateGPoint.type,
	                                                position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                                shift:                event.shiftKey,
	                                                isTouchEvent:         updateGPoint.type === 'touch',
	                                                originalEvent:        event,
	                                                preventDefaultAction: false,
	                                                userData:             tracker.userData
	                                            }
	                                        );
	                                        if ( propagate === false ) {
	                                            $.cancelEvent( event );
	                                        }
	                                    }
	                                    delegate.lastClickPos = null;
	                                }
	                            }
	                        }
	                    } else if ( pointsList.contacts === 2 ) {
	                        if ( tracker.pinchHandler && updateGPoint.type === 'touch' ) {
	                            // Reset for pinch
	                            delegate.pinchGPoints = pointsList.asArray();
	                            delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                            delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                        }
	                    }
	                } else {
	                    // Pointer was activated in another element but removed in our element

	                    // Release (pressed in another element)
	                    if ( tracker.releaseHandler ) {
	                        propagate = tracker.releaseHandler(
	                            {
	                                eventSource:           tracker,
	                                pointerType:           updateGPoint.type,
	                                position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),
	                                buttons:               pointsList.buttons,
	                                insideElementPressed:  updateGPoint.insideElementPressed,
	                                insideElementReleased: updateGPoint.insideElement,
	                                isTouchEvent:          updateGPoint.type === 'touch',
	                                originalEvent:         event,
	                                preventDefaultAction:  false,
	                                userData:              tracker.userData
	                            }
	                        );
	                        if ( propagate === false ) {
	                            $.cancelEvent( event );
	                        }
	                    }
	                }
	            }
	        }

	        return releaseCapture;
	    }


	    /**
	     * Call when pointer(s) change coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)
	     *
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersMove( tracker, event, gPoints ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            gPointArray,
	            delta,
	            propagate;

	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        }

	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );

	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                if ( curGPoint.hasOwnProperty( 'isPrimary' ) ) {
	                    updateGPoint.isPrimary = curGPoint.isPrimary;
	                }
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	            } else {
	                // Initialize for tracking and add to the tracking list (no pointerover or pointerdown event occurred before this)
	                curGPoint.captured = false;
	                curGPoint.insideElementPressed = false;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }
	        }

	        // Stop (mouse only)
	        if ( tracker.stopHandler && gPoints[ 0 ].type === 'mouse' ) {
	            clearTimeout( tracker.stopTimeOut );
	            tracker.stopTimeOut = setTimeout( function() {
	                handlePointerStop( tracker, event, gPoints[ 0 ].type );
	            }, tracker.stopDelay );
	        }

	        if ( pointsList.contacts === 0 ) {
	            // Move (no contacts: hovering mouse or other hover-capable device)
	            if ( tracker.moveHandler ) {
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPoints[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPoints[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        } else if ( pointsList.contacts === 1 ) {
	            // Move (1 contact)
	            if ( tracker.moveHandler ) {
	                updateGPoint = pointsList.asArray()[ 0 ];
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          updateGPoint.type,
	                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         updateGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }

	            // Drag
	            if ( tracker.dragHandler ) {
	                updateGPoint = pointsList.asArray()[ 0 ];
	                delta = updateGPoint.currentPos.minus( updateGPoint.lastPos );
	                propagate = tracker.dragHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          updateGPoint.type,
	                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        delta:                delta,
	                        speed:                updateGPoint.speed,
	                        direction:            updateGPoint.direction,
	                        shift:                event.shiftKey,
	                        isTouchEvent:         updateGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        } else if ( pointsList.contacts === 2 ) {
	            // Move (2 contacts, use center)
	            if ( tracker.moveHandler ) {
	                gPointArray = pointsList.asArray();
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPointArray[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( getCenterPoint( gPointArray[ 0 ].currentPos, gPointArray[ 1 ].currentPos ), tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPointArray[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }

	            // Pinch
	            if ( tracker.pinchHandler && gPoints[ 0 ].type === 'touch' ) {
	                delta = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                if ( delta != delegate.currentPinchDist ) {
	                    delegate.lastPinchDist = delegate.currentPinchDist;
	                    delegate.currentPinchDist = delta;
	                    delegate.lastPinchCenter = delegate.currentPinchCenter;
	                    delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                    propagate = tracker.pinchHandler(
	                        {
	                            eventSource:          tracker,
	                            pointerType:          'touch',
	                            gesturePoints:        delegate.pinchGPoints,
	                            lastCenter:           getPointRelativeToAbsolute( delegate.lastPinchCenter, tracker.element ),
	                            center:               getPointRelativeToAbsolute( delegate.currentPinchCenter, tracker.element ),
	                            lastDistance:         delegate.lastPinchDist,
	                            distance:             delegate.currentPinchDist,
	                            shift:                event.shiftKey,
	                            originalEvent:        event,
	                            preventDefaultAction: false,
	                            userData:             tracker.userData
	                        }
	                    );
	                    if ( propagate === false ) {
	                        $.cancelEvent( event );
	                    }
	                }
	            }
	        }
	    }


	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersCancel( tracker, event, gPoints ) {
	        updatePointersUp( tracker, event, gPoints, 0 );
	        updatePointersExit( tracker, event, gPoints );
	    }


	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerStop( tracker, originalMoveEvent, pointerType ) {
	        if ( tracker.stopHandler ) {
	            tracker.stopHandler( {
	                eventSource:          tracker,
	                pointerType:          pointerType,
	                position:             getMouseRelative( originalMoveEvent, tracker.element ),
	                buttons:              tracker.getActivePointersListByType( pointerType ).buttons,
	                isTouchEvent:         pointerType === 'touch',
	                originalEvent:        originalMoveEvent,
	                preventDefaultAction: false,
	                userData:             tracker.userData
	            } );
	        }
	    }

	} ( OpenSeadragon ) );

	/*
	 * OpenSeadragon - Control
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * An enumeration of supported locations where controls can be anchored.
	 * The anchoring is always relative to the container.
	 * @member ControlAnchor
	 * @memberof OpenSeadragon
	 * @static
	 * @type {Object}
	 * @property {Number} NONE
	 * @property {Number} TOP_LEFT
	 * @property {Number} TOP_RIGHT
	 * @property {Number} BOTTOM_LEFT
	 * @property {Number} BOTTOM_RIGHT
	 * @property {Number} ABSOLUTE
	 */
	$.ControlAnchor = {
	    NONE: 0,
	    TOP_LEFT: 1,
	    TOP_RIGHT: 2,
	    BOTTOM_RIGHT: 3,
	    BOTTOM_LEFT: 4,
	    ABSOLUTE: 5
	};

	/**
	 * @class Control
	 * @classdesc A Control represents any interface element which is meant to allow the user
	 * to interact with the zoomable interface. Any control can be anchored to any
	 * element.
	 *
	 * @memberof OpenSeadragon
	 * @param {Element} element - the control element to be anchored in the container.
	 * @param {Object } options - All required and optional settings for configuring a control element.
	 * @param {OpenSeadragon.ControlAnchor} [options.anchor=OpenSeadragon.ControlAnchor.NONE] - the position of the control
	 *  relative to the container.
	 * @param {Boolean} [options.attachToViewer=true] - Whether the control should be added directly to the viewer, or
	 *  directly to the container
	 * @param {Boolean} [options.autoFade=true] - Whether the control should have the autofade behavior
	 * @param {Element} container - the element to control will be anchored too.
	 */
	$.Control = function ( element, options, container ) {
	    var parent = element.parentNode;
	    if (typeof options === 'number')
	    {
	        $.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; " +
	                        "please use an options object instead.  " +
	                        "Support for this deprecated variant is scheduled for removal in December 2013");
	         options = {anchor: options};
	    }
	    options.attachToViewer = (typeof options.attachToViewer === 'undefined') ? true : options.attachToViewer;
	    /**
	     * True if the control should have autofade behavior.
	     * @member {Boolean} autoFade
	     * @memberof OpenSeadragon.Control#
	     */
	    this.autoFade = (typeof options.autoFade === 'undefined') ? true : options.autoFade;
	    /**
	     * The element providing the user interface with some type of control (e.g. a zoom-in button).
	     * @member {Element} element
	     * @memberof OpenSeadragon.Control#
	     */
	    this.element    = element;
	    /**
	     * The position of the Control relative to its container.
	     * @member {OpenSeadragon.ControlAnchor} anchor
	     * @memberof OpenSeadragon.Control#
	     */
	    this.anchor     = options.anchor;
	    /**
	     * The Control's containing element.
	     * @member {Element} container
	     * @memberof OpenSeadragon.Control#
	     */
	    this.container  = container;
	    /**
	     * A neutral element surrounding the control element.
	     * @member {Element} wrapper
	     * @memberof OpenSeadragon.Control#
	     */
	    if ( this.anchor == $.ControlAnchor.ABSOLUTE ) {
	        this.wrapper    = $.makeNeutralElement( "div" );
	        this.wrapper.style.position = "absolute";
	        this.wrapper.style.top = typeof ( options.top )  == "number" ? ( options.top + 'px' ) : options.top;
	        this.wrapper.style.left  = typeof ( options.left )  == "number" ?  (options.left + 'px' ) : options.left;
	        this.wrapper.style.height = typeof ( options.height )  == "number" ? ( options.height + 'px' ) : options.height;
	        this.wrapper.style.width  = typeof ( options.width )  == "number" ? ( options.width + 'px' ) : options.width;
	        this.wrapper.style.margin = "0px";
	        this.wrapper.style.padding = "0px";

	        this.element.style.position = "relative";
	        this.element.style.top = "0px";
	        this.element.style.left = "0px";
	        this.element.style.height = "100%";
	        this.element.style.width = "100%";
	    } else {
	        this.wrapper    = $.makeNeutralElement( "div" );
	        this.wrapper.style.display = "inline-block";
	        if ( this.anchor == $.ControlAnchor.NONE ) {
	            // IE6 fix
	            this.wrapper.style.width = this.wrapper.style.height = "100%";
	        }
	    }
	    this.wrapper.appendChild( this.element );

	    if (options.attachToViewer ) {
	        if ( this.anchor == $.ControlAnchor.TOP_RIGHT ||
	             this.anchor == $.ControlAnchor.BOTTOM_RIGHT ) {
	            this.container.insertBefore(
	                this.wrapper,
	                this.container.firstChild
	            );
	        } else {
	            this.container.appendChild( this.wrapper );
	        }
	    } else {
	        parent.appendChild( this.wrapper );
	    }
	};

	$.Control.prototype = /** @lends OpenSeadragon.Control.prototype */{

	    /**
	     * Removes the control from the container.
	     * @function
	     */
	    destroy: function() {
	        this.wrapper.removeChild( this.element );
	        this.container.removeChild( this.wrapper );
	    },

	    /**
	     * Determines if the control is currently visible.
	     * @function
	     * @return {Boolean} true if currenly visible, false otherwise.
	     */
	    isVisible: function() {
	        return this.wrapper.style.display != "none";
	    },

	    /**
	     * Toggles the visibility of the control.
	     * @function
	     * @param {Boolean} visible - true to make visible, false to hide.
	     */
	    setVisible: function( visible ) {
	        this.wrapper.style.display = visible ?
	            ( this.anchor == $.ControlAnchor.ABSOLUTE ? 'block' : 'inline-block' ) :
	            "none";
	    },

	    /**
	     * Sets the opacity level for the control.
	     * @function
	     * @param {Number} opactiy - a value between 1 and 0 inclusively.
	     */
	    setOpacity: function( opacity ) {
	        if ( this.element[ $.SIGNAL ] && $.Browser.vendor == $.BROWSERS.IE ) {
	            $.setElementOpacity( this.element, opacity, true );
	        } else {
	            $.setElementOpacity( this.wrapper, opacity, true );
	        }
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - ControlDock
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){
	    /**
	     * @class ControlDock
	     * @classdesc Provides a container element (a &lt;form&gt; element) with support for the layout of control elements.
	     *
	     * @memberof OpenSeadragon
	     */
	    $.ControlDock = function( options ){
	        var layouts = [ 'topleft', 'topright', 'bottomright', 'bottomleft'],
	            layout,
	            i;

	        $.extend( true, this, {
	            id: 'controldock-'+$.now()+'-'+Math.floor(Math.random()*1000000),
	            container: $.makeNeutralElement( 'div' ),
	            controls: []
	        }, options );

	        // Disable the form's submit; otherwise button clicks and return keys
	        // can trigger it.
	        this.container.onsubmit = function() {
	            return false;
	        };

	        if( this.element ){
	            this.element = $.getElement( this.element );
	            this.element.appendChild( this.container );
	            this.element.style.position = 'relative';
	            this.container.style.width = '100%';
	            this.container.style.height = '100%';
	        }

	        for( i = 0; i < layouts.length; i++ ){
	            layout = layouts[ i ];
	            this.controls[ layout ] = $.makeNeutralElement( "div" );
	            this.controls[ layout ].style.position = 'absolute';
	            if ( layout.match( 'left' ) ){
	                this.controls[ layout ].style.left = '0px';
	            }
	            if ( layout.match( 'right' ) ){
	                this.controls[ layout ].style.right = '0px';
	            }
	            if ( layout.match( 'top' ) ){
	                this.controls[ layout ].style.top = '0px';
	            }
	            if ( layout.match( 'bottom' ) ){
	                this.controls[ layout ].style.bottom = '0px';
	            }
	        }

	        this.container.appendChild( this.controls.topleft );
	        this.container.appendChild( this.controls.topright );
	        this.container.appendChild( this.controls.bottomright );
	        this.container.appendChild( this.controls.bottomleft );
	    };

	    $.ControlDock.prototype = /** @lends OpenSeadragon.ControlDock.prototype */{

	        /**
	         * @function
	         */
	        addControl: function ( element, controlOptions ) {
	            element = $.getElement( element );
	            var div = null;

	            if ( getControlIndex( this, element ) >= 0 ) {
	                return;     // they're trying to add a duplicate control
	            }

	            switch ( controlOptions.anchor ) {
	                case $.ControlAnchor.TOP_RIGHT:
	                    div = this.controls.topright;
	                    element.style.position = "relative";
	                    element.style.paddingRight = "0px";
	                    element.style.paddingTop = "0px";
	                    break;
	                case $.ControlAnchor.BOTTOM_RIGHT:
	                    div = this.controls.bottomright;
	                    element.style.position = "relative";
	                    element.style.paddingRight = "0px";
	                    element.style.paddingBottom = "0px";
	                    break;
	                case $.ControlAnchor.BOTTOM_LEFT:
	                    div = this.controls.bottomleft;
	                    element.style.position = "relative";
	                    element.style.paddingLeft = "0px";
	                    element.style.paddingBottom = "0px";
	                    break;
	                case $.ControlAnchor.TOP_LEFT:
	                    div = this.controls.topleft;
	                    element.style.position = "relative";
	                    element.style.paddingLeft = "0px";
	                    element.style.paddingTop = "0px";
	                    break;
	                case $.ControlAnchor.ABSOLUTE:
	                    div = this.container;
	                    element.style.margin = "0px";
	                    element.style.padding = "0px";
	                    break;
	                default:
	                case $.ControlAnchor.NONE:
	                    div = this.container;
	                    element.style.margin = "0px";
	                    element.style.padding = "0px";
	                    break;
	            }

	            this.controls.push(
	                new $.Control( element, controlOptions, div )
	            );
	            element.style.display = "inline-block";
	        },


	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        removeControl: function ( element ) {
	            element = $.getElement( element );
	            var i = getControlIndex( this, element );

	            if ( i >= 0 ) {
	                this.controls[ i ].destroy();
	                this.controls.splice( i, 1 );
	            }

	            return this;
	        },

	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        clearControls: function () {
	            while ( this.controls.length > 0 ) {
	                this.controls.pop().destroy();
	            }

	            return this;
	        },


	        /**
	         * @function
	         * @return {Boolean}
	         */
	        areControlsEnabled: function () {
	            var i;

	            for ( i = this.controls.length - 1; i >= 0; i-- ) {
	                if ( this.controls[ i ].isVisible() ) {
	                    return true;
	                }
	            }

	            return false;
	        },


	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        setControlsEnabled: function( enabled ) {
	            var i;

	            for ( i = this.controls.length - 1; i >= 0; i-- ) {
	                this.controls[ i ].setVisible( enabled );
	            }

	            return this;
	        }

	    };


	    ///////////////////////////////////////////////////////////////////////////////
	    // Utility methods
	    ///////////////////////////////////////////////////////////////////////////////
	    function getControlIndex( dock, element ) {
	        var controls = dock.controls,
	            i;

	        for ( i = controls.length - 1; i >= 0; i-- ) {
	            if ( controls[ i ].element == element ) {
	                return i;
	            }
	        }

	        return -1;
	    }

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Viewer
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	// dictionary from hash to private properties
	var THIS = {};
	var nextHash = 1;

	/**
	 *
	 * The main point of entry into creating a zoomable image on the page.
	 *
	 * We have provided an idiomatic javascript constructor which takes
	 * a single object, but still support the legacy positional arguments.
	 *
	 * The options below are given in order that they appeared in the constructor
	 * as arguments and we translate a positional call into an idiomatic call.
	 *
	 * @class Viewer
	 * @classdesc The main OpenSeadragon viewer class.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @extends OpenSeadragon.ControlDock
	 * @param {OpenSeadragon.Options} options - Viewer options.
	 *
	 **/
	$.Viewer = function( options ) {

	    var args  = arguments,
	        _this = this,
	        i;


	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    if( !$.isPlainObject( options ) ){
	        options = {
	            id:                 args[ 0 ],
	            xmlPath:            args.length > 1 ? args[ 1 ] : undefined,
	            prefixUrl:          args.length > 2 ? args[ 2 ] : undefined,
	            controls:           args.length > 3 ? args[ 3 ] : undefined,
	            overlays:           args.length > 4 ? args[ 4 ] : undefined
	        };
	    }

	    //options.config and the general config argument are deprecated
	    //in favor of the more direct specification of optional settings
	    //being pass directly on the options object
	    if ( options.config ){
	        $.extend( true, options, options.config );
	        delete options.config;
	    }

	    //Public properties
	    //Allow the options object to override global defaults
	    $.extend( true, this, {

	        //internal state and dom identifiers
	        id:             options.id,
	        hash:           options.hash || nextHash++,

	        //dom nodes
	        /**
	         * The parent element of this Viewer instance, passed in when the Viewer was created.
	         * @member {Element} element
	         * @memberof OpenSeadragon.Viewer#
	         */
	        element:        null,
	        /**
	         * A &lt;div&gt; element (provided by {@link OpenSeadragon.ControlDock}), the base element of this Viewer instance.<br><br>
	         * Child element of {@link OpenSeadragon.Viewer#element}.
	         * @member {Element} container
	         * @memberof OpenSeadragon.Viewer#
	         */
	        container:      null,
	        /**
	         * A &lt;div&gt; element, the element where user-input events are handled for panning and zooming.<br><br>
	         * Child element of {@link OpenSeadragon.Viewer#container},
	         * positioned on top of {@link OpenSeadragon.Viewer#keyboardCommandArea}.<br><br>
	         * The parent of {@link OpenSeadragon.Drawer#canvas} instances.
	         * @member {Element} canvas
	         * @memberof OpenSeadragon.Viewer#
	         */
	        canvas:         null,

	        // Overlays list. An overlay allows to add html on top of the viewer.
	        overlays:           [],
	        // Container inside the canvas where overlays are drawn.
	        overlaysContainer:  null,

	        //private state properties
	        previousBody:   [],

	        //This was originally initialized in the constructor and so could never
	        //have anything in it.  now it can because we allow it to be specified
	        //in the options and is only empty by default if not specified. Also
	        //this array was returned from get_controls which I find confusing
	        //since this object has a controls property which is treated in other
	        //functions like clearControls.  I'm removing the accessors.
	        customControls: [],

	        //These are originally not part options but declared as members
	        //in initialize.  It's still considered idiomatic to put them here
	        source:         null,
	        /**
	         * Handles rendering of tiles in the viewer. Created for each TileSource opened.
	         * @member {OpenSeadragon.Drawer} drawer
	         * @memberof OpenSeadragon.Viewer#
	         */
	        drawer:             null,
	        world:              null,
	        /**
	         * Handles coordinate-related functionality - zoom, pan, rotation, etc. Created for each TileSource opened.
	         * @member {OpenSeadragon.Viewport} viewport
	         * @memberof OpenSeadragon.Viewer#
	         */
	        viewport:       null,
	        /**
	         * @member {OpenSeadragon.Navigator} navigator
	         * @memberof OpenSeadragon.Viewer#
	         */
	        navigator:      null,

	        //A collection viewport is a separate viewport used to provide
	        //simultaneous rendering of sets of tiles
	        collectionViewport:     null,
	        collectionDrawer:       null,

	        //UI image resources
	        //TODO: rename navImages to uiImages
	        navImages:      null,

	        //interface button controls
	        buttons:        null,

	        //TODO: this is defunct so safely remove it
	        profiler:       null

	    }, $.DEFAULT_SETTINGS, options );

	    if ( typeof( this.hash) === "undefined" ) {
	        throw new Error("A hash must be defined, either by specifying options.id or options.hash.");
	    }
	    if ( typeof( THIS[ this.hash ] ) !== "undefined" ) {
	        // We don't want to throw an error here, as the user might have discarded
	        // the previous viewer with the same hash and now want to recreate it.
	        $.console.warn("Hash " + this.hash + " has already been used.");
	    }

	    //Private state properties
	    THIS[ this.hash ] = {
	        "fsBoundsDelta":     new $.Point( 1, 1 ),
	        "prevContainerSize": null,
	        "animating":         false,
	        "forceRedraw":       false,
	        "mouseInside":       false,
	        "group":             null,
	        // whether we should be continuously zooming
	        "zooming":           false,
	        // how much we should be continuously zooming by
	        "zoomFactor":        null,
	        "lastZoomTime":      null,
	        "fullPage":          false,
	        "onfullscreenchange": null
	    };

	    this._sequenceIndex = 0;
	    this._firstOpen = true;
	    this._updateRequestId = null;
	    this._loadQueue = [];
	    this.currentOverlays = [];

	    this._lastScrollTime = $.now(); // variable used to help normalize the scroll event speed of different devices

	    //Inherit some behaviors and properties
	    $.EventSource.call( this );

	    this.addHandler( 'open-failed', function ( event ) {
	        var msg = $.getString( "Errors.OpenFailed", event.eventSource, event.message);
	        _this._showMessage( msg );
	    });

	    $.ControlDock.call( this, options );

	    //Deal with tile sources
	    if ( this.xmlPath  ){
	        //Deprecated option.  Now it is preferred to use the tileSources option
	        this.tileSources = [ this.xmlPath ];
	    }

	    this.element              = this.element || document.getElementById( this.id );
	    this.canvas               = $.makeNeutralElement( "div" );

	    this.canvas.className = "openseadragon-canvas";
	    (function( style ){
	        style.width    = "100%";
	        style.height   = "100%";
	        style.overflow = "hidden";
	        style.position = "absolute";
	        style.top      = "0px";
	        style.left     = "0px";
	    }(this.canvas.style));
	    $.setElementTouchActionNone( this.canvas );
	    this.canvas.tabIndex = options.tabIndex || 0;

	    //the container is created through applying the ControlDock constructor above
	    this.container.className = "openseadragon-container";
	    (function( style ){
	        style.width     = "100%";
	        style.height    = "100%";
	        style.position  = "relative";
	        style.overflow  = "hidden";
	        style.left      = "0px";
	        style.top       = "0px";
	        style.textAlign = "left";  // needed to protect against
	    }( this.container.style ));

	    this.container.insertBefore( this.canvas, this.container.firstChild );
	    this.element.appendChild( this.container );

	    //Used for toggling between fullscreen and default container size
	    //TODO: these can be closure private and shared across Viewer
	    //      instances.
	    this.bodyWidth      = document.body.style.width;
	    this.bodyHeight     = document.body.style.height;
	    this.bodyOverflow   = document.body.style.overflow;
	    this.docOverflow    = document.documentElement.style.overflow;

	    this.innerTracker = new $.MouseTracker({
	        element:                  this.canvas,
	        startDisabled:            this.mouseNavEnabled ? false : true,
	        clickTimeThreshold:       this.clickTimeThreshold,
	        clickDistThreshold:       this.clickDistThreshold,
	        dblClickTimeThreshold:    this.dblClickTimeThreshold,
	        dblClickDistThreshold:    this.dblClickDistThreshold,
	        keyDownHandler:           $.delegate( this, onCanvasKeyDown ),
	        keyHandler:               $.delegate( this, onCanvasKeyPress ),
	        clickHandler:             $.delegate( this, onCanvasClick ),
	        dblClickHandler:          $.delegate( this, onCanvasDblClick ),
	        dragHandler:              $.delegate( this, onCanvasDrag ),
	        dragEndHandler:           $.delegate( this, onCanvasDragEnd ),
	        enterHandler:             $.delegate( this, onCanvasEnter ),
	        exitHandler:              $.delegate( this, onCanvasExit ),
	        pressHandler:             $.delegate( this, onCanvasPress ),
	        releaseHandler:           $.delegate( this, onCanvasRelease ),
	        nonPrimaryPressHandler:   $.delegate( this, onCanvasNonPrimaryPress ),
	        nonPrimaryReleaseHandler: $.delegate( this, onCanvasNonPrimaryRelease ),
	        scrollHandler:            $.delegate( this, onCanvasScroll ),
	        pinchHandler:             $.delegate( this, onCanvasPinch )
	    });

	    this.outerTracker = new $.MouseTracker({
	        element:               this.container,
	        startDisabled:         this.mouseNavEnabled ? false : true,
	        clickTimeThreshold:    this.clickTimeThreshold,
	        clickDistThreshold:    this.clickDistThreshold,
	        dblClickTimeThreshold: this.dblClickTimeThreshold,
	        dblClickDistThreshold: this.dblClickDistThreshold,
	        enterHandler:          $.delegate( this, onContainerEnter ),
	        exitHandler:           $.delegate( this, onContainerExit )
	    });

	    if( this.toolbar ){
	        this.toolbar = new $.ControlDock({ element: this.toolbar });
	    }

	    this.bindStandardControls();

	    THIS[ this.hash ].prevContainerSize = _getSafeElemSize( this.container );

	    // Create the world
	    this.world = new $.World({
	        viewer: this
	    });

	    this.world.addHandler('add-item', function(event) {
	        // For backwards compatibility, we maintain the source property
	        _this.source = _this.world.getItemAt(0).source;

	        THIS[ _this.hash ].forceRedraw = true;

	        if (!_this._updateRequestId) {
	            _this._updateRequestId = scheduleUpdate( _this, updateMulti );
	        }
	    });

	    this.world.addHandler('remove-item', function(event) {
	        // For backwards compatibility, we maintain the source property
	        if (_this.world.getItemCount()) {
	            _this.source = _this.world.getItemAt(0).source;
	        } else {
	            _this.source = null;
	        }

	        THIS[ _this.hash ].forceRedraw = true;
	    });

	    this.world.addHandler('metrics-change', function(event) {
	        if (_this.viewport) {
	            _this.viewport.setHomeBounds(_this.world.getHomeBounds(), _this.world.getContentFactor());
	        }
	    });

	    this.world.addHandler('item-index-change', function(event) {
	        // For backwards compatibility, we maintain the source property
	        _this.source = _this.world.getItemAt(0).source;
	    });

	    // Create the viewport
	    this.viewport = new $.Viewport({
	        containerSize:      THIS[ this.hash ].prevContainerSize,
	        springStiffness:    this.springStiffness,
	        animationTime:      this.animationTime,
	        minZoomImageRatio:  this.minZoomImageRatio,
	        maxZoomPixelRatio:  this.maxZoomPixelRatio,
	        visibilityRatio:    this.visibilityRatio,
	        wrapHorizontal:     this.wrapHorizontal,
	        wrapVertical:       this.wrapVertical,
	        defaultZoomLevel:   this.defaultZoomLevel,
	        minZoomLevel:       this.minZoomLevel,
	        maxZoomLevel:       this.maxZoomLevel,
	        viewer:             this,
	        degrees:            this.degrees,
	        navigatorRotate:    this.navigatorRotate,
	        homeFillsViewer:    this.homeFillsViewer,
	        margins:            this.viewportMargins
	    });

	    this.viewport.setHomeBounds(this.world.getHomeBounds(), this.world.getContentFactor());

	    // Create the image loader
	    this.imageLoader = new $.ImageLoader({
	        jobLimit: this.imageLoaderLimit
	    });

	    // Create the tile cache
	    this.tileCache = new $.TileCache({
	        maxImageCacheCount: this.maxImageCacheCount
	    });

	    // Create the drawer
	    this.drawer = new $.Drawer({
	        viewer:             this,
	        viewport:           this.viewport,
	        element:            this.canvas,
	        debugGridColor:     this.debugGridColor
	    });

	    // Overlay container
	    this.overlaysContainer    = $.makeNeutralElement( "div" );
	    this.canvas.appendChild( this.overlaysContainer );

	    // Now that we have a drawer, see if it supports rotate. If not we need to remove the rotate buttons
	    if (!this.drawer.canRotate()) {
	        // Disable/remove the rotate left/right buttons since they aren't supported
	        if (this.rotateLeft) {
	            i = this.buttons.buttons.indexOf(this.rotateLeft);
	            this.buttons.buttons.splice(i, 1);
	            this.buttons.element.removeChild(this.rotateLeft.element);
	        }
	        if (this.rotateRight) {
	            i = this.buttons.buttons.indexOf(this.rotateRight);
	            this.buttons.buttons.splice(i, 1);
	            this.buttons.element.removeChild(this.rotateRight.element);
	        }
	    }

	    //Instantiate a navigator if configured
	    if ( this.showNavigator){
	        this.navigator = new $.Navigator({
	            id:                this.navigatorId,
	            position:          this.navigatorPosition,
	            sizeRatio:         this.navigatorSizeRatio,
	            maintainSizeRatio: this.navigatorMaintainSizeRatio,
	            top:               this.navigatorTop,
	            left:              this.navigatorLeft,
	            width:             this.navigatorWidth,
	            height:            this.navigatorHeight,
	            autoResize:        this.navigatorAutoResize,
	            prefixUrl:         this.prefixUrl,
	            viewer:            this,
	            navigatorRotate:   this.navigatorRotate,
	            crossOriginPolicy: this.crossOriginPolicy
	        });
	    }

	    // Sequence mode
	    if (this.sequenceMode) {
	        this.bindSequenceControls();
	    }

	    // Open initial tilesources
	    if (this.tileSources) {
	        this.open( this.tileSources );
	    }

	    // Add custom controls
	    for ( i = 0; i < this.customControls.length; i++ ) {
	        this.addControl(
	            this.customControls[ i ].id,
	            {anchor: this.customControls[ i ].anchor}
	        );
	    }

	    // Initial fade out
	    $.requestAnimationFrame( function(){
	        beginControlsAutoHide( _this );
	    } );
	};

	$.extend( $.Viewer.prototype, $.EventSource.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Viewer.prototype */{


	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isOpen: function () {
	        return !!this.world.getItemCount();
	    },

	    // deprecated
	    openDzi: function ( dzi ) {
	        $.console.error( "[Viewer.openDzi] this function is deprecated; use Viewer.open() instead." );
	        return this.open( dzi );
	    },

	    // deprecated
	    openTileSource: function ( tileSource ) {
	        $.console.error( "[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead." );
	        return this.open( tileSource );
	    },

	    /**
	     * Open tiled images into the viewer, closing any others.
	     * @function
	     * @param {Array|String|Object|Function} tileSources - This can be a TiledImage
	     * specifier, a TileSource specifier, or an array of either. A TiledImage specifier
	     * is the same as the options parameter for {@link OpenSeadragon.Viewer#addTiledImage},
	     * except for the index property; images are added in sequence.
	     * A TileSource specifier is anything you could pass as the tileSource property
	     * of the options parameter for {@link OpenSeadragon.Viewer#addTiledImage}.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:open
	     * @fires OpenSeadragon.Viewer.event:open-failed
	     */
	    open: function (tileSources) {
	        var _this = this;

	        this.close();

	        if (!tileSources) {
	            return;
	        }

	        if (this.sequenceMode && $.isArray(tileSources)) {
	            if (this.referenceStrip) {
	                this.referenceStrip.destroy();
	                this.referenceStrip = null;
	            }

	            this.tileSources = tileSources;
	            this._sequenceIndex = Math.max(0, Math.min(this.tileSources.length - 1, this.initialPage));
	            if (this.tileSources.length) {
	                this.open(this.tileSources[this._sequenceIndex]);

	                if ( this.showReferenceStrip ){
	                    this.referenceStrip = new $.ReferenceStrip({
	                        id:          this.referenceStripElement,
	                        position:    this.referenceStripPosition,
	                        sizeRatio:   this.referenceStripSizeRatio,
	                        scroll:      this.referenceStripScroll,
	                        height:      this.referenceStripHeight,
	                        width:       this.referenceStripWidth,
	                        tileSources: this.tileSources,
	                        prefixUrl:   this.prefixUrl,
	                        viewer:      this
	                    });
	                }
	            }

	            this._updateSequenceButtons( this._sequenceIndex );
	            return;
	        }

	        if (!$.isArray(tileSources)) {
	            tileSources = [tileSources];
	        }

	        if (!tileSources.length) {
	            return;
	        }

	        this._opening = true;

	        var expected = tileSources.length;
	        var successes = 0;
	        var failures = 0;
	        var failEvent;

	        var checkCompletion = function() {
	            if (successes + failures === expected) {
	                if (successes) {
	                    if (_this._firstOpen || !_this.preserveViewport) {
	                        _this.viewport.goHome( true );
	                        _this.viewport.update();
	                    }

	                    _this._firstOpen = false;

	                    var source = tileSources[0];
	                    if (source.tileSource) {
	                        source = source.tileSource;
	                    }

	                    // Global overlays
	                    if( _this.overlays && !_this.preserveOverlays ){
	                        for ( var i = 0; i < _this.overlays.length; i++ ) {
	                            _this.currentOverlays[ i ] = getOverlayObject( _this, _this.overlays[ i ] );
	                        }
	                    }

	                    _this._drawOverlays();
	                    _this._opening = false;

	                    /**
	                     * Raised when the viewer has opened and loaded one or more TileSources.
	                     *
	                     * @event open
	                     * @memberof OpenSeadragon.Viewer
	                     * @type {object}
	                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                     * @property {OpenSeadragon.TileSource} source - The tile source that was opened.
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    // TODO: what if there are multiple sources?
	                    _this.raiseEvent( 'open', { source: source } );
	                } else {
	                    _this._opening = false;

	                    /**
	                     * Raised when an error occurs loading a TileSource.
	                     *
	                     * @event open-failed
	                     * @memberof OpenSeadragon.Viewer
	                     * @type {object}
	                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                     * @property {String} message - Information about what failed.
	                     * @property {String} source - The tile source that failed.
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    _this.raiseEvent( 'open-failed', failEvent );
	                }
	            }
	        };

	        var doOne = function(options) {
	            if (!$.isPlainObject(options) || !options.tileSource) {
	                options = {
	                    tileSource: options
	                };
	            }

	            if (options.index !== undefined) {
	                $.console.error('[Viewer.open] setting indexes here is not supported; use addTiledImage instead');
	                delete options.index;
	            }

	            if (options.collectionImmediately === undefined) {
	                options.collectionImmediately = true;
	            }

	            var originalSuccess = options.success;
	            options.success = function(event) {
	                successes++;

	                // TODO: now that options has other things besides tileSource, the overlays
	                // should probably be at the options level, not the tileSource level.
	                if (options.tileSource.overlays) {
	                    for (var i = 0; i < options.tileSource.overlays.length; i++) {
	                        _this.addOverlay(options.tileSource.overlays[i]);
	                    }
	                }

	                if (originalSuccess) {
	                    originalSuccess(event);
	                }

	                checkCompletion();
	            };

	            var originalError = options.error;
	            options.error = function(event) {
	                failures++;

	                if (!failEvent) {
	                    failEvent = event;
	                }

	                if (originalError) {
	                    originalError(event);
	                }

	                checkCompletion();
	            };

	            _this.addTiledImage(options);
	        };

	        // TileSources
	        for (var i = 0; i < tileSources.length; i++) {
	            doOne(tileSources[i]);
	        }

	        return this;
	    },


	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:close
	     */
	    close: function ( ) {
	        if ( !THIS[ this.hash ] ) {
	            //this viewer has already been destroyed: returning immediately
	            return this;
	        }

	        this._opening = false;

	        if ( this.navigator ) {
	            this.navigator.close();
	        }

	        if( ! this.preserveOverlays) {
	            this.clearOverlays();
	            this.overlaysContainer.innerHTML = "";
	        }

	        THIS[ this.hash ].animating = false;
	        this.world.removeAll();
	        this.imageLoader.clear();

	        /**
	         * Raised when the viewer is closed (see {@link OpenSeadragon.Viewer#close}).
	         *
	         * @event close
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'close' );

	        return this;
	    },


	    /**
	     * Function to destroy the viewer and clean up everything created by OpenSeadragon.
	     *
	     * Example:
	     * var viewer = OpenSeadragon({
	     *   [...]
	     * });
	     *
	     * //when you are done with the viewer:
	     * viewer.destroy();
	     * viewer = null; //important
	     *
	     * @function
	     */
	    destroy: function( ) {
	        if ( !THIS[ this.hash ] ) {
	            //this viewer has already been destroyed: returning immediately
	            return;
	        }

	        this.close();

	        this.clearOverlays();
	        this.overlaysContainer.innerHTML = "";

	        //TODO: implement this...
	        //this.unbindSequenceControls()
	        //this.unbindStandardControls()

	        if (this.referenceStrip) {
	            this.referenceStrip.destroy();
	            this.referenceStrip = null;
	        }

	        if ( this._updateRequestId !== null ) {
	            $.cancelAnimationFrame( this._updateRequestId );
	            this._updateRequestId = null;
	        }

	        if ( this.drawer ) {
	            this.drawer.destroy();
	        }

	        this.removeAllHandlers();

	        // Go through top element (passed to us) and remove all children
	        // Use removeChild to make sure it handles SVG or any non-html
	        // also it performs better - http://jsperf.com/innerhtml-vs-removechild/15
	        if (this.element){
	            while (this.element.firstChild) {
	                this.element.removeChild(this.element.firstChild);
	            }
	        }

	        // destroy the mouse trackers
	        if (this.innerTracker){
	            this.innerTracker.destroy();
	        }
	        if (this.outerTracker){
	            this.outerTracker.destroy();
	        }

	        THIS[ this.hash ] = null;
	        delete THIS[ this.hash ];

	        // clear all our references to dom objects
	        this.canvas = null;
	        this.container = null;

	        // clear our reference to the main element - they will need to pass it in again, creating a new viewer
	        this.element = null;
	    },

	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isMouseNavEnabled: function () {
	        return this.innerTracker.isTracking();
	    },

	    /**
	     * @function
	     * @param {Boolean} enabled - true to enable, false to disable
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:mouse-enabled
	     */
	    setMouseNavEnabled: function( enabled ){
	        this.innerTracker.setTracking( enabled );
	        /**
	         * Raised when mouse/touch navigation is enabled or disabled (see {@link OpenSeadragon.Viewer#setMouseNavEnabled}).
	         *
	         * @event mouse-enabled
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} enabled
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'mouse-enabled', { enabled: enabled } );
	        return this;
	    },


	    /**
	     * @function
	     * @return {Boolean}
	     */
	    areControlsEnabled: function () {
	        var enabled = this.controls.length,
	            i;
	        for( i = 0; i < this.controls.length; i++ ){
	            enabled = enabled && this.controls[ i ].isVisibile();
	        }
	        return enabled;
	    },


	    /**
	     * Shows or hides the controls (e.g. the default navigation buttons).
	     *
	     * @function
	     * @param {Boolean} true to show, false to hide.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:controls-enabled
	     */
	    setControlsEnabled: function( enabled ) {
	        if( enabled ){
	            abortControlsAutoHide( this );
	        } else {
	            beginControlsAutoHide( this );
	        }
	        /**
	         * Raised when the navigation controls are shown or hidden (see {@link OpenSeadragon.Viewer#setControlsEnabled}).
	         *
	         * @event controls-enabled
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} enabled
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'controls-enabled', { enabled: enabled } );
	        return this;
	    },

	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isFullPage: function () {
	        return THIS[ this.hash ].fullPage;
	    },


	    /**
	     * Toggle full page mode.
	     * @function
	     * @param {Boolean} fullPage
	     *      If true, enter full page mode.  If false, exit full page mode.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pre-full-page
	     * @fires OpenSeadragon.Viewer.event:full-page
	     */
	    setFullPage: function( fullPage ) {

	        var body = document.body,
	            bodyStyle = body.style,
	            docStyle = document.documentElement.style,
	            _this = this,
	            hash,
	            nodes,
	            i;

	        //dont bother modifying the DOM if we are already in full page mode.
	        if ( fullPage == this.isFullPage() ) {
	            return this;
	        }

	        var fullPageEventArgs = {
	            fullPage: fullPage,
	            preventDefaultAction: false
	        };
	        /**
	         * Raised when the viewer is about to change to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
	         *
	         * @event pre-full-page
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullPage - True if entering full-page mode, false if exiting full-page mode.
	         * @property {Boolean} preventDefaultAction - Set to true to prevent full-page mode change. Default: false.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'pre-full-page', fullPageEventArgs );
	        if ( fullPageEventArgs.preventDefaultAction ) {
	            return this;
	        }

	        if ( fullPage ) {

	            this.elementSize = $.getElementSize( this.element );
	            this.pageScroll = $.getPageScroll();

	            this.elementMargin = this.element.style.margin;
	            this.element.style.margin = "0";
	            this.elementPadding = this.element.style.padding;
	            this.element.style.padding = "0";

	            this.bodyMargin = bodyStyle.margin;
	            this.docMargin = docStyle.margin;
	            bodyStyle.margin = "0";
	            docStyle.margin = "0";

	            this.bodyPadding = bodyStyle.padding;
	            this.docPadding = docStyle.padding;
	            bodyStyle.padding = "0";
	            docStyle.padding = "0";

	            this.bodyWidth = bodyStyle.width;
	            this.bodyHeight = bodyStyle.height;
	            bodyStyle.width = "100%";
	            bodyStyle.height = "100%";

	            //when entering full screen on the ipad it wasnt sufficient to leave
	            //the body intact as only only the top half of the screen would
	            //respond to touch events on the canvas, while the bottom half treated
	            //them as touch events on the document body.  Thus we remove and store
	            //the bodies elements and replace them when we leave full screen.
	            this.previousBody = [];
	            THIS[ this.hash ].prevElementParent = this.element.parentNode;
	            THIS[ this.hash ].prevNextSibling = this.element.nextSibling;
	            THIS[ this.hash ].prevElementWidth = this.element.style.width;
	            THIS[ this.hash ].prevElementHeight = this.element.style.height;
	            nodes = body.childNodes.length;
	            for ( i = 0; i < nodes; i++ ) {
	                this.previousBody.push( body.childNodes[ 0 ] );
	                body.removeChild( body.childNodes[ 0 ] );
	            }

	            //If we've got a toolbar, we need to enable the user to use css to
	            //preserve it in fullpage mode
	            if ( this.toolbar && this.toolbar.element ) {
	                //save a reference to the parent so we can put it back
	                //in the long run we need a better strategy
	                this.toolbar.parentNode = this.toolbar.element.parentNode;
	                this.toolbar.nextSibling = this.toolbar.element.nextSibling;
	                body.appendChild( this.toolbar.element );

	                //Make sure the user has some ability to style the toolbar based
	                //on the mode
	                $.addClass( this.toolbar.element, 'fullpage' );
	            }

	            $.addClass( this.element, 'fullpage' );
	            body.appendChild( this.element );

	            this.element.style.height = $.getWindowSize().y + 'px';
	            this.element.style.width = $.getWindowSize().x + 'px';

	            if ( this.toolbar && this.toolbar.element ) {
	                this.element.style.height = (
	                    $.getElementSize( this.element ).y - $.getElementSize( this.toolbar.element ).y
	                ) + 'px';
	            }

	            THIS[ this.hash ].fullPage = true;

	            // mouse will be inside container now
	            $.delegate( this, onContainerEnter )( {} );

	        } else {

	            this.element.style.margin = this.elementMargin;
	            this.element.style.padding = this.elementPadding;

	            bodyStyle.margin = this.bodyMargin;
	            docStyle.margin = this.docMargin;

	            bodyStyle.padding = this.bodyPadding;
	            docStyle.padding = this.docPadding;

	            bodyStyle.width = this.bodyWidth;
	            bodyStyle.height = this.bodyHeight;

	            body.removeChild( this.element );
	            nodes = this.previousBody.length;
	            for ( i = 0; i < nodes; i++ ) {
	                body.appendChild( this.previousBody.shift() );
	            }

	            $.removeClass( this.element, 'fullpage' );
	            THIS[ this.hash ].prevElementParent.insertBefore(
	                this.element,
	                THIS[ this.hash ].prevNextSibling
	            );

	            //If we've got a toolbar, we need to enable the user to use css to
	            //reset it to its original state
	            if ( this.toolbar && this.toolbar.element ) {
	                body.removeChild( this.toolbar.element );

	                //Make sure the user has some ability to style the toolbar based
	                //on the mode
	                $.removeClass( this.toolbar.element, 'fullpage' );

	                this.toolbar.parentNode.insertBefore(
	                    this.toolbar.element,
	                    this.toolbar.nextSibling
	                );
	                delete this.toolbar.parentNode;
	                delete this.toolbar.nextSibling;
	            }

	            this.element.style.width = THIS[ this.hash ].prevElementWidth;
	            this.element.style.height = THIS[ this.hash ].prevElementHeight;

	            // After exiting fullPage or fullScreen, it can take some time
	            // before the browser can actually set the scroll.
	            var restoreScrollCounter = 0;
	            var restoreScroll = function() {
	                $.setPageScroll( _this.pageScroll );
	                var pageScroll = $.getPageScroll();
	                restoreScrollCounter++;
	                if ( restoreScrollCounter < 10 &&
	                    pageScroll.x !== _this.pageScroll.x ||
	                    pageScroll.y !== _this.pageScroll.y ) {
	                    $.requestAnimationFrame( restoreScroll );
	                }
	            };
	            $.requestAnimationFrame( restoreScroll );

	            THIS[ this.hash ].fullPage = false;

	            // mouse will likely be outside now
	            $.delegate( this, onContainerExit )( { } );

	        }

	        if ( this.navigator && this.viewport ) {
	            this.navigator.update( this.viewport );
	        }

	        /**
	         * Raised when the viewer has changed to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
	         *
	         * @event full-page
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullPage - True if changed to full-page mode, false if exited full-page mode.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'full-page', { fullPage: fullPage } );

	        return this;
	    },

	    /**
	     * Toggle full screen mode if supported. Toggle full page mode otherwise.
	     * @function
	     * @param {Boolean} fullScreen
	     *      If true, enter full screen mode.  If false, exit full screen mode.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pre-full-screen
	     * @fires OpenSeadragon.Viewer.event:full-screen
	     */
	    setFullScreen: function( fullScreen ) {
	        var _this = this;

	        if ( !$.supportsFullScreen ) {
	            return this.setFullPage( fullScreen );
	        }

	        if ( $.isFullScreen() === fullScreen ) {
	            return this;
	        }

	        var fullScreeEventArgs = {
	            fullScreen: fullScreen,
	            preventDefaultAction: false
	        };
	        /**
	         * Raised when the viewer is about to change to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
	         * Note: the pre-full-screen event is not raised when the user is exiting
	         * full-screen mode by pressing the Esc key. In that case, consider using
	         * the full-screen, pre-full-page or full-page events.
	         *
	         * @event pre-full-screen
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullScreen - True if entering full-screen mode, false if exiting full-screen mode.
	         * @property {Boolean} preventDefaultAction - Set to true to prevent full-screen mode change. Default: false.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'pre-full-screen', fullScreeEventArgs );
	        if ( fullScreeEventArgs.preventDefaultAction ) {
	            return this;
	        }

	        if ( fullScreen ) {

	            this.setFullPage( true );
	            // If the full page mode is not actually entered, we need to prevent
	            // the full screen mode.
	            if ( !this.isFullPage() ) {
	                return this;
	            }

	            this.fullPageStyleWidth = this.element.style.width;
	            this.fullPageStyleHeight = this.element.style.height;
	            this.element.style.width = '100%';
	            this.element.style.height = '100%';

	            var onFullScreenChange = function() {
	                var isFullScreen = $.isFullScreen();
	                if ( !isFullScreen ) {
	                    $.removeEvent( document, $.fullScreenEventName, onFullScreenChange );
	                    $.removeEvent( document, $.fullScreenErrorEventName, onFullScreenChange );

	                    _this.setFullPage( false );
	                    if ( _this.isFullPage() ) {
	                        _this.element.style.width = _this.fullPageStyleWidth;
	                        _this.element.style.height = _this.fullPageStyleHeight;
	                    }
	                }
	                if ( _this.navigator && _this.viewport ) {
	                    _this.navigator.update( _this.viewport );
	                }
	                /**
	                 * Raised when the viewer has changed to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
	                 *
	                 * @event full-screen
	                 * @memberof OpenSeadragon.Viewer
	                 * @type {object}
	                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                 * @property {Boolean} fullScreen - True if changed to full-screen mode, false if exited full-screen mode.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( 'full-screen', { fullScreen: isFullScreen } );
	            };
	            $.addEvent( document, $.fullScreenEventName, onFullScreenChange );
	            $.addEvent( document, $.fullScreenErrorEventName, onFullScreenChange );

	            $.requestFullScreen( document.body );

	        } else {
	            $.exitFullScreen();
	        }
	        return this;
	    },

	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isVisible: function () {
	        return this.container.style.visibility != "hidden";
	    },


	    /**
	     * @function
	     * @param {Boolean} visible
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:visible
	     */
	    setVisible: function( visible ){
	        this.container.style.visibility = visible ? "" : "hidden";
	        /**
	         * Raised when the viewer is shown or hidden (see {@link OpenSeadragon.Viewer#setVisible}).
	         *
	         * @event visible
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} visible
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'visible', { visible: visible } );
	        return this;
	    },

	    /**
	     * Add a tiled image to the viewer.
	     * options.tileSource can be anything that {@link OpenSeadragon.Viewer#open}
	     *  supports except arrays of images.
	     * Note that you can specify options.width or options.height, but not both.
	     * The other dimension will be calculated according to the item's aspect ratio.
	     * If collectionMode is on (see {@link OpenSeadragon.Options}), the new image is
	     * automatically arranged with the others.
	     * @function
	     * @param {Object} options
	     * @param {String|Object|Function} options.tileSource - The TileSource specifier.
	     * A String implies a url used to determine the tileSource implementation
	     *      based on the file extension of url. JSONP is implied by *.js,
	     *      otherwise the url is retrieved as text and the resulting text is
	     *      introspected to determine if its json, xml, or text and parsed.
	     * An Object implies an inline configuration which has a single
	     *      property sufficient for being able to determine tileSource
	     *      implementation. If the object has a property which is a function
	     *      named 'getTileUrl', it is treated as a custom TileSource.
	     * @param {Number} [options.index] The index of the item. Added on top of
	     * all other items if not specified.
	     * @param {Boolean} [options.replace=false] If true, the item at options.index will be
	     * removed and the new item is added in its place. options.tileSource will be
	     * interpreted and fetched if necessary before the old item is removed to avoid leaving
	     * a gap in the world.
	     * @param {Number} [options.x=0] The X position for the image in viewport coordinates.
	     * @param {Number} [options.y=0] The Y position for the image in viewport coordinates.
	     * @param {Number} [options.width=1] The width for the image in viewport coordinates.
	     * @param {Number} [options.height] The height for the image in viewport coordinates.
	     * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
	     * (portions of the image outside of this area will not be visible). Only works on
	     * browsers that support the HTML5 canvas.
	     * @param {Number} [options.opacity] Opacity the tiled image should be drawn at by default.
	     * @param {Function} [options.success] A function that gets called when the image is
	     * successfully added. It's passed the event object which contains a single property:
	     * "item", the resulting TiledImage.
	     * @param {Function} [options.error] A function that gets called if the image is
	     * unable to be added. It's passed the error event object, which contains "message"
	     * and "source" properties.
	     * @param {Boolean} [options.collectionImmediately=false] If collectionMode is on,
	     * specifies whether to snap to the new arrangement immediately or to animate to it.
	     * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
	     * @fires OpenSeadragon.World.event:add-item
	     * @fires OpenSeadragon.Viewer.event:add-item-failed
	     */
	    addTiledImage: function( options ) {
	        $.console.assert(options, "[Viewer.addTiledImage] options is required");
	        $.console.assert(options.tileSource, "[Viewer.addTiledImage] options.tileSource is required");
	        $.console.assert(!options.replace || (options.index > -1 && options.index < this.world.getItemCount()),
	            "[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world");

	        var _this = this;

	        if (options.replace) {
	            options.replaceItem = _this.world.getItemAt(options.index);
	        }

	        this._hideMessage();

	        if (options.placeholderFillStyle === undefined) {
	            options.placeholderFillStyle = this.placeholderFillStyle;
	        }
	        if (options.opacity === undefined) {
	            options.opacity = this.opacity;
	        }

	        var myQueueItem = {
	            options: options
	        };

	        function raiseAddItemFailed( event ) {
	            for (var i = 0; i < _this._loadQueue.length; i++) {
	                if (_this._loadQueue[i] === myQueueItem) {
	                    _this._loadQueue.splice(i, 1);
	                    break;
	                }
	            }

	            if (_this._loadQueue.length === 0) {
	                refreshWorld(myQueueItem);
	            }

	             /**
	             * Raised when an error occurs while adding a item.
	             * @event add-item-failed
	             * @memberOf OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {String} message
	             * @property {String} source
	             * @property {Object} options The options passed to the addTiledImage method.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( 'add-item-failed', event );

	            if (options.error) {
	                options.error(event);
	            }
	        }

	        function refreshWorld(theItem) {
	            if (_this.collectionMode) {
	                _this.world.arrange({
	                    immediately: theItem.options.collectionImmediately,
	                    rows: _this.collectionRows,
	                    columns: _this.collectionColumns,
	                    layout: _this.collectionLayout,
	                    tileSize: _this.collectionTileSize,
	                    tileMargin: _this.collectionTileMargin
	                });
	                _this.world.setAutoRefigureSizes(true);
	            }
	        }

	        if ($.isArray(options.tileSource)) {
	            setTimeout(function() {
	                raiseAddItemFailed({
	                    message: "[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",
	                    source: options.tileSource,
	                    options: options
	                });
	            });
	            return;
	        }

	        this._loadQueue.push(myQueueItem);

	        getTileSourceImplementation( this, options.tileSource, function( tileSource ) {

	            myQueueItem.tileSource = tileSource;

	            // add everybody at the front of the queue that's ready to go
	            var queueItem, tiledImage, optionsClone;
	            while (_this._loadQueue.length) {
	                queueItem = _this._loadQueue[0];
	                if (!queueItem.tileSource) {
	                    break;
	                }

	                _this._loadQueue.splice(0, 1);

	                if (queueItem.options.replace) {
	                    var newIndex = _this.world.getIndexOfItem(queueItem.options.replaceItem);
	                    if (newIndex != -1) {
	                        queueItem.options.index = newIndex;
	                    }
	                    _this.world.removeItem(queueItem.options.replaceItem);
	                }

	                tiledImage = new $.TiledImage({
	                    viewer: _this,
	                    source: queueItem.tileSource,
	                    viewport: _this.viewport,
	                    drawer: _this.drawer,
	                    tileCache: _this.tileCache,
	                    imageLoader: _this.imageLoader,
	                    x: queueItem.options.x,
	                    y: queueItem.options.y,
	                    width: queueItem.options.width,
	                    height: queueItem.options.height,
	                    clip: queueItem.options.clip,
	                    placeholderFillStyle: queueItem.options.placeholderFillStyle,
	                    opacity: queueItem.options.opacity,
	                    springStiffness: _this.springStiffness,
	                    animationTime: _this.animationTime,
	                    minZoomImageRatio: _this.minZoomImageRatio,
	                    wrapHorizontal: _this.wrapHorizontal,
	                    wrapVertical: _this.wrapVertical,
	                    immediateRender: _this.immediateRender,
	                    blendTime: _this.blendTime,
	                    alwaysBlend: _this.alwaysBlend,
	                    minPixelRatio: _this.minPixelRatio,
	                    crossOriginPolicy: _this.crossOriginPolicy,
	                    debugMode: _this.debugMode
	                });

	                if (_this.collectionMode) {
	                    _this.world.setAutoRefigureSizes(false);
	                }
	                _this.world.addItem( tiledImage, {
	                    index: queueItem.options.index
	                });

	                if (_this._loadQueue.length === 0) {
	                    //this restores the autoRefigureSizes flag to true.
	                    refreshWorld(queueItem);
	                }

	                if (_this.world.getItemCount() === 1 && !_this.preserveViewport) {
	                    _this.viewport.goHome(true);
	                }

	                if (_this.navigator) {
	                    optionsClone = $.extend({}, queueItem.options, {
	                        originalTiledImage: tiledImage,
	                        tileSource: queueItem.tileSource
	                    });

	                    _this.navigator.addTiledImage(optionsClone);
	                }

	                if (queueItem.options.success) {
	                    queueItem.options.success({
	                        item: tiledImage
	                    });
	                }
	            }
	        }, function( event ) {
	            event.options = options;
	            raiseAddItemFailed(event);
	        } );
	    },

	    // deprecated
	    addLayer: function( options ) {
	        var _this = this;

	        $.console.error( "[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead." );

	        var optionsClone = $.extend({}, options, {
	            success: function(event) {
	                _this.raiseEvent("add-layer", {
	                    options: options,
	                    drawer: event.item
	                });
	            },
	            error: function(event) {
	                _this.raiseEvent("add-layer-failed", event);
	            }
	        });

	        this.addTiledImage(optionsClone);
	        return this;
	    },

	    // deprecated
	    getLayerAtLevel: function( level ) {
	        $.console.error( "[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead." );
	        return this.world.getItemAt(level);
	    },

	    // deprecated
	    getLevelOfLayer: function( drawer ) {
	        $.console.error( "[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead." );
	        return this.world.getIndexOfItem(drawer);
	    },

	    // deprecated
	    getLayersCount: function() {
	        $.console.error( "[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead." );
	        return this.world.getItemCount();
	    },

	    // deprecated
	    setLayerLevel: function( drawer, level ) {
	        $.console.error( "[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead." );
	        return this.world.setItemIndex(drawer, level);
	    },

	    // deprecated
	    removeLayer: function( drawer ) {
	        $.console.error( "[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead." );
	        return this.world.removeItem(drawer);
	    },

	    /**
	     * Force the viewer to redraw its contents.
	     * @returns {OpenSeadragon.Viewer} Chainable.
	     */
	    forceRedraw: function() {
	        THIS[ this.hash ].forceRedraw = true;
	        return this;
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     */
	    bindSequenceControls: function(){

	        //////////////////////////////////////////////////////////////////////////
	        // Image Sequence Controls
	        //////////////////////////////////////////////////////////////////////////
	        var onFocusHandler          = $.delegate( this, onFocus ),
	            onBlurHandler           = $.delegate( this, onBlur ),
	            onNextHandler           = $.delegate( this, onNext ),
	            onPreviousHandler       = $.delegate( this, onPrevious ),
	            navImages               = this.navImages,
	            useGroup                = true ;

	        if( this.showSequenceControl ){

	            if( this.previousButton || this.nextButton ){
	                //if we are binding to custom buttons then layout and
	                //grouping is the responsibility of the page author
	                useGroup = false;
	            }

	            this.previousButton = new $.Button({
	                element:    this.previousButton ? $.getElement( this.previousButton ) : null,
	                clickTimeThreshold: this.clickTimeThreshold,
	                clickDistThreshold: this.clickDistThreshold,
	                tooltip:    $.getString( "Tooltips.PreviousPage" ),
	                srcRest:    resolveUrl( this.prefixUrl, navImages.previous.REST ),
	                srcGroup:   resolveUrl( this.prefixUrl, navImages.previous.GROUP ),
	                srcHover:   resolveUrl( this.prefixUrl, navImages.previous.HOVER ),
	                srcDown:    resolveUrl( this.prefixUrl, navImages.previous.DOWN ),
	                onRelease:  onPreviousHandler,
	                onFocus:    onFocusHandler,
	                onBlur:     onBlurHandler
	            });

	            this.nextButton = new $.Button({
	                element:    this.nextButton ? $.getElement( this.nextButton ) : null,
	                clickTimeThreshold: this.clickTimeThreshold,
	                clickDistThreshold: this.clickDistThreshold,
	                tooltip:    $.getString( "Tooltips.NextPage" ),
	                srcRest:    resolveUrl( this.prefixUrl, navImages.next.REST ),
	                srcGroup:   resolveUrl( this.prefixUrl, navImages.next.GROUP ),
	                srcHover:   resolveUrl( this.prefixUrl, navImages.next.HOVER ),
	                srcDown:    resolveUrl( this.prefixUrl, navImages.next.DOWN ),
	                onRelease:  onNextHandler,
	                onFocus:    onFocusHandler,
	                onBlur:     onBlurHandler
	            });

	            if( !this.navPrevNextWrap ){
	                this.previousButton.disable();
	            }

	            if (!this.tileSources || !this.tileSources.length) {
	                this.nextButton.disable();
	            }

	            if( useGroup ){
	                this.paging = new $.ButtonGroup({
	                    buttons: [
	                        this.previousButton,
	                        this.nextButton
	                    ],
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold
	                });

	                this.pagingControl = this.paging.element;

	                if( this.toolbar ){
	                    this.toolbar.addControl(
	                        this.pagingControl,
	                        {anchor: $.ControlAnchor.BOTTOM_RIGHT}
	                    );
	                }else{
	                    this.addControl(
	                        this.pagingControl,
	                        {anchor: this.sequenceControlAnchor || $.ControlAnchor.TOP_LEFT}
	                    );
	                }
	            }
	        }
	        return this;
	    },


	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     */
	    bindStandardControls: function(){
	        //////////////////////////////////////////////////////////////////////////
	        // Navigation Controls
	        //////////////////////////////////////////////////////////////////////////
	        var beginZoomingInHandler   = $.delegate( this, beginZoomingIn ),
	            endZoomingHandler       = $.delegate( this, endZooming ),
	            doSingleZoomInHandler   = $.delegate( this, doSingleZoomIn ),
	            beginZoomingOutHandler  = $.delegate( this, beginZoomingOut ),
	            doSingleZoomOutHandler  = $.delegate( this, doSingleZoomOut ),
	            onHomeHandler           = $.delegate( this, onHome ),
	            onFullScreenHandler     = $.delegate( this, onFullScreen ),
	            onRotateLeftHandler     = $.delegate( this, onRotateLeft ),
	            onRotateRightHandler    = $.delegate( this, onRotateRight ),
	            onFocusHandler          = $.delegate( this, onFocus ),
	            onBlurHandler           = $.delegate( this, onBlur ),
	            navImages               = this.navImages,
	            buttons                 = [],
	            useGroup                = true ;


	        if ( this.showNavigationControl ) {

	            if( this.zoomInButton || this.zoomOutButton ||
	                this.homeButton || this.fullPageButton ||
	                this.rotateLeftButton || this.rotateRightButton ) {
	                //if we are binding to custom buttons then layout and
	                //grouping is the responsibility of the page author
	                useGroup = false;
	            }

	            if ( this.showZoomControl ) {
	                buttons.push( this.zoomInButton = new $.Button({
	                    element:    this.zoomInButton ? $.getElement( this.zoomInButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.ZoomIn" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomIn.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomIn.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomIn.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomIn.DOWN ),
	                    onPress:    beginZoomingInHandler,
	                    onRelease:  endZoomingHandler,
	                    onClick:    doSingleZoomInHandler,
	                    onEnter:    beginZoomingInHandler,
	                    onExit:     endZoomingHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));

	                buttons.push( this.zoomOutButton = new $.Button({
	                    element:    this.zoomOutButton ? $.getElement( this.zoomOutButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.ZoomOut" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomOut.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomOut.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomOut.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomOut.DOWN ),
	                    onPress:    beginZoomingOutHandler,
	                    onRelease:  endZoomingHandler,
	                    onClick:    doSingleZoomOutHandler,
	                    onEnter:    beginZoomingOutHandler,
	                    onExit:     endZoomingHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }

	            if ( this.showHomeControl ) {
	                buttons.push( this.homeButton = new $.Button({
	                    element:    this.homeButton ? $.getElement( this.homeButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.Home" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.home.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.home.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.home.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.home.DOWN ),
	                    onRelease:  onHomeHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }

	            if ( this.showFullPageControl ) {
	                buttons.push( this.fullPageButton = new $.Button({
	                    element:    this.fullPageButton ? $.getElement( this.fullPageButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.FullPage" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.fullpage.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.fullpage.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.fullpage.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.fullpage.DOWN ),
	                    onRelease:  onFullScreenHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }

	            if ( this.showRotationControl ) {
	                buttons.push( this.rotateLeftButton = new $.Button({
	                    element:    this.rotateLeftButton ? $.getElement( this.rotateLeftButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.RotateLeft" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateleft.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateleft.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateleft.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateleft.DOWN ),
	                    onRelease:  onRotateLeftHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));

	                buttons.push( this.rotateRightButton = new $.Button({
	                    element:    this.rotateRightButton ? $.getElement( this.rotateRightButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.RotateRight" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateright.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateright.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateright.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateright.DOWN ),
	                    onRelease:  onRotateRightHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));

	            }

	            if ( useGroup ) {
	                this.buttons = new $.ButtonGroup({
	                    buttons:            buttons,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold
	                });

	                this.navControl  = this.buttons.element;
	                this.addHandler( 'open', $.delegate( this, lightUp ) );

	                if( this.toolbar ){
	                    this.toolbar.addControl(
	                        this.navControl,
	                        {anchor: $.ControlAnchor.TOP_LEFT}
	                    );
	                } else {
	                    this.addControl(
	                        this.navControl,
	                        {anchor: this.navigationControlAnchor || $.ControlAnchor.TOP_LEFT}
	                    );
	                }
	            }

	        }
	        return this;
	    },

	    /**
	     * Gets the active page of a sequence
	     * @function
	     * @return {Number}
	     */
	    currentPage: function() {
	        return this._sequenceIndex;
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:page
	     */
	    goToPage: function( page ){
	        if( this.tileSources && page >= 0 && page < this.tileSources.length ){
	            /**
	             * Raised when the page is changed on a viewer configured with multiple image sources (see {@link OpenSeadragon.Viewer#goToPage}).
	             *
	             * @event page
	             * @memberof OpenSeadragon.Viewer
	             * @type {Object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {Number} page - The page index.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'page', { page: page } );

	            this._sequenceIndex = page;

	            this._updateSequenceButtons( page );

	            this.open( this.tileSources[ page ] );

	            if( this.referenceStrip ){
	                this.referenceStrip.setFocus( page );
	            }
	        }

	        return this;
	    },

	   /**
	     * Adds an html element as an overlay to the current viewport.  Useful for
	     * highlighting words or areas of interest on an image or other zoomable
	     * interface. The overlays added via this method are removed when the viewport
	     * is closed which include when changing page.
	     * @method
	     * @param {Element|String|Object} element - A reference to an element or an id for
	     *      the element which will be overlayed. Or an Object specifying the configuration for the overlay
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
	     *      rectangle which will be overlayed.
	     * @param {OpenSeadragon.OverlayPlacement} placement - The position of the
	     *      viewport which the location coordinates will be treated as relative
	     *      to.
	     * @param {function} onDraw - If supplied the callback is called when the overlay
	     *      needs to be drawn. It it the responsibility of the callback to do any drawing/positioning.
	     *      It is passed position, size and element.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:add-overlay
	     */
	    addOverlay: function( element, location, placement, onDraw ) {
	        var options;
	        if( $.isPlainObject( element ) ){
	            options = element;
	        } else {
	            options = {
	                element: element,
	                location: location,
	                placement: placement,
	                onDraw: onDraw
	            };
	        }

	        element = $.getElement( options.element );

	        if ( getOverlayIndex( this.currentOverlays, element ) >= 0 ) {
	            // they're trying to add a duplicate overlay
	            return this;
	        }

	        var overlay = getOverlayObject( this, options);
	        this.currentOverlays.push(overlay);
	        overlay.drawHTML( this.overlaysContainer, this.viewport );

	        /**
	         * Raised when an overlay is added to the viewer (see {@link OpenSeadragon.Viewer#addOverlay}).
	         *
	         * @event add-overlay
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Element} element - The overlay element.
	         * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
	         * @property {OpenSeadragon.OverlayPlacement} placement
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'add-overlay', {
	            element: element,
	            location: options.location,
	            placement: options.placement
	        });
	        return this;
	    },

	    /**
	     * Updates the overlay represented by the reference to the element or
	     * element id moving it to the new location, relative to the new placement.
	     * @method
	     * @param {Element|String} element - A reference to an element or an id for
	     *      the element which is overlayed.
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
	     *      rectangle which will be overlayed.
	     * @param {OpenSeadragon.OverlayPlacement} placement - The position of the
	     *      viewport which the location coordinates will be treated as relative
	     *      to.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:update-overlay
	     */
	    updateOverlay: function( element, location, placement ) {
	        var i;

	        element = $.getElement( element );
	        i = getOverlayIndex( this.currentOverlays, element );

	        if ( i >= 0 ) {
	            this.currentOverlays[ i ].update( location, placement );
	            THIS[ this.hash ].forceRedraw = true;
	            /**
	             * Raised when an overlay's location or placement changes
	             * (see {@link OpenSeadragon.Viewer#updateOverlay}).
	             *
	             * @event update-overlay
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the
	             * Viewer which raised the event.
	             * @property {Element} element
	             * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
	             * @property {OpenSeadragon.OverlayPlacement} placement
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'update-overlay', {
	                element: element,
	                location: location,
	                placement: placement
	            });
	        }
	        return this;
	    },

	    /**
	     * Removes an overlay identified by the reference element or element id
	     * and schedules an update.
	     * @method
	     * @param {Element|String} element - A reference to the element or an
	     *      element id which represent the ovelay content to be removed.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:remove-overlay
	     */
	    removeOverlay: function( element ) {
	        var i;

	        element = $.getElement( element );
	        i = getOverlayIndex( this.currentOverlays, element );

	        if ( i >= 0 ) {
	            this.currentOverlays[ i ].destroy();
	            this.currentOverlays.splice( i, 1 );
	            THIS[ this.hash ].forceRedraw = true;
	            /**
	             * Raised when an overlay is removed from the viewer
	             * (see {@link OpenSeadragon.Viewer#removeOverlay}).
	             *
	             * @event remove-overlay
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the
	             * Viewer which raised the event.
	             * @property {Element} element - The overlay element.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'remove-overlay', {
	                element: element
	            });
	        }
	        return this;
	    },

	    /**
	     * Removes all currently configured Overlays from this Viewer and schedules
	     * an update.
	     * @method
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:clear-overlay
	     */
	    clearOverlays: function() {
	        while ( this.currentOverlays.length > 0 ) {
	            this.currentOverlays.pop().destroy();
	        }
	        THIS[ this.hash ].forceRedraw = true;
	        /**
	         * Raised when all overlays are removed from the viewer (see {@link OpenSeadragon.Drawer#clearOverlays}).
	         *
	         * @event clear-overlay
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'clear-overlay', {} );
	        return this;
	    },

	    /**
	     * Updates the sequence buttons.
	     * @function OpenSeadragon.Viewer.prototype._updateSequenceButtons
	     * @private
	     * @param {Number} Sequence Value
	     */
	    _updateSequenceButtons: function( page ) {

	            if ( this.nextButton ) {
	                if(!this.tileSources || this.tileSources.length - 1 === page) {
	                    //Disable next button
	                    if ( !this.navPrevNextWrap ) {
	                        this.nextButton.disable();
	                    }
	                } else {
	                    this.nextButton.enable();
	                }
	            }
	            if ( this.previousButton ) {
	                if ( page > 0 ) {
	                    //Enable previous button
	                    this.previousButton.enable();
	                } else {
	                    if ( !this.navPrevNextWrap ) {
	                        this.previousButton.disable();
	                    }
	                }
	            }
	      },

	    /**
	     * Display a message in the viewport
	     * @function OpenSeadragon.Viewer.prototype._showMessage
	     * @private
	     * @param {String} text message
	     */
	    _showMessage: function ( message ) {
	        this._hideMessage();

	        var div = $.makeNeutralElement( "div" );
	        div.appendChild( document.createTextNode( message ) );

	        this.messageDiv = $.makeCenteredNode( div );

	        $.addClass(this.messageDiv, "openseadragon-message");

	        this.container.appendChild( this.messageDiv );
	    },

	    /**
	     * Hide any currently displayed viewport message
	     * @function OpenSeadragon.Viewer.prototype._hideMessage
	     * @private
	     */
	    _hideMessage: function () {
	        var div = this.messageDiv;
	        if (div) {
	            div.parentNode.removeChild(div);
	            delete this.messageDiv;
	        }
	    },

	    /**
	     * Gets this viewer's gesture settings for the given pointer device type.
	     * @method
	     * @param {String} type - The pointer device type to get the gesture settings for ("mouse", "touch", "pen", etc.).
	     * @return {OpenSeadragon.GestureSettings}
	     */
	    gestureSettingsByDeviceType: function ( type ) {
	        switch ( type ) {
	            case 'mouse':
	                return this.gestureSettingsMouse;
	            case 'touch':
	                return this.gestureSettingsTouch;
	            case 'pen':
	                return this.gestureSettingsPen;
	            default:
	                return this.gestureSettingsUnknown;
	        }
	    },

	    // private
	    _drawOverlays: function() {
	        var i,
	            length = this.currentOverlays.length;
	        for ( i = 0; i < length; i++ ) {
	            this.currentOverlays[ i ].drawHTML( this.overlaysContainer, this.viewport );
	        }
	    },

	    /**
	     * Cancel the "in flight" images.
	     */
	    _cancelPendingImages: function() {
	        this._loadQueue = [];
	    }
	});


	/**
	 * _getSafeElemSize is like getElementSize(), but refuses to return 0 for x or y,
	 * which was causing some calling operations to return NaN.
	 * @returns {Point}
	 * @private
	 */
	function _getSafeElemSize (oElement) {
	    oElement = $.getElement( oElement );

	    return new $.Point(
	        (oElement.clientWidth === 0 ? 1 : oElement.clientWidth),
	        (oElement.clientHeight === 0 ? 1 : oElement.clientHeight)
	    );
	}

	/**
	 * @function
	 * @private
	 */
	function getTileSourceImplementation( viewer, tileSource, successCallback,
	    failCallback ) {
	    var _this = viewer;

	    //allow plain xml strings or json strings to be parsed here
	    if ( $.type( tileSource ) == 'string' ) {
	        if ( tileSource.match( /\s*<.*/ ) ) {
	            tileSource = $.parseXml( tileSource );
	        } else if ( tileSource.match( /\s*[\{\[].*/ ) ) {
	            tileSource = $.parseJSON(tileSource);
	        }
	    }

	    function waitUntilReady(tileSource, originalTileSource) {
	        if (tileSource.ready) {
	            successCallback(tileSource);
	        } else {
	            tileSource.addHandler('ready', function () {
	                successCallback(tileSource);
	            });
	            tileSource.addHandler('open-failed', function (event) {
	                failCallback({
	                    message: event.message,
	                    source: originalTileSource
	                });
	            });
	        }
	    }

	    setTimeout( function() {
	        if ( $.type( tileSource ) == 'string' ) {
	            //If its still a string it means it must be a url at this point
	            tileSource = new $.TileSource({
	                url: tileSource,
	                crossOriginPolicy: viewer.crossOriginPolicy,
	                ajaxWithCredentials: viewer.ajaxWithCredentials,
	                useCanvas: viewer.useCanvas,
	                success: function( event ) {
	                    successCallback( event.tileSource );
	                }
	            });
	            tileSource.addHandler( 'open-failed', function( event ) {
	                failCallback( event );
	            } );

	        } else if ($.isPlainObject(tileSource) || tileSource.nodeType) {
	            if (!tileSource.crossOriginPolicy && viewer.crossOriginPolicy) {
	                tileSource.crossOriginPolicy = viewer.crossOriginPolicy;
	            }
	            if (tileSource.ajaxWithCredentials === undefined) {
	                tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials;
	            }
	            if (tileSource.useCanvas === undefined) {
	                tileSource.useCanvas = viewer.useCanvas;
	            }

	            if ( $.isFunction( tileSource.getTileUrl ) ) {
	                //Custom tile source
	                var customTileSource = new $.TileSource( tileSource );
	                customTileSource.getTileUrl = tileSource.getTileUrl;
	                successCallback( customTileSource );
	            } else {
	                //inline configuration
	                var $TileSource = $.TileSource.determineType( _this, tileSource );
	                if ( !$TileSource ) {
	                    failCallback( {
	                        message: "Unable to load TileSource",
	                        source: tileSource
	                    });
	                    return;
	                }
	                var options = $TileSource.prototype.configure.apply( _this, [ tileSource ] );
	                waitUntilReady(new $TileSource(options), tileSource);
	            }
	        } else {
	            //can assume it's already a tile source implementation
	            waitUntilReady(tileSource, tileSource);
	        }
	    });
	}

	function getOverlayObject( viewer, overlay ) {
	    if ( overlay instanceof $.Overlay ) {
	        return overlay;
	    }

	    var element = null;
	    if ( overlay.element ) {
	        element = $.getElement( overlay.element );
	    } else {
	        var id = overlay.id ?
	            overlay.id :
	            "openseadragon-overlay-" + Math.floor( Math.random() * 10000000 );

	        element = $.getElement( overlay.id );
	        if ( !element ) {
	            element         = document.createElement( "a" );
	            element.href    = "#/overlay/" + id;
	        }
	        element.id = id;
	        $.addClass( element, overlay.className ?
	            overlay.className :
	            "openseadragon-overlay"
	        );
	    }

	    var location = overlay.location;
	    if ( !location ) {
	        if ( overlay.width && overlay.height ) {
	            location = overlay.px !== undefined ?
	                viewer.viewport.imageToViewportRectangle( new $.Rect(
	                    overlay.px,
	                    overlay.py,
	                    overlay.width,
	                    overlay.height
	                ) ) :
	                new $.Rect(
	                    overlay.x,
	                    overlay.y,
	                    overlay.width,
	                    overlay.height
	                );
	        } else {
	            location = overlay.px !== undefined ?
	                viewer.viewport.imageToViewportCoordinates( new $.Point(
	                    overlay.px,
	                    overlay.py
	                ) ) :
	                new $.Point(
	                    overlay.x,
	                    overlay.y
	                );
	        }
	    }

	    var placement = overlay.placement;
	    if ( placement && ( $.type( placement ) === "string" ) ) {
	        placement = $.OverlayPlacement[ overlay.placement.toUpperCase() ];
	    }

	    return new $.Overlay({
	        element: element,
	        location: location,
	        placement: placement,
	        onDraw: overlay.onDraw,
	        checkResize: overlay.checkResize
	    });
	}

	/**
	 * @private
	 * @inner
	 * Determines the index of the given overlay in the given overlays array.
	 */
	function getOverlayIndex( overlays, element ) {
	    var i;
	    for ( i = overlays.length - 1; i >= 0; i-- ) {
	        if ( overlays[ i ].element === element ) {
	            return i;
	        }
	    }

	    return -1;
	}

	///////////////////////////////////////////////////////////////////////////////
	// Schedulers provide the general engine for animation
	///////////////////////////////////////////////////////////////////////////////
	function scheduleUpdate( viewer, updateFunc ){
	    return $.requestAnimationFrame( function(){
	        updateFunc( viewer );
	    } );
	}


	//provides a sequence in the fade animation
	function scheduleControlsFade( viewer ) {
	    $.requestAnimationFrame( function(){
	        updateControlsFade( viewer );
	    });
	}


	//initiates an animation to hide the controls
	function beginControlsAutoHide( viewer ) {
	    if ( !viewer.autoHideControls ) {
	        return;
	    }
	    viewer.controlsShouldFade = true;
	    viewer.controlsFadeBeginTime =
	        $.now() +
	        viewer.controlsFadeDelay;

	    window.setTimeout( function(){
	        scheduleControlsFade( viewer );
	    }, viewer.controlsFadeDelay );
	}


	//determines if fade animation is done or continues the animation
	function updateControlsFade( viewer ) {
	    var currentTime,
	        deltaTime,
	        opacity,
	        i;
	    if ( viewer.controlsShouldFade ) {
	        currentTime = $.now();
	        deltaTime = currentTime - viewer.controlsFadeBeginTime;
	        opacity = 1.0 - deltaTime / viewer.controlsFadeLength;

	        opacity = Math.min( 1.0, opacity );
	        opacity = Math.max( 0.0, opacity );

	        for ( i = viewer.controls.length - 1; i >= 0; i--) {
	            if (viewer.controls[ i ].autoFade) {
	                viewer.controls[ i ].setOpacity( opacity );
	            }
	        }

	        if ( opacity > 0 ) {
	            // fade again
	            scheduleControlsFade( viewer );
	        }
	    }
	}


	//stop the fade animation on the controls and show them
	function abortControlsAutoHide( viewer ) {
	    var i;
	    viewer.controlsShouldFade = false;
	    for ( i = viewer.controls.length - 1; i >= 0; i-- ) {
	        viewer.controls[ i ].setOpacity( 1.0 );
	    }
	}



	///////////////////////////////////////////////////////////////////////////////
	// Default view event handlers.
	///////////////////////////////////////////////////////////////////////////////
	function onFocus(){
	    abortControlsAutoHide( this );
	}

	function onBlur(){
	    beginControlsAutoHide( this );

	}

	function onCanvasKeyDown( event ) {
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch( event.keyCode ){
	            case 38://up arrow
	                if ( event.shift ) {
	                    this.viewport.zoomBy(1.1);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 40://down arrow
	                if ( event.shift ) {
	                    this.viewport.zoomBy(0.9);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 37://left arrow
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            case 39://right arrow
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}

	function onCanvasKeyPress( event ) {
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch( event.keyCode ){
	            case 43://=|+
	            case 61://=|+
	                this.viewport.zoomBy(1.1);
	                this.viewport.applyConstraints();
	                return false;
	            case 45://-|_
	                this.viewport.zoomBy(0.9);
	                this.viewport.applyConstraints();
	                return false;
	            case 48://0|)
	                this.viewport.goHome();
	                this.viewport.applyConstraints();
	                return false;
	            case 119://w
	            case 87://W
	                if ( event.shift ) {
	                    this.viewport.zoomBy(1.1);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 115://s
	            case 83://S
	                if ( event.shift ) {
	                    this.viewport.zoomBy(0.9);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 97://a
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            case 100://d
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}

	function onCanvasClick( event ) {
	    var gestureSettings;

	    var haveKeyboardFocus = document.activeElement == this.canvas;

	    // If we don't have keyboard focus, request it.
	    if ( !haveKeyboardFocus ) {
	        this.canvas.focus();
	    }

	    if ( !event.preventDefaultAction && this.viewport && event.quick ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.clickToZoom ) {
	            this.viewport.zoomBy(
	                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
	                this.viewport.pointFromPixel( event.position, true )
	            );
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-click
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-click', {
	        tracker: event.eventSource,
	        position: event.position,
	        quick: event.quick,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasDblClick( event ) {
	    var gestureSettings;

	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.dblClickToZoom ) {
	            this.viewport.zoomBy(
	                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
	                this.viewport.pointFromPixel( event.position, true )
	            );
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a double mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-double-click
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-double-click', {
	        tracker: event.eventSource,
	        position: event.position,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasDrag( event ) {
	    var gestureSettings;

	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if( !this.panHorizontal ){
	            event.delta.x = 0;
	        }
	        if( !this.panVertical ){
	            event.delta.y = 0;
	        }
	        this.viewport.panBy( this.viewport.deltaPointsFromPixels( event.delta.negate() ), gestureSettings.flickEnabled );
	        if( this.constrainDuringPan ){
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a mouse or touch drag operation occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-drag
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.
	     * @property {Number} speed - Current computed speed, in pixels per second.
	     * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-drag', {
	        tracker: event.eventSource,
	        position: event.position,
	        delta: event.delta,
	        speed: event.speed,
	        direction: event.direction,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasDragEnd( event ) {
	    var gestureSettings;

	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.flickEnabled && event.speed >= gestureSettings.flickMinSpeed ) {
	            var amplitudeX = gestureSettings.flickMomentum * ( event.speed * Math.cos( event.direction - (Math.PI / 180 * this.viewport.degrees) ) ),
	                amplitudeY = gestureSettings.flickMomentum * ( event.speed * Math.sin( event.direction - (Math.PI / 180 * this.viewport.degrees) ) ),
	                center = this.viewport.pixelFromPoint( this.viewport.getCenter( true ) ),
	                target = this.viewport.pointFromPixel( new $.Point( center.x - amplitudeX, center.y - amplitudeY ) );
	            if( !this.panHorizontal ) {
	                target.x = center.x;
	            }
	            if( !this.panVertical ) {
	                target.y = center.y;
	            }
	            this.viewport.panTo( target, false );
	        }
	        this.viewport.applyConstraints();
	    }
	    /**
	     * Raised when a mouse or touch drag operation ends on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-drag-end
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} speed - Speed at the end of a drag gesture, in pixels per second.
	     * @property {Number} direction - Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-drag-end', {
	        tracker: event.eventSource,
	        position: event.position,
	        speed: event.speed,
	        direction: event.direction,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasEnter( event ) {
	    /**
	     * Raised when a pointer enters the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-enter
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-enter', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasExit( event ) {
	    /**
	     * Raised when a pointer leaves the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-exit
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-exit', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasPress( event ) {
	    /**
	     * Raised when the primary mouse button is pressed or touch starts on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-press
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-press', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        insideElementPressed: event.insideElementPressed,
	        insideElementReleased: event.insideElementReleased,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasRelease( event ) {
	    /**
	     * Raised when the primary mouse button is released or touch ends on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-release
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-release', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        insideElementPressed: event.insideElementPressed,
	        insideElementReleased: event.insideElementReleased,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasNonPrimaryPress( event ) {
	    /**
	     * Raised when any non-primary pointer button is pressed on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-nonprimary-press
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {Number} button - Button which caused the event.
	     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     * @property {Number} buttons - Current buttons pressed.
	     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-nonprimary-press', {
	        tracker: event.eventSource,
	        position: event.position,
	        pointerType: event.pointerType,
	        button: event.button,
	        buttons: event.buttons,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasNonPrimaryRelease( event ) {
	    /**
	     * Raised when any non-primary pointer button is released on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-nonprimary-release
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {Number} button - Button which caused the event.
	     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     * @property {Number} buttons - Current buttons pressed.
	     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-nonprimary-release', {
	        tracker: event.eventSource,
	        position: event.position,
	        pointerType: event.pointerType,
	        button: event.button,
	        buttons: event.buttons,
	        originalEvent: event.originalEvent
	    });
	}

	function onCanvasPinch( event ) {
	    var gestureSettings,
	        centerPt,
	        lastCenterPt,
	        panByPt;

	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.pinchToZoom ) {
	            centerPt = this.viewport.pointFromPixel( event.center, true );
	            lastCenterPt = this.viewport.pointFromPixel( event.lastCenter, true );
	            panByPt = lastCenterPt.minus( centerPt );
	            if( !this.panHorizontal ) {
	                panByPt.x = 0;
	            }
	            if( !this.panVertical ) {
	                panByPt.y = 0;
	            }
	            this.viewport.zoomBy( event.distance / event.lastDistance, centerPt, true );
	            this.viewport.panBy( panByPt, true );
	            this.viewport.applyConstraints();
	        }
	        if ( gestureSettings.pinchRotate ) {
	            // Pinch rotate
	            var angle1 = Math.atan2(event.gesturePoints[0].currentPos.y - event.gesturePoints[1].currentPos.y,
	                event.gesturePoints[0].currentPos.x - event.gesturePoints[1].currentPos.x);
	            var angle2 = Math.atan2(event.gesturePoints[0].lastPos.y - event.gesturePoints[1].lastPos.y,
	                event.gesturePoints[0].lastPos.x - event.gesturePoints[1].lastPos.x);
	            this.viewport.setRotation(this.viewport.getRotation() + ((angle1 - angle2) * (180 / Math.PI)));
	        }
	    }
	    /**
	     * Raised when a pinch event occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-pinch
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gesturePoints - Gesture points associated with the gesture. Velocity data can be found here.
	     * @property {OpenSeadragon.Point} lastCenter - The previous center point of the two pinch contact points relative to the tracked element.
	     * @property {OpenSeadragon.Point} center - The center point of the two pinch contact points relative to the tracked element.
	     * @property {Number} lastDistance - The previous distance between the two pinch contact points in CSS pixels.
	     * @property {Number} distance - The distance between the two pinch contact points in CSS pixels.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent('canvas-pinch', {
	        tracker: event.eventSource,
	        gesturePoints: event.gesturePoints,
	        lastCenter: event.lastCenter,
	        center: event.center,
	        lastDistance: event.lastDistance,
	        distance: event.distance,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	    //cancels event
	    return false;
	}

	function onCanvasScroll( event ) {
	    var gestureSettings,
	        factor,
	        thisScrollTime,
	        deltaScrollTime;

	    /* Certain scroll devices fire the scroll event way too fast so we are injecting a simple adjustment to keep things
	     * partially normalized. If we have already fired an event within the last 'minScrollDelta' milliseconds we skip
	     * this one and wait for the next event. */
	    thisScrollTime = $.now();
	    deltaScrollTime = thisScrollTime - this._lastScrollTime;
	    if (deltaScrollTime > this.minScrollDeltaTime) {
	        this._lastScrollTime = thisScrollTime;

	        if ( !event.preventDefaultAction && this.viewport ) {
	            gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	            if ( gestureSettings.scrollToZoom ) {
	                factor = Math.pow( this.zoomPerScroll, event.scroll );
	                this.viewport.zoomBy(
	                    factor,
	                    this.viewport.pointFromPixel( event.position, true )
	                );
	                this.viewport.applyConstraints();
	            }
	        }
	        /**
	         * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#canvas} element (mouse wheel).
	         *
	         * @event canvas-scroll
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	         * @property {Number} scroll - The scroll delta for the event.
	         * @property {Boolean} shift - True if the shift key was pressed during this event.
	         * @property {Object} originalEvent - The original DOM event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'canvas-scroll', {
	            tracker: event.eventSource,
	            position: event.position,
	            scroll: event.scroll,
	            shift: event.shift,
	            originalEvent: event.originalEvent
	        });
	        if (gestureSettings && gestureSettings.scrollToZoom) {
	            //cancels event
	            return false;
	        }
	    }
	    else {
	        return false;   // We are swallowing this event
	    }
	}

	function onContainerEnter( event ) {
	    THIS[ this.hash ].mouseInside = true;
	    abortControlsAutoHide( this );
	    /**
	     * Raised when the cursor enters the {@link OpenSeadragon.Viewer#container} element.
	     *
	     * @event container-enter
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'container-enter', {
	        tracker: event.eventSource,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}

	function onContainerExit( event ) {
	    if ( event.pointers < 1 ) {
	        THIS[ this.hash ].mouseInside = false;
	        if ( !THIS[ this.hash ].animating ) {
	            beginControlsAutoHide( this );
	        }
	    }
	    /**
	     * Raised when the cursor leaves the {@link OpenSeadragon.Viewer#container} element.
	     *
	     * @event container-exit
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'container-exit', {
	        tracker: event.eventSource,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}


	///////////////////////////////////////////////////////////////////////////////
	// Page update routines ( aka Views - for future reference )
	///////////////////////////////////////////////////////////////////////////////

	function updateMulti( viewer ) {
	    updateOnce( viewer );

	    // Request the next frame, unless we've been closed
	    if ( viewer.isOpen() ) {
	        viewer._updateRequestId = scheduleUpdate( viewer, updateMulti );
	    } else {
	        viewer._updateRequestId = false;
	    }
	}

	function updateOnce( viewer ) {

	    //viewer.profiler.beginUpdate();

	    if (viewer._opening) {
	        return;
	    }

	    var containerSize;
	    if ( viewer.autoResize ) {
	        containerSize = _getSafeElemSize( viewer.container );
	        if ( !containerSize.equals( THIS[ viewer.hash ].prevContainerSize ) ) {
	            if ( viewer.preserveImageSizeOnResize ) {
	                var prevContainerSize = THIS[ viewer.hash ].prevContainerSize;
	                var bounds = viewer.viewport.getBounds(true);
	                var deltaX = (containerSize.x - prevContainerSize.x);
	                var deltaY = (containerSize.y - prevContainerSize.y);
	                var viewportDiff = viewer.viewport.deltaPointsFromPixels(new OpenSeadragon.Point(deltaX, deltaY), true);
	                viewer.viewport.resize(new OpenSeadragon.Point(containerSize.x, containerSize.y), false);

	                // Keep the center of the image in the center and just adjust the amount of image shown
	                bounds.width += viewportDiff.x;
	                bounds.height += viewportDiff.y;
	                bounds.x -= (viewportDiff.x / 2);
	                bounds.y -= (viewportDiff.y / 2);
	                viewer.viewport.fitBoundsWithConstraints(bounds, true);
	            }
	            else {
	                // maintain image position
	                var oldBounds = viewer.viewport.getBounds();
	                var oldCenter = viewer.viewport.getCenter();
	                resizeViewportAndRecenter(viewer, containerSize, oldBounds, oldCenter);
	            }
	            THIS[ viewer.hash ].prevContainerSize = containerSize;
	            THIS[ viewer.hash ].forceRedraw = true;
	        }
	    }

	    var viewportChange = viewer.viewport.update();
	    var animated = viewer.world.update() || viewportChange;

	    if (viewportChange) {
	        /**
	         * Raised when any spring animation update occurs (zoom, pan, etc.),
	         * before the viewer has drawn the new location.
	         *
	         * @event viewport-change
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent('viewport-change');
	    }

	    if( viewer.referenceStrip ){
	        animated = viewer.referenceStrip.update( viewer.viewport ) || animated;
	    }

	    if ( !THIS[ viewer.hash ].animating && animated ) {
	        /**
	         * Raised when any spring animation starts (zoom, pan, etc.).
	         *
	         * @event animation-start
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent( "animation-start" );
	        abortControlsAutoHide( viewer );
	    }

	    if ( animated || THIS[ viewer.hash ].forceRedraw || viewer.world.needsDraw() ) {
	        drawWorld( viewer );
	        viewer._drawOverlays();
	        if( viewer.navigator ){
	            viewer.navigator.update( viewer.viewport );
	        }

	        THIS[ viewer.hash ].forceRedraw = false;

	        if (animated) {
	            /**
	             * Raised when any spring animation update occurs (zoom, pan, etc.),
	             * after the viewer has drawn the new location.
	             *
	             * @event animation
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            viewer.raiseEvent( "animation" );
	        }
	    }

	    if ( THIS[ viewer.hash ].animating && !animated ) {
	        /**
	         * Raised when any spring animation ends (zoom, pan, etc.).
	         *
	         * @event animation-finish
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent( "animation-finish" );

	        if ( !THIS[ viewer.hash ].mouseInside ) {
	            beginControlsAutoHide( viewer );
	        }
	    }

	    THIS[ viewer.hash ].animating = animated;

	    //viewer.profiler.endUpdate();
	}

	// This function resizes the viewport and recenters the image
	// as it was before resizing.
	// TODO: better adjust width and height. The new width and height
	// should depend on the image dimensions and on the dimensions
	// of the viewport before and after switching mode.
	function resizeViewportAndRecenter( viewer, containerSize, oldBounds, oldCenter ) {
	    var viewport = viewer.viewport;

	    viewport.resize( containerSize, true );

	    var newBounds = new $.Rect(
	        oldCenter.x - ( oldBounds.width / 2.0 ),
	        oldCenter.y - ( oldBounds.height / 2.0 ),
	        oldBounds.width,
	        oldBounds.height
	    );

	    // let the viewport decide if the bounds are too big or too small
	    viewport.fitBoundsWithConstraints( newBounds, true );
	}

	function drawWorld( viewer ) {
	    viewer.imageLoader.clear();
	    viewer.drawer.clear();
	    viewer.world.draw();

	    /**
	     * <em>- Needs documentation -</em>
	     *
	     * @event update-viewport
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    viewer.raiseEvent( 'update-viewport', {} );
	}

	///////////////////////////////////////////////////////////////////////////////
	// Navigation Controls
	///////////////////////////////////////////////////////////////////////////////
	function resolveUrl( prefix, url ) {
	    return prefix ? prefix + url : url;
	}



	function beginZoomingIn() {
	    THIS[ this.hash ].lastZoomTime = $.now();
	    THIS[ this.hash ].zoomFactor = this.zoomPerSecond;
	    THIS[ this.hash ].zooming = true;
	    scheduleZoom( this );
	}


	function beginZoomingOut() {
	    THIS[ this.hash ].lastZoomTime = $.now();
	    THIS[ this.hash ].zoomFactor = 1.0 / this.zoomPerSecond;
	    THIS[ this.hash ].zooming = true;
	    scheduleZoom( this );
	}


	function endZooming() {
	    THIS[ this.hash ].zooming = false;
	}


	function scheduleZoom( viewer ) {
	    $.requestAnimationFrame( $.delegate( viewer, doZoom ) );
	}


	function doZoom() {
	    var currentTime,
	        deltaTime,
	        adjustedFactor;

	    if ( THIS[ this.hash ].zooming && this.viewport) {
	        currentTime     = $.now();
	        deltaTime       = currentTime - THIS[ this.hash ].lastZoomTime;
	        adjustedFactor  = Math.pow( THIS[ this.hash ].zoomFactor, deltaTime / 1000 );

	        this.viewport.zoomBy( adjustedFactor );
	        this.viewport.applyConstraints();
	        THIS[ this.hash ].lastZoomTime = currentTime;
	        scheduleZoom( this );
	    }
	}


	function doSingleZoomIn() {
	    if ( this.viewport ) {
	        THIS[ this.hash ].zooming = false;
	        this.viewport.zoomBy(
	            this.zoomPerClick / 1.0
	        );
	        this.viewport.applyConstraints();
	    }
	}


	function doSingleZoomOut() {
	    if ( this.viewport ) {
	        THIS[ this.hash ].zooming = false;
	        this.viewport.zoomBy(
	            1.0 / this.zoomPerClick
	        );
	        this.viewport.applyConstraints();
	    }
	}


	function lightUp() {
	    this.buttons.emulateEnter();
	    this.buttons.emulateExit();
	}


	function onHome() {
	    if ( this.viewport ) {
	        this.viewport.goHome();
	    }
	}


	function onFullScreen() {
	    if ( this.isFullPage() && !$.isFullScreen() ) {
	        // Is fullPage but not fullScreen
	        this.setFullPage( false );
	    } else {
	        this.setFullScreen( !this.isFullPage() );
	    }
	    // correct for no mouseout event on change
	    if ( this.buttons ) {
	        this.buttons.emulateExit();
	    }
	    this.fullPageButton.element.focus();
	    if ( this.viewport ) {
	        this.viewport.applyConstraints();
	    }
	}

	/**
	 * Note: The current rotation feature is limited to 90 degree turns.
	 */
	function onRotateLeft() {
	    if ( this.viewport ) {
	        var currRotation = this.viewport.getRotation();
	        if (currRotation === 0) {
	            currRotation = 270;
	        }
	        else {
	            currRotation -= 90;
	        }
	        this.viewport.setRotation(currRotation);
	    }
	}

	/**
	 * Note: The current rotation feature is limited to 90 degree turns.
	 */
	function onRotateRight() {
	    if ( this.viewport ) {
	        var currRotation = this.viewport.getRotation();
	        if (currRotation === 270) {
	            currRotation = 0;
	        }
	        else {
	            currRotation += 90;
	        }
	        this.viewport.setRotation(currRotation);
	    }
	}


	function onPrevious(){
	    var previous = this._sequenceIndex - 1;
	    if(this.navPrevNextWrap && previous < 0){
	        previous += this.tileSources.length;
	    }
	    this.goToPage( previous );
	}


	function onNext(){
	    var next = this._sequenceIndex + 1;
	    if(this.navPrevNextWrap && next >= this.tileSources.length){
	        next = 0;
	    }
	    this.goToPage( next );
	}


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Navigator
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Navigator
	 * @classdesc The Navigator provides a small view of the current image as fixed
	 * while representing the viewport as a moving box serving as a frame
	 * of reference in the larger viewport as to which portion of the image
	 * is currently being examined.  The navigator's viewport can be interacted
	 * with using the keyboard or the mouse.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.Viewer
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 */
	$.Navigator = function( options ){

	    var viewer      = options.viewer,
	        _this = this,
	        viewerSize,
	        navigatorSize;

	    //We may need to create a new element and id if they did not
	    //provide the id for the existing element
	    if( !options.id ){
	        options.id              = 'navigator-' + $.now();
	        this.element            = $.makeNeutralElement( "div" );
	        options.controlOptions  = {
	            anchor:           $.ControlAnchor.TOP_RIGHT,
	            attachToViewer:   true,
	            autoFade:         true
	        };

	        if( options.position ){
	            if( 'BOTTOM_RIGHT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_RIGHT;
	            } else if( 'BOTTOM_LEFT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_LEFT;
	            } else if( 'TOP_RIGHT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.TOP_RIGHT;
	            } else if( 'TOP_LEFT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.TOP_LEFT;
	            } else if( 'ABSOLUTE' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.ABSOLUTE;
	               options.controlOptions.top = options.top;
	               options.controlOptions.left = options.left;
	               options.controlOptions.height = options.height;
	               options.controlOptions.width = options.width;
	            }
	        }

	    } else {
	        this.element            = document.getElementById( options.id );
	        options.controlOptions  = {
	            anchor:           $.ControlAnchor.NONE,
	            attachToViewer:   false,
	            autoFade:         false
	        };
	    }
	    this.element.id         = options.id;
	    this.element.className  += ' navigator';

	    options = $.extend( true, {
	        sizeRatio:     $.DEFAULT_SETTINGS.navigatorSizeRatio
	    }, options, {
	        element:                this.element,
	        tabIndex:               -1, // No keyboard navigation, omit from tab order
	        //These need to be overridden to prevent recursion since
	        //the navigator is a viewer and a viewer has a navigator
	        showNavigator:          false,
	        mouseNavEnabled:        false,
	        showNavigationControl:  false,
	        showSequenceControl:    false,
	        immediateRender:        true,
	        blendTime:              0,
	        animationTime:          0,
	        autoResize:             options.autoResize,
	        // prevent resizing the navigator from adding unwanted space around the image
	        minZoomImageRatio:      1.0
	    });

	    options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio;

	    $.setElementTouchActionNone( this.element );

	    this.borderWidth = 2;
	    //At some browser magnification levels the display regions lines up correctly, but at some there appears to
	    //be a one pixel gap.
	    this.fudge = new $.Point(1, 1);
	    this.totalBorderWidths = new $.Point(this.borderWidth*2, this.borderWidth*2).minus(this.fudge);


	    if ( options.controlOptions.anchor != $.ControlAnchor.NONE ) {
	        (function( style, borderWidth ){
	            style.margin        = '0px';
	            style.border        = borderWidth + 'px solid #555';
	            style.padding       = '0px';
	            style.background    = '#000';
	            style.opacity       = 0.8;
	            style.overflow      = 'hidden';
	        }( this.element.style, this.borderWidth));
	    }

	    this.displayRegion           = $.makeNeutralElement( "div" );
	    this.displayRegion.id        = this.element.id + '-displayregion';
	    this.displayRegion.className = 'displayregion';

	    (function( style, borderWidth ){
	        style.position      = 'relative';
	        style.top           = '0px';
	        style.left          = '0px';
	        style.fontSize      = '0px';
	        style.overflow      = 'hidden';
	        style.border        = borderWidth + 'px solid #900';
	        style.margin        = '0px';
	        style.padding       = '0px';
	        //TODO: IE doesnt like this property being set
	        //try{ style.outline  = '2px auto #909'; }catch(e){/*ignore*/}

	        style.background    = 'transparent';

	        // We use square bracket notation on the statement below, because float is a keyword.
	        // This is important for the Google Closure compiler, if nothing else.
	        /*jshint sub:true */
	        style['float']      = 'left'; //Webkit

	        style.cssFloat      = 'left'; //Firefox
	        style.styleFloat    = 'left'; //IE
	        style.zIndex        = 999999999;
	        style.cursor        = 'default';
	    }( this.displayRegion.style, this.borderWidth ));

	    this.displayRegionContainer = $.makeNeutralElement("div");
	    this.displayRegionContainer.id = this.element.id + '-displayregioncontainer';
	    this.displayRegionContainer.className = "displayregioncontainer";
	    this.displayRegionContainer.style.width = "100%";
	    this.displayRegionContainer.style.height = "100%";

	    viewer.addControl(
	        this.element,
	        options.controlOptions
	    );

	    this._resizeWithViewer = options.controlOptions.anchor != $.ControlAnchor.ABSOLUTE &&
	        options.controlOptions.anchor != $.ControlAnchor.NONE;

	    if ( this._resizeWithViewer ) {
	        if ( options.width && options.height ) {
	            this.element.style.height = typeof ( options.height )  == "number" ? ( options.height + 'px' ) : options.height;
	            this.element.style.width  = typeof ( options.width )  == "number" ? ( options.width + 'px' ) : options.width;
	        } else {
	            viewerSize = $.getElementSize( viewer.element );
	            this.element.style.height = Math.round( viewerSize.y * options.sizeRatio ) + 'px';
	            this.element.style.width  = Math.round( viewerSize.x * options.sizeRatio ) + 'px';
	            this.oldViewerSize = viewerSize;
	        }
	        navigatorSize = $.getElementSize( this.element );
	        this.elementArea = navigatorSize.x * navigatorSize.y;
	    }

	    this.oldContainerSize = new $.Point( 0, 0 );

	    $.Viewer.apply( this, [ options ] );

	    this.displayRegionContainer.appendChild(this.displayRegion);
	    this.element.getElementsByTagName('div')[0].appendChild(this.displayRegionContainer);

	    if (options.navigatorRotate) {
	        options.viewer.addHandler("rotate", function (args) {
	            _setTransformRotate(_this.displayRegionContainer, args.degrees);
	            _setTransformRotate(_this.displayRegion, -args.degrees);
	            _this.viewport.setRotation(args.degrees);
	        });
	    }

	    // Remove the base class' (Viewer's) innerTracker and replace it with our own
	    this.innerTracker.destroy();
	    this.innerTracker = new $.MouseTracker({
	        element:         this.element,
	        dragHandler:     $.delegate( this, onCanvasDrag ),
	        clickHandler:    $.delegate( this, onCanvasClick ),
	        releaseHandler:  $.delegate( this, onCanvasRelease ),
	        scrollHandler:   $.delegate( this, onCanvasScroll )
	    });

	    this.addHandler("reset-size", function() {
	        if (_this.viewport) {
	            _this.viewport.goHome(true);
	        }
	    });

	    this.addHandler("reset-size", function() {
	        if (_this.viewport) {
	            _this.viewport.goHome(true);
	        }
	    });

	    viewer.world.addHandler("item-index-change", function(event) {
	        var item = _this.world.getItemAt(event.previousIndex);
	        _this.world.setItemIndex(item, event.newIndex);
	    });

	    viewer.world.addHandler("remove-item", function(event) {
	        var theirItem = event.item;
	        var myItem = _this._getMatchingItem(theirItem);
	        if (myItem) {
	            _this.world.removeItem(myItem);
	        }
	    });

	    this.update(viewer.viewport);
	};

	$.extend( $.Navigator.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.Navigator.prototype */{

	    /**
	     * Used to notify the navigator when its size has changed.
	     * Especially useful when {@link OpenSeadragon.Options}.navigatorAutoResize is set to false and the navigator is resizable.
	     * @function
	     */
	    updateSize: function () {
	        if ( this.viewport ) {
	            var containerSize = new $.Point(
	                    (this.container.clientWidth === 0 ? 1 : this.container.clientWidth),
	                    (this.container.clientHeight === 0 ? 1 : this.container.clientHeight)
	                );

	            if ( !containerSize.equals( this.oldContainerSize ) ) {
	                this.viewport.resize( containerSize, true );
	                this.viewport.goHome(true);
	                this.oldContainerSize = containerSize;
	                this.drawer.clear();
	                this.world.draw();
	            }
	        }
	    },

	    /**
	     * Used to update the navigator minimap's viewport rectangle when a change in the viewer's viewport occurs.
	     * @function
	     * @param {OpenSeadragon.Viewport} The viewport this navigator is tracking.
	     */
	    update: function( viewport ) {

	        var viewerSize,
	            newWidth,
	            newHeight,
	            bounds,
	            topleft,
	            bottomright;

	        viewerSize = $.getElementSize( this.viewer.element );
	        if ( this._resizeWithViewer && viewerSize.x && viewerSize.y && !viewerSize.equals( this.oldViewerSize ) ) {
	            this.oldViewerSize = viewerSize;

	            if ( this.maintainSizeRatio || !this.elementArea) {
	                newWidth  = viewerSize.x * this.sizeRatio;
	                newHeight = viewerSize.y * this.sizeRatio;
	            } else {
	                newWidth = Math.sqrt(this.elementArea * (viewerSize.x / viewerSize.y));
	                newHeight = this.elementArea / newWidth;
	            }

	            this.element.style.width  = Math.round( newWidth ) + 'px';
	            this.element.style.height = Math.round( newHeight ) + 'px';

	            if (!this.elementArea) {
	                this.elementArea = newWidth * newHeight;
	            }

	            this.updateSize();
	        }

	        if( viewport && this.viewport ) {
	            bounds      = viewport.getBounds( true );
	            topleft     = this.viewport.pixelFromPoint( bounds.getTopLeft(), false );
	            bottomright = this.viewport.pixelFromPoint( bounds.getBottomRight(), false )
	                .minus( this.totalBorderWidths );

	            //update style for navigator-box
	            var style = this.displayRegion.style;
	            style.display = this.world.getItemCount() ? 'block' : 'none';

	            style.top    = Math.round( topleft.y ) + 'px';
	            style.left   = Math.round( topleft.x ) + 'px';

	            var width = Math.abs( topleft.x - bottomright.x );
	            var height = Math.abs( topleft.y - bottomright.y );
	            // make sure width and height are non-negative so IE doesn't throw
	            style.width  = Math.round( Math.max( width, 0 ) ) + 'px';
	            style.height = Math.round( Math.max( height, 0 ) ) + 'px';
	        }

	    },

	    // overrides Viewer.addTiledImage
	    addTiledImage: function(options) {
	        var _this = this;

	        var original = options.originalTiledImage;
	        delete options.original;

	        var optionsClone = $.extend({}, options, {
	            success: function(event) {
	                var myItem = event.item;
	                myItem._originalForNavigator = original;
	                _this._matchBounds(myItem, original, true);

	                original.addHandler('bounds-change', function() {
	                    _this._matchBounds(myItem, original);
	                });
	            }
	        });

	        return $.Viewer.prototype.addTiledImage.apply(this, [optionsClone]);
	    },

	    // private
	    _getMatchingItem: function(theirItem) {
	        var count = this.world.getItemCount();
	        var item;
	        for (var i = 0; i < count; i++) {
	            item = this.world.getItemAt(i);
	            if (item._originalForNavigator === theirItem) {
	                return item;
	            }
	        }

	        return null;
	    },

	    // private
	    _matchBounds: function(myItem, theirItem, immediately) {
	        var bounds = theirItem.getBounds();
	        myItem.setPosition(bounds.getTopLeft(), immediately);
	        myItem.setWidth(bounds.width, immediately);
	    }
	});

	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasClick( event ) {
	    if ( event.quick && this.viewer.viewport ) {
	        this.viewer.viewport.panTo( this.viewport.pointFromPixel( event.position ).rotate( -this.viewer.viewport.degrees, this.viewer.viewport.getHomeBounds().getCenter() ) );
	        this.viewer.viewport.applyConstraints();
	    }
	}

	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasDrag( event ) {
	    if ( this.viewer.viewport ) {
	        if( !this.panHorizontal ){
	            event.delta.x = 0;
	        }
	        if( !this.panVertical ){
	            event.delta.y = 0;
	        }
	        this.viewer.viewport.panBy(
	            this.viewport.deltaPointsFromPixels(
	                event.delta
	            )
	        );
	    }
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasRelease( event ) {
	    if ( event.insideElementPressed && this.viewer.viewport ) {
	        this.viewer.viewport.applyConstraints();
	    }
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasScroll( event ) {
	    /**
	     * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#navigator} element (mouse wheel, touch pinch, etc.).
	     *
	     * @event navigator-scroll
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} scroll - The scroll delta for the event.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.viewer.raiseEvent( 'navigator-scroll', {
	        tracker: event.eventSource,
	        position: event.position,
	        scroll: event.scroll,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });

	    //dont scroll the page up and down if the user is scrolling
	    //in the navigator
	    return false;
	}

	/**
	    * @function
	    * @private
	    * @param {Object} element
	    * @param {Number} degrees
	    */
	function _setTransformRotate (element, degrees) {
	    element.style.webkitTransform = "rotate(" + degrees + "deg)";
	    element.style.mozTransform = "rotate(" + degrees + "deg)";
	    element.style.msTransform = "rotate(" + degrees + "deg)";
	    element.style.oTransform = "rotate(" + degrees + "deg)";
	    element.style.transform = "rotate(" + degrees + "deg)";
	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - getString/setString
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	//TODO: I guess this is where the i18n needs to be reimplemented.  I'll look
	//      into existing patterns for i18n in javascript but i think that mimicking
	//      pythons gettext might be a reasonable approach.
	var I18N = {
	    Errors: {
	        Dzc:            "Sorry, we don't support Deep Zoom Collections!",
	        Dzi:            "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
	        Xml:            "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
	        ImageFormat:    "Sorry, we don't support {0}-based Deep Zoom Images.",
	        Security:       "It looks like a security restriction stopped us from " +
	                        "loading this Deep Zoom Image.",
	        Status:         "This space unintentionally left blank ({0} {1}).",
	        OpenFailed:     "Unable to open {0}: {1}"
	    },

	    Tooltips: {
	        FullPage:       "Toggle full page",
	        Home:           "Go home",
	        ZoomIn:         "Zoom in",
	        ZoomOut:        "Zoom out",
	        NextPage:       "Next page",
	        PreviousPage:   "Previous page",
	        RotateLeft:     "Rotate left",
	        RotateRight:    "Rotate right"
	    }
	};

	$.extend( $, /** @lends OpenSeadragon */{

	    /**
	     * @function
	     * @param {String} property
	     */
	    getString: function( prop ) {

	        var props   = prop.split('.'),
	            string  = null,
	            args    = arguments,
	            container = I18N,
	            i;

	        for ( i = 0; i < props.length-1; i++ ) {
	            // in case not a subproperty
	            container = container[ props[ i ] ] || {};
	        }
	        string = container[ props[ i ] ];

	        if ( typeof( string ) != "string" ) {
	            $.console.debug( "Untranslated source string:", prop );
	            string = ""; // FIXME: this breaks gettext()-style convention, which would return source
	        }

	        return string.replace(/\{\d+\}/g, function(capture) {
	            var i = parseInt( capture.match( /\d+/ ), 10 ) + 1;
	            return i < args.length ?
	                args[ i ] :
	                "";
	        });
	    },

	    /**
	     * @function
	     * @param {String} property
	     * @param {*} value
	     */
	    setString: function( prop, value ) {

	        var props     = prop.split('.'),
	            container = I18N,
	            i;

	        for ( i = 0; i < props.length - 1; i++ ) {
	            if ( !container[ props[ i ] ] ) {
	                container[ props[ i ] ] = {};
	            }
	            container = container[ props[ i ] ];
	        }

	        container[ props[ i ] ] = value;
	    }

	});

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Point
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Point
	 * @classdesc A Point is really used as a 2-dimensional vector, equally useful for
	 * representing a point on a plane, or the height and width of a plane
	 * not requiring any other frame of reference.
	 *
	 * @memberof OpenSeadragon
	 * @param {Number} [x] The vector component 'x'. Defaults to the origin at 0.
	 * @param {Number} [y] The vector component 'y'. Defaults to the origin at 0.
	 */
	$.Point = function( x, y ) {
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Point#
	     */
	    this.x = typeof ( x ) == "number" ? x : 0;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Point#
	     */
	    this.y = typeof ( y ) == "number" ? y : 0;
	};

	$.Point.prototype = /** @lends OpenSeadragon.Point.prototype */{
	    /**
	     * @function
	     * @returns {OpenSeadragon.Point} a duplicate of this Point
	     */
	    clone: function() {
	        return new $.Point(this.x, this.y);
	    },

	    /**
	     * Add another Point to this point and return a new Point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to add vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the sum of the
	     *  vector components
	     */
	    plus: function( point ) {
	        return new $.Point(
	            this.x + point.x,
	            this.y + point.y
	        );
	    },

	    /**
	     * Substract another Point to this point and return a new Point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to substract vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the substraction of the
	     *  vector components
	     */
	    minus: function( point ) {
	        return new $.Point(
	            this.x - point.x,
	            this.y - point.y
	        );
	    },

	    /**
	     * Multiply this point by a factor and return a new Point.
	     * @function
	     * @param {Number} factor The factor to multiply vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the multiplication
	     *  of the vector components by the factor
	     */
	    times: function( factor ) {
	        return new $.Point(
	            this.x * factor,
	            this.y * factor
	        );
	    },

	    /**
	     * Divide this point by a factor and return a new Point.
	     * @function
	     * @param {Number} factor The factor to divide vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the division of the
	     *  vector components by the factor
	     */
	    divide: function( factor ) {
	        return new $.Point(
	            this.x / factor,
	            this.y / factor
	        );
	    },

	    /**
	     * Compute the opposite of this point and return a new Point.
	     * @function
	     * @returns {OpenSeadragon.Point} A new point representing the opposite of the
	     *  vector components
	     */
	    negate: function() {
	        return new $.Point( -this.x, -this.y );
	    },

	    /**
	     * Compute the distance between this point and another point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to compute the distance with.
	     * @returns {Number} The distance between the 2 points
	     */
	    distanceTo: function( point ) {
	        return Math.sqrt(
	            Math.pow( this.x - point.x, 2 ) +
	            Math.pow( this.y - point.y, 2 )
	        );
	    },

	    /**
	     * Apply a function to each coordinate of this point and return a new point.
	     * @function
	     * @param {function} func The function to apply to each coordinate.
	     * @returns {OpenSeadragon.Point} A new point with the coordinates computed
	     * by the specified function
	     */
	    apply: function( func ) {
	        return new $.Point( func( this.x ), func( this.y ) );
	    },

	    /**
	     * Check if this point is equal to another one.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to compare this point with.
	     * @returns {Boolean} true if they are equal, false otherwise.
	     */
	    equals: function( point ) {
	        return (
	            point instanceof $.Point
	        ) && (
	            this.x === point.x
	        ) && (
	            this.y === point.y
	        );
	    },

	    /**
	     * Rotates the point around the specified pivot
	     * From http://stackoverflow.com/questions/4465931/rotate-rectangle-around-a-point
	     * @function
	     * @param {Number} degress to rotate around the pivot.
	     * @param {OpenSeadragon.Point} pivot Point about which to rotate.
	     * @returns {OpenSeadragon.Point}. A new point representing the point rotated around the specified pivot
	     */
	    rotate: function ( degrees, pivot ) {
	        var angle = degrees * Math.PI / 180.0,
	            x = Math.cos( angle ) * ( this.x - pivot.x ) - Math.sin( angle ) * ( this.y - pivot.y ) + pivot.x,
	            y = Math.sin( angle ) * ( this.x - pivot.x ) + Math.cos( angle ) * ( this.y - pivot.y ) + pivot.y;
	        return new $.Point( x, y );
	    },

	    /**
	     * Convert this point to a string in the format (x,y) where x and y are
	     * rounded to the nearest integer.
	     * @function
	     * @returns {String} A string representation of this point.
	     */
	    toString: function() {
	        return "(" + (Math.round(this.x * 100) / 100) + "," + (Math.round(this.y * 100) / 100) + ")";
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - TileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){


	/**
	 * @class TileSource
	 * @classdesc The TileSource contains the most basic implementation required to create a
	 * smooth transition between layers in an image pyramid. It has only a single key
	 * interface that must be implemented to complete its key functionality:
	 * 'getTileUrl'.  It also has several optional interfaces that can be
	 * implemented if a new TileSource wishes to support configuration via a simple
	 * object or array ('configure') and if the tile source supports or requires
	 * configuration via retrieval of a document on the network ala AJAX or JSONP,
	 * ('getImageInfo').
	 * <br/>
	 * By default the image pyramid is split into N layers where the image's longest
	 * side in M (in pixels), where N is the smallest integer which satisfies
	 *      <strong>2^(N+1) >= M</strong>.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 *      You can either specify a URL, or literally define the TileSource (by specifying
	 *      width, height, tileSize, tileOverlap, minLevel, and maxLevel). For the former,
	 *      the extending class is expected to implement 'getImageInfo' and 'configure'.
	 *      For the latter, the construction is assumed to occur through
	 *      the extending classes implementation of 'configure'.
	 * @param {String} [options.url]
	 *      The URL for the data necessary for this TileSource.
	 * @param {Function} [options.success]
	 *      A function to be called upon successful creation.
	 * @param {Boolean} [options.ajaxWithCredentials]
	 *      If this TileSource needs to make an AJAX call, this specifies whether to set
	 *      the XHR's withCredentials (for accessing secure data).
	 * @param {Number} [options.width]
	 *      Width of the source image at max resolution in pixels.
	 * @param {Number} [options.height]
	 *      Height of the source image at max resolution in pixels.
	 * @param {Number} [options.tileSize]
	 *      The size of the tiles to assumed to make up each pyramid layer in pixels.
	 *      Tile size determines the point at which the image pyramid must be
	 *      divided into a matrix of smaller images.
	 *      Use options.tileWidth and options.tileHeight to support non-square tiles.
	 * @param {Number} [options.tileWidth]
	 *      The width of the tiles to assumed to make up each pyramid layer in pixels.
	 * @param {Number} [options.tileHeight]
	 *      The height of the tiles to assumed to make up each pyramid layer in pixels.
	 * @param {Number} [options.tileOverlap]
	 *      The number of pixels each tile is expected to overlap touching tiles.
	 * @param {Number} [options.minLevel]
	 *      The minimum level to attempt to load.
	 * @param {Number} [options.maxLevel]
	 *      The maximum level to attempt to load.
	 */
	$.TileSource = function( width, height, tileSize, tileOverlap, minLevel, maxLevel ) {
	    var _this = this;

	    var args = arguments,
	        options,
	        i;

	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: args[0],
	            height: args[1],
	            tileSize: args[2],
	            tileOverlap: args[3],
	            minLevel: args[4],
	            maxLevel: args[5]
	        };
	    }

	    //Tile sources supply some events, namely 'ready' when they must be configured
	    //by asynchronously fetching their configuration data.
	    $.EventSource.call( this );

	    //we allow options to override anything we dont treat as
	    //required via idiomatic options or which is functionally
	    //set depending on the state of the readiness of this tile
	    //source
	    $.extend( true, this, options );

	    if (!this.success) {
	        //Any functions that are passed as arguments are bound to the ready callback
	        for ( i = 0; i < arguments.length; i++ ) {
	            if ( $.isFunction( arguments[ i ] ) ) {
	                this.success = arguments[ i ];
	                //only one callback per constructor
	                break;
	            }
	        }
	    }

	    if (this.success) {
	        this.addHandler( 'ready', function ( event ) {
	            _this.success( event );
	        } );
	    }

	    /**
	     * Ratio of width to height
	     * @member {Number} aspectRatio
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * Vector storing x and y dimensions ( width and height respectively ).
	     * @member {OpenSeadragon.Point} dimensions
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The overlap in pixels each tile shares with its adjacent neighbors.
	     * @member {Number} tileOverlap
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The minimum pyramid level this tile source supports or should attempt to load.
	     * @member {Number} minLevel
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The maximum pyramid level this tile source supports or should attempt to load.
	     * @member {Number} maxLevel
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     *
	     * @member {Boolean} ready
	     * @memberof OpenSeadragon.TileSource#
	     */

	    if( 'string' == $.type( arguments[ 0 ] ) ){
	        this.url = arguments[0];
	    }

	    if (this.url) {
	        //in case the getImageInfo method is overriden and/or implies an
	        //async mechanism set some safe defaults first
	        this.aspectRatio = 1;
	        this.dimensions  = new $.Point( 10, 10 );
	        this._tileWidth  = 0;
	        this._tileHeight = 0;
	        this.tileOverlap = 0;
	        this.minLevel    = 0;
	        this.maxLevel    = 0;
	        this.ready       = false;
	        //configuration via url implies the extending class
	        //implements and 'configure'
	        this.getImageInfo( this.url );

	    } else {

	        //explicit configuration via positional args in constructor
	        //or the more idiomatic 'options' object
	        this.ready       = true;
	        this.aspectRatio = ( options.width && options.height ) ?
	            (  options.width / options.height ) : 1;
	        this.dimensions  = new $.Point( options.width, options.height );
	        
	        if ( this.tileSize ){
	            this._tileWidth = this._tileHeight = this.tileSize;
	            delete this.tileSize;
	        } else {
	            if( this.tileWidth ){
	                // We were passed tileWidth in options, but we want to rename it
	                // with a leading underscore to make clear that it is not safe to directly modify it
	                this._tileWidth = this.tileWidth;
	                delete this.tileWidth;
	            } else {
	                this._tileWidth = 0;
	            }

	            if( this.tileHeight ){
	                // See note above about renaming this.tileWidth
	                this._tileHeight = this.tileHeight;
	                delete this.tileHeight;
	            } else {
	                this._tileHeight = 0;
	            }
	        }
	        
	        this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0;
	        this.minLevel    = options.minLevel ? options.minLevel : 0;
	        this.maxLevel    = ( undefined !== options.maxLevel && null !== options.maxLevel ) ?
	            options.maxLevel : (
	                ( options.width && options.height ) ? Math.ceil(
	                    Math.log( Math.max( options.width, options.height ) ) /
	                    Math.log( 2 )
	                ) : 0
	            );
	        if( this.success && $.isFunction( this.success ) ){
	            this.success( this );
	        }
	    }


	};


	$.TileSource.prototype = /** @lends OpenSeadragon.TileSource.prototype */{

	    getTileSize: function( level ) {
	        $.console.error(
	            "[TileSource.getTileSize] is deprecated." +
	            "Use TileSource.getTileWidth() and TileSource.getTileHeight() instead"
	        );
	        return this._tileWidth;
	    },
	    
	    /**
	     * Return the tileWidth for a given level.
	     * Subclasses should override this if tileWidth can be different at different levels
	     *   such as in IIIFTileSource.  Code should use this function rather than reading
	     *   from ._tileWidth directly.
	     * @function
	     * @param {Number} level
	     */
	    getTileWidth: function( level ) {
	        if (!this._tileWidth) {
	            return this.getTileSize(level);
	        }
	        return this._tileWidth;
	    },

	    /**
	     * Return the tileHeight for a given level.
	     * Subclasses should override this if tileHeight can be different at different levels
	     *   such as in IIIFTileSource.  Code should use this function rather than reading
	     *   from ._tileHeight directly.
	     * @function
	     * @param {Number} level
	     */
	    getTileHeight: function( level ) {
	        if (!this._tileHeight) {
	            return this.getTileSize(level);
	        }
	        return this._tileHeight;
	    },

	    /**
	     * @function
	     * @param {Number} level
	     */
	    getLevelScale: function( level ) {

	        // see https://github.com/openseadragon/openseadragon/issues/22
	        // we use the tilesources implementation of getLevelScale to generate
	        // a memoized re-implementation
	        var levelScaleCache = {},
	            i;
	        for( i = 0; i <= this.maxLevel; i++ ){
	            levelScaleCache[ i ] = 1 / Math.pow(2, this.maxLevel - i);
	        }
	        this.getLevelScale = function( _level ){
	            return levelScaleCache[ _level ];
	        };
	        return this.getLevelScale( level );
	    },

	    /**
	     * @function
	     * @param {Number} level
	     */
	    getNumTiles: function( level ) {
	        var scale = this.getLevelScale( level ),
	            x = Math.ceil( scale * this.dimensions.x / this.getTileWidth(level) ),
	            y = Math.ceil( scale * this.dimensions.y / this.getTileHeight(level) );

	        return new $.Point( x, y );
	    },

	    /**
	     * @function
	     * @param {Number} level
	     */
	    getPixelRatio: function( level ) {
	        var imageSizeScaled = this.dimensions.times( this.getLevelScale( level ) ),
	            rx = 1.0 / imageSizeScaled.x,
	            ry = 1.0 / imageSizeScaled.y;

	        return new $.Point(rx, ry);
	    },


	    /**
	     * @function
	     * @param {Number} level
	     */
	    getClosestLevel: function( rect ) {
	        var i,
	            tilesPerSide,
	            tiles;

	        for( i = this.minLevel; i < this.maxLevel; i++ ){
	            tiles = this.getNumTiles( i );
	            tilesPerSide = new $.Point(
	              Math.floor( rect.x / this.getTileWidth(i) ),
	              Math.floor( rect.y / this.getTileHeight(i) )
	            );
	            
	            if( tiles.x + 1 >= tilesPerSide.x && tiles.y + 1 >= tilesPerSide.y ){
	                break;
	            }
	        }
	        return Math.max( 0, i - 1 );
	    },

	    /**
	     * @function
	     * @param {Number} level
	     * @param {OpenSeadragon.Point} point
	     */
	    getTileAtPoint: function( level, point ) {
	        var pixel = point.times( this.dimensions.x ).times( this.getLevelScale(level) ),
	            tx = Math.floor( pixel.x / this.getTileWidth(level) ),
	            ty = Math.floor( pixel.y / this.getTileHeight(level) );

	        return new $.Point( tx, ty );
	    },

	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileBounds: function( level, x, y ) {
	        var dimensionsScaled = this.dimensions.times( this.getLevelScale( level ) ),
	            tileWidth = this.getTileWidth(level),
	            tileHeight = this.getTileHeight(level),
	            px = ( x === 0 ) ? 0 : tileWidth * x - this.tileOverlap,
	            py = ( y === 0 ) ? 0 : tileHeight * y - this.tileOverlap,
	            sx = tileWidth + ( x === 0 ? 1 : 2 ) * this.tileOverlap,
	            sy = tileHeight + ( y === 0 ? 1 : 2 ) * this.tileOverlap,
	            scale = 1.0 / dimensionsScaled.x;

	        sx = Math.min( sx, dimensionsScaled.x - px );
	        sy = Math.min( sy, dimensionsScaled.y - py );

	        return new $.Rect( px * scale, py * scale, sx * scale, sy * scale );
	    },


	    /**
	     * Responsible for retrieving, and caching the
	     * image metadata pertinent to this TileSources implementation.
	     * @function
	     * @param {String} url
	     * @throws {Error}
	     */
	    getImageInfo: function( url ) {
	        var _this = this,
	            callbackName,
	            callback,
	            readySource,
	            options,
	            urlParts,
	            filename,
	            lastDot;


	        if( url ) {
	            urlParts = url.split( '/' );
	            filename = urlParts[ urlParts.length - 1 ];
	            lastDot  = filename.lastIndexOf( '.' );
	            if ( lastDot > -1 ) {
	                urlParts[ urlParts.length - 1 ] = filename.slice( 0, lastDot );
	            }
	        }

	        callback = function( data ){
	            if( typeof(data) === "string" ) {
	                data = $.parseXml( data );
	            }
	            var $TileSource = $.TileSource.determineType( _this, data, url );
	            if ( !$TileSource ) {
	                /**
	                 * Raised when an error occurs loading a TileSource.
	                 *
	                 * @event open-failed
	                 * @memberof OpenSeadragon.TileSource
	                 * @type {object}
	                 * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	                 * @property {String} message
	                 * @property {String} source
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( 'open-failed', { message: "Unable to load TileSource", source: url } );
	                return;
	            }

	            options = $TileSource.prototype.configure.apply( _this, [ data, url ]);
	            if (options.ajaxWithCredentials === undefined) {
	                options.ajaxWithCredentials = _this.ajaxWithCredentials;
	            }

	            readySource = new $TileSource( options );
	            _this.ready = true;
	            /**
	             * Raised when a TileSource is opened and initialized.
	             *
	             * @event ready
	             * @memberof OpenSeadragon.TileSource
	             * @type {object}
	             * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	             * @property {Object} tileSource
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( 'ready', { tileSource: readySource } );
	        };

	        if( url.match(/\.js$/) ){
	            //TODO: Its not very flexible to require tile sources to end jsonp
	            //      request for info  with a url that ends with '.js' but for
	            //      now it's the only way I see to distinguish uniformly.
	            callbackName = url.split( '/' ).pop().replace('.js','');
	            $.jsonp({
	                url: url,
	                async: false,
	                callbackName: callbackName,
	                callback: callback
	            });
	        } else {
	            // request info via xhr asynchronously.
	            $.makeAjaxRequest( {
	                url: url,
	                withCredentials: this.ajaxWithCredentials,
	                success: function( xhr ) {
	                    var data = processResponse( xhr );
	                    callback( data );
	                },
	                error: function ( xhr, exc ) {
	                    var msg;

	                    /*
	                        IE < 10 will block XHR requests to different origins. Any property access on the request
	                        object will raise an exception which we'll attempt to handle by formatting the original
	                        exception rather than the second one raised when we try to access xhr.status
	                     */
	                    try {
	                        msg = "HTTP " + xhr.status + " attempting to load TileSource";
	                    } catch ( e ) {
	                        var formattedExc;
	                        if ( typeof( exc ) == "undefined" || !exc.toString ) {
	                            formattedExc = "Unknown error";
	                        } else {
	                            formattedExc = exc.toString();
	                        }

	                        msg = formattedExc + " attempting to load TileSource";
	                    }

	                    /***
	                     * Raised when an error occurs loading a TileSource.
	                     *
	                     * @event open-failed
	                     * @memberof OpenSeadragon.TileSource
	                     * @type {object}
	                     * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	                     * @property {String} message
	                     * @property {String} source
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    _this.raiseEvent( 'open-failed', {
	                        message: msg,
	                        source: url
	                    });
	                }
	            });
	        }

	    },

	    /**
	     * Responsible determining if a the particular TileSource supports the
	     * data format ( and allowed to apply logic against the url the data was
	     * loaded from, if any ). Overriding implementations are expected to do
	     * something smart with data and / or url to determine support.  Also
	     * understand that iteration order of TileSources is not guarunteed so
	     * please make sure your data or url is expressive enough to ensure a simple
	     * and sufficient mechanisim for clear determination.
	     * @function
	     * @param {String|Object|Array|Document} data
	     * @param {String} url - the url the data was loaded
	     *      from if any.
	     * @return {Boolean}
	     */
	    supports: function( data, url ) {
	        return false;
	    },

	    /**
	     * Responsible for parsing and configuring the
	     * image metadata pertinent to this TileSources implementation.
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {String|Object|Array|Document} data
	     * @param {String} url - the url the data was loaded
	     *      from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     * @throws {Error}
	     */
	    configure: function( data, url ) {
	        throw new Error( "Method not implemented." );
	    },

	    /**
	     * Responsible for retriving the url which will return an image for the
	     * region speified by the given x, y, and level components.
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function( level, x, y ) {
	        throw new Error( "Method not implemented." );
	    },

	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    tileExists: function( level, x, y ) {
	        var numTiles = this.getNumTiles( level );
	        return  level >= this.minLevel &&
	                level <= this.maxLevel &&
	                x >= 0 &&
	                y >= 0 &&
	                x < numTiles.x &&
	                y < numTiles.y;
	    }
	};


	$.extend( true, $.TileSource.prototype, $.EventSource.prototype );


	/**
	 * Decides whether to try to process the response as xml, json, or hand back
	 * the text
	 * @private
	 * @inner
	 * @function
	 * @param {XMLHttpRequest} xhr - the completed network request
	 */
	function processResponse( xhr ){
	    var responseText = xhr.responseText,
	        status       = xhr.status,
	        statusText,
	        data;

	    if ( !xhr ) {
	        throw new Error( $.getString( "Errors.Security" ) );
	    } else if ( xhr.status !== 200 && xhr.status !== 0 ) {
	        status     = xhr.status;
	        statusText = ( status == 404 ) ?
	            "Not Found" :
	            xhr.statusText;
	        throw new Error( $.getString( "Errors.Status", status, statusText ) );
	    }

	    if( responseText.match(/\s*<.*/) ){
	        try{
	        data = ( xhr.responseXML && xhr.responseXML.documentElement ) ?
	            xhr.responseXML :
	            $.parseXml( responseText );
	        } catch (e){
	            data = xhr.responseText;
	        }
	    }else if( responseText.match(/\s*[\{\[].*/) ){
	        data = $.parseJSON(responseText);
	    }else{
	        data = responseText;
	    }
	    return data;
	}


	/**
	 * Determines the TileSource Implementation by introspection of OpenSeadragon
	 * namespace, calling each TileSource implementation of 'isType'
	 * @private
	 * @inner
	 * @function
	 * @param {Object|Array|Document} data - the tile source configuration object
	 * @param {String} url - the url where the tile source configuration object was
	 *      loaded from, if any.
	 */
	$.TileSource.determineType = function( tileSource, data, url ){
	    var property;
	    for( property in OpenSeadragon ){
	        if( property.match(/.+TileSource$/) &&
	            $.isFunction( OpenSeadragon[ property ] ) &&
	            $.isFunction( OpenSeadragon[ property ].prototype.supports ) &&
	            OpenSeadragon[ property ].prototype.supports.call( tileSource, data, url )
	        ){
	            return OpenSeadragon[ property ];
	        }
	    }

	    $.console.error( "No TileSource was able to open %s %s", url, data );
	};


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - DziTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class DziTileSource
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 * @param {String} fileFormat
	 * @param {OpenSeadragon.DisplayRect[]} displayRects
	 * @property {String} tilesUrl
	 * @property {String} fileFormat
	 * @property {OpenSeadragon.DisplayRect[]} displayRects
	 */
	$.DziTileSource = function( width, height, tileSize, tileOverlap, tilesUrl, fileFormat, displayRects, minLevel, maxLevel ) {
	    var i,
	        rect,
	        level,
	        options;

	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[ 0 ],
	            height: arguments[ 1 ],
	            tileSize: arguments[ 2 ],
	            tileOverlap: arguments[ 3 ],
	            tilesUrl: arguments[ 4 ],
	            fileFormat: arguments[ 5 ],
	            displayRects: arguments[ 6 ],
	            minLevel: arguments[ 7 ],
	            maxLevel: arguments[ 8 ]
	        };
	    }

	    this._levelRects  = {};
	    this.tilesUrl     = options.tilesUrl;
	    this.fileFormat   = options.fileFormat;
	    this.displayRects = options.displayRects;

	    if ( this.displayRects ) {
	        for ( i = this.displayRects.length - 1; i >= 0; i-- ) {
	            rect = this.displayRects[ i ];
	            for ( level = rect.minLevel; level <= rect.maxLevel; level++ ) {
	                if ( !this._levelRects[ level ] ) {
	                    this._levelRects[ level ] = [];
	                }
	                this._levelRects[ level ].push( rect );
	            }
	        }
	    }

	    $.TileSource.apply( this, [ options ] );

	};

	$.extend( $.DziTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.DziTileSource.prototype */{


	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        var ns;
	        if ( data.Image ) {
	            ns = data.Image.xmlns;
	        } else if ( data.documentElement) {
	            if ("Image" == data.documentElement.localName || "Image" == data.documentElement.tagName) {
	                ns = data.documentElement.namespaceURI;
	            }
	        }

	        return ( "http://schemas.microsoft.com/deepzoom/2008" == ns ||
	            "http://schemas.microsoft.com/deepzoom/2009" == ns );
	    },

	    /**
	     *
	     * @function
	     * @param {Object|XMLDocument} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){

	        var options;

	        if( !$.isPlainObject(data) ){

	            options = configureFromXML( this, data );

	        }else{

	            options = configureFromObject( this, data );
	        }

	        if (url && !options.tilesUrl) {
	            options.tilesUrl = url.replace(/([^\/]+)\.(dzi|xml|js)(\?.*|$)/, '$1_files/');

	            if (url.search(/\.(dzi|xml|js)\?/) != -1) {
	                options.queryParams = url.match(/\?.*/);
	            }else{
	                options.queryParams = '';
	            }
	        }

	        return options;
	    },


	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        return [ this.tilesUrl, level, '/', x, '_', y, '.', this.fileFormat, this.queryParams ].join( '' );
	    },


	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    tileExists: function( level, x, y ) {
	        var rects = this._levelRects[ level ],
	            rect,
	            scale,
	            xMin,
	            yMin,
	            xMax,
	            yMax,
	            i;

	        if ( !rects || !rects.length ) {
	            return true;
	        }

	        for ( i = rects.length - 1; i >= 0; i-- ) {
	            rect = rects[ i ];

	            if ( level < rect.minLevel || level > rect.maxLevel ) {
	                continue;
	            }

	            scale = this.getLevelScale( level );
	            xMin = rect.x * scale;
	            yMin = rect.y * scale;
	            xMax = xMin + rect.width * scale;
	            yMax = yMin + rect.height * scale;

	            xMin = Math.floor( xMin / this.tileSize );
	            yMin = Math.floor( yMin / this.tileSize );
	            xMax = Math.ceil( xMax / this.tileSize );
	            yMax = Math.ceil( yMax / this.tileSize );

	            if ( xMin <= x && x < xMax && yMin <= y && y < yMax ) {
	                return true;
	            }
	        }

	        return false;
	    }
	});


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromXML( tileSource, xmlDoc ){

	    if ( !xmlDoc || !xmlDoc.documentElement ) {
	        throw new Error( $.getString( "Errors.Xml" ) );
	    }

	    var root           = xmlDoc.documentElement,
	        rootName       = root.localName || root.tagName,
	        ns             = xmlDoc.documentElement.namespaceURI,
	        configuration  = null,
	        displayRects   = [],
	        dispRectNodes,
	        dispRectNode,
	        rectNode,
	        sizeNode,
	        i;

	    if ( rootName == "Image" ) {

	        try {
	            sizeNode = root.getElementsByTagName("Size" )[ 0 ];
	            if (sizeNode === undefined) {
	                sizeNode = root.getElementsByTagNameNS(ns, "Size" )[ 0 ];
	            }

	            configuration = {
	                Image: {
	                    xmlns:       "http://schemas.microsoft.com/deepzoom/2008",
	                    Url:         root.getAttribute( "Url" ),
	                    Format:      root.getAttribute( "Format" ),
	                    DisplayRect: null,
	                    Overlap:     parseInt( root.getAttribute( "Overlap" ), 10 ),
	                    TileSize:    parseInt( root.getAttribute( "TileSize" ), 10 ),
	                    Size: {
	                        Height: parseInt( sizeNode.getAttribute( "Height" ), 10 ),
	                        Width:  parseInt( sizeNode.getAttribute( "Width" ), 10 )
	                    }
	                }
	            };

	            if ( !$.imageFormatSupported( configuration.Image.Format ) ) {
	                throw new Error(
	                    $.getString( "Errors.ImageFormat", configuration.Image.Format.toUpperCase() )
	                );
	            }

	            dispRectNodes = root.getElementsByTagName("DisplayRect" );
	            if (dispRectNodes === undefined) {
	                dispRectNodes = root.getElementsByTagNameNS(ns, "DisplayRect" )[ 0 ];
	            }

	            for ( i = 0; i < dispRectNodes.length; i++ ) {
	                dispRectNode = dispRectNodes[ i ];
	                rectNode     = dispRectNode.getElementsByTagName("Rect" )[ 0 ];
	                if (rectNode === undefined) {
	                    rectNode = dispRectNode.getElementsByTagNameNS(ns, "Rect" )[ 0 ];
	                }

	                displayRects.push({
	                    Rect: {
	                        X: parseInt( rectNode.getAttribute( "X" ), 10 ),
	                        Y: parseInt( rectNode.getAttribute( "Y" ), 10 ),
	                        Width: parseInt( rectNode.getAttribute( "Width" ), 10 ),
	                        Height: parseInt( rectNode.getAttribute( "Height" ), 10 ),
	                        MinLevel: parseInt( dispRectNode.getAttribute( "MinLevel" ), 10 ),
	                        MaxLevel: parseInt( dispRectNode.getAttribute( "MaxLevel" ), 10 )
	                    }
	                });
	            }

	            if( displayRects.length ){
	                configuration.Image.DisplayRect = displayRects;
	            }

	            return configureFromObject( tileSource, configuration );

	        } catch ( e ) {
	            throw (e instanceof Error) ?
	                e :
	                new Error( $.getString("Errors.Dzi") );
	        }
	    } else if ( rootName == "Collection" ) {
	        throw new Error( $.getString( "Errors.Dzc" ) );
	    } else if ( rootName == "Error" ) {
	        return $._processDZIError( root );
	    }

	    throw new Error( $.getString( "Errors.Dzi" ) );
	}

	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromObject( tileSource, configuration ){
	    var imageData     = configuration.Image,
	        tilesUrl      = imageData.Url,
	        fileFormat    = imageData.Format,
	        sizeData      = imageData.Size,
	        dispRectData  = imageData.DisplayRect || [],
	        width         = parseInt( sizeData.Width, 10 ),
	        height        = parseInt( sizeData.Height, 10 ),
	        tileSize      = parseInt( imageData.TileSize, 10 ),
	        tileOverlap   = parseInt( imageData.Overlap, 10 ),
	        displayRects  = [],
	        rectData,
	        i;

	    //TODO: need to figure out out to better handle image format compatibility
	    //      which actually includes additional file formats like xml and pdf
	    //      and plain text for various tilesource implementations to avoid low
	    //      level errors.
	    //
	    //      For now, just don't perform the check.
	    //
	    /*if ( !imageFormatSupported( fileFormat ) ) {
	        throw new Error(
	            $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )
	        );
	    }*/

	    for ( i = 0; i < dispRectData.length; i++ ) {
	        rectData = dispRectData[ i ].Rect;

	        displayRects.push( new $.DisplayRect(
	            parseInt( rectData.X, 10 ),
	            parseInt( rectData.Y, 10 ),
	            parseInt( rectData.Width, 10 ),
	            parseInt( rectData.Height, 10 ),
	            parseInt( rectData.MinLevel, 10 ),
	            parseInt( rectData.MaxLevel, 10 )
	        ));
	    }

	    return $.extend(true, {
	        width: width, /* width *required */
	        height: height, /* height *required */
	        tileSize: tileSize, /* tileSize *required */
	        tileOverlap: tileOverlap, /* tileOverlap *required */
	        minLevel: null, /* minLevel */
	        maxLevel: null, /* maxLevel */
	        tilesUrl: tilesUrl, /* tilesUrl */
	        fileFormat: fileFormat, /* fileFormat */
	        displayRects: displayRects /* displayRects */
	    }, configuration );

	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - IIIFTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class IIIFTileSource
	 * @classdesc A client implementation of the International Image Interoperability
	 * Format: Image API 1.0 - 2.0
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @see http://iiif.io/api/image/
	 */
	$.IIIFTileSource = function( options ){


	    $.extend( true, this, options );

	    if ( !( this.height && this.width && this['@id'] ) ) {
	        throw new Error( 'IIIF required parameters not provided.' );
	    }

	    options.tileSizePerScaleFactor = {};

	    // N.B. 2.0 renamed scale_factors to scaleFactors
	    if ( this.tile_width && this.tile_height ) {
	        options.tileWidth = this.tile_width;
	        options.tileHeight = this.tile_height;
	    } else if ( this.tile_width ) {
	        options.tileSize = this.tile_width;
	    } else if ( this.tile_height ) {
	        options.tileSize = this.tile_height;
	    } else if ( this.tiles ) {
	        // Version 2.0 forwards
	        if ( this.tiles.length == 1 ) {
	            options.tileWidth  = this.tiles[0].width;
	            // Use height if provided, otherwise assume square tiles and use width.
	            options.tileHeight = this.tiles[0].height || this.tiles[0].width;
	            this.scale_factors = this.tiles[0].scaleFactors;
	        } else {
	            // Multiple tile sizes at different levels
	            this.scale_factors = [];
	            for (var t = 0; t < this.tiles.length; t++ ) {
	                for (var sf = 0; sf < this.tiles[t].scaleFactors.length; sf++) {
	                    var scaleFactor = this.tiles[t].scaleFactors[sf];
	                    this.scale_factors.push(scaleFactor);
	                    options.tileSizePerScaleFactor[scaleFactor] = {
	                        width: this.tiles[t].width,
	                        height: this.tiles[t].height || this.tiles[t].width
	                    };
	                }
	            }
	        }
	    } else {
	        // use the largest of tileOptions that is smaller than the short dimension
	        var shortDim = Math.min( this.height, this.width ),
	            tileOptions = [256,512,1024],
	            smallerTiles = [];

	        for ( var c = 0; c < tileOptions.length; c++ ) {
	            if ( tileOptions[c] <= shortDim ) {
	                smallerTiles.push( tileOptions[c] );
	            }
	        }

	        if ( smallerTiles.length > 0 ) {
	            options.tileSize = Math.max.apply( null, smallerTiles );
	        } else {
	            // If we're smaller than 256, just use the short side.
	            options.tileSize = shortDim;
	        }
	    }

	    if ( !options.maxLevel ) {
	        if ( !this.scale_factors ) {
	            options.maxLevel = Number( Math.ceil( Math.log( Math.max( this.width, this.height ), 2 ) ) );
	        } else {
	            options.maxLevel = Math.floor( Math.pow( Math.max.apply(null, this.scale_factors), 0.5) );
	        }
	    }

	    $.TileSource.apply( this, [ options ] );
	};

	$.extend( $.IIIFTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.IIIFTileSource.prototype */{
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	     
	    supports: function( data, url ) {
	        // Version 2.0 and forwards
	        if (data.protocol && data.protocol == 'http://iiif.io/api/image') {
	            return true;
	        // Version 1.1
	        } else if ( data['@context'] && (
	            data['@context'] == "http://library.stanford.edu/iiif/image-api/1.1/context.json" ||
	            data['@context'] == "http://iiif.io/api/image/1/context.json") ) {
	            // N.B. the iiif.io context is wrong, but where the representation lives so likely to be used
	            return true;

	        // Version 1.0
	        } else if ( data.profile &&
	            data.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html") === 0) {
	            return true;
	        } else if ( data.identifier && data.width && data.height ) {
	            return true;
	        } else if ( data.documentElement &&
	            "info" == data.documentElement.tagName &&
	            "http://library.stanford.edu/iiif/image-api/ns/" ==
	                data.documentElement.namespaceURI) {
	            return true;

	        // Not IIIF
	        } else {
	            return false;
	        }
	    },

	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @example <caption>IIIF 1.1 Info Looks like this</caption>
	     * {
	     *   "@context" : "http://library.stanford.edu/iiif/image-api/1.1/context.json",
	     *   "@id" : "http://iiif.example.com/prefix/1E34750D-38DB-4825-A38A-B60A345E591C",
	     *   "width" : 6000,
	     *   "height" : 4000,
	     *   "scale_factors" : [ 1, 2, 4 ],
	     *   "tile_width" : 1024,
	     *   "tile_height" : 1024,
	     *   "formats" : [ "jpg", "png" ],
	     *   "qualities" : [ "native", "grey" ],
	     *   "profile" : "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0"
	     * }
	     */
	    configure: function( data, url ){
	        // Try to deduce our version and fake it upwards if needed
	        if ( !$.isPlainObject(data) ) {
	            var options = configureFromXml10( data );
	            options['@context'] = "http://iiif.io/api/image/1.0/context.json";
	            options['@id'] = url.replace('/info.xml', '');
	            return options;
	        } else if ( !data['@context'] ) {
	            data['@context'] = 'http://iiif.io/api/image/1.0/context.json';
	            data['@id'] = url.replace('/info.json', '');
	            return data;
	        } else {
	            return data;
	        }
	    },

	    /**
	     * Return the tileWidth for the given level.
	     * @function
	     * @param {Number} level
	     */
	    getTileWidth: function( level ) {
	        var scaleFactor = Math.pow(2, this.maxLevel - level);

	        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
	            return this.tileSizePerScaleFactor[scaleFactor].width;
	        }
	        return this._tileWidth;
	    },

	    /**
	     * Return the tileHeight for the given level.
	     * @function
	     * @param {Number} level
	     */
	    getTileHeight: function( level ) {
	        var scaleFactor = Math.pow(2, this.maxLevel - level);

	        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
	            return this.tileSizePerScaleFactor[scaleFactor].height;
	        }
	        return this._tileHeight;
	    },


	    /**
	     * Responsible for retreiving the url which will return an image for the
	     * region specified by the given x, y, and level components.
	     * @function
	     * @param {Number} level - z index
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function( level, x, y ){

	        //# constants
	        var IIIF_ROTATION = '0',
	            //## get the scale (level as a decimal)
	            scale = Math.pow( 0.5, this.maxLevel - level ),

	            //# image dimensions at this level
	            levelWidth = Math.ceil( this.width * scale ),
	            levelHeight = Math.ceil( this.height * scale ),

	            //## iiif region
	            tileWidth,
	            tileHeight,
	            iiifTileSizeWidth,
	            iiifTileSizeHeight,
	            iiifRegion,
	            iiifTileX,
	            iiifTileY,
	            iiifTileW,
	            iiifTileH,
	            iiifSize,
	            iiifQuality,
	            uri;

	        tileWidth = this.getTileWidth(level);
	        tileHeight = this.getTileHeight(level);
	        iiifTileSizeWidth = Math.ceil( tileWidth / scale );
	        iiifTileSizeHeight = Math.ceil( tileHeight / scale );

	        if ( this['@context'].indexOf('/1.0/context.json') > -1 ||
	             this['@context'].indexOf('/1.1/context.json') > -1 ||
	             this['@context'].indexOf('/1/context.json') > -1 ) {
	            iiifQuality = "native.jpg";
	        } else {
	            iiifQuality = "default.jpg";
	        }

	        if ( levelWidth < tileWidth && levelHeight < tileHeight ){
	            iiifSize = levelWidth + ",";
	            iiifRegion = 'full';
	        } else {
	            iiifTileX = x * iiifTileSizeWidth;
	            iiifTileY = y * iiifTileSizeHeight;
	            iiifTileW = Math.min( iiifTileSizeWidth, this.width - iiifTileX );
	            iiifTileH = Math.min( iiifTileSizeHeight, this.height - iiifTileY );
	            iiifSize = Math.ceil( iiifTileW * scale ) + ",";
	            iiifRegion = [ iiifTileX, iiifTileY, iiifTileW, iiifTileH ].join( ',' );
	        }
	        uri = [ this['@id'], iiifRegion, iiifSize, IIIF_ROTATION, iiifQuality ].join( '/' );

	        return uri;
	    }

	  });


	    function configureFromXml10(xmlDoc) {
	        //parse the xml
	        if ( !xmlDoc || !xmlDoc.documentElement ) {
	            throw new Error( $.getString( "Errors.Xml" ) );
	        }

	        var root            = xmlDoc.documentElement,
	            rootName        = root.tagName,
	            configuration   = null;

	        if ( rootName == "info" ) {
	            try {
	                configuration = {};
	                parseXML10( root, configuration );
	                return configuration;

	            } catch ( e ) {
	                throw (e instanceof Error) ?
	                    e :
	                    new Error( $.getString("Errors.IIIF") );
	            }
	        }
	        throw new Error( $.getString( "Errors.IIIF" ) );
	    }

	    function parseXML10( node, configuration, property ) {
	        var i,
	            value;
	        if ( node.nodeType == 3 && property ) {//text node
	            value = node.nodeValue.trim();
	            if( value.match(/^\d*$/)){
	                value = Number( value );
	            }
	            if( !configuration[ property ] ){
	                configuration[ property ] = value;
	            }else{
	                if( !$.isArray( configuration[ property ] ) ){
	                    configuration[ property ] = [ configuration[ property ] ];
	                }
	                configuration[ property ].push( value );
	            }
	        } else if( node.nodeType == 1 ){
	            for( i = 0; i < node.childNodes.length; i++ ){
	                parseXML10( node.childNodes[ i ], configuration, node.nodeName );
	            }
	        }
	    }


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - OsmTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/*
	 * Derived from the OSM tile source in Rainer Simon's seajax-utils project
	 * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
	 * the included code to the OpenSeadragon project under the New BSD license;
	 * see <https://github.com/openseadragon/openseadragon/issues/58>.
	 */


	(function( $ ){

	/**
	 * @class OsmTileSource
	 * @classdesc A tilesource implementation for OpenStreetMap.<br><br>
	 *
	 * Note 1. Zoomlevels. Deep Zoom and OSM define zoom levels differently. In  Deep
	 * Zoom, level 0 equals an image of 1x1 pixels. In OSM, level 0 equals an image of
	 * 256x256 levels (see http://gasi.ch/blog/inside-deep-zoom-2). I.e. there is a
	 * difference of log2(256)=8 levels.<br><br>
	 *
	 * Note 2. Image dimension. According to the OSM Wiki
	 * (http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels)
	 * the highest Mapnik zoom level has 256.144x256.144 tiles, with a 256x256
	 * pixel size. I.e. the Deep Zoom image dimension is 65.572.864x65.572.864
	 * pixels.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 */
	$.OsmTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {
	    var options;

	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[0],
	            height: arguments[1],
	            tileSize: arguments[2],
	            tileOverlap: arguments[3],
	            tilesUrl: arguments[4]
	        };
	    }
	    //apply default setting for standard public OpenStreatMaps service
	    //but allow them to be specified so fliks can host there own instance
	    //or apply against other services supportting the same standard
	    if( !options.width || !options.height ){
	        options.width = 65572864;
	        options.height = 65572864;
	    }
	    if( !options.tileSize ){
	        options.tileSize = 256;
	        options.tileOverlap = 0;
	    }
	    if( !options.tilesUrl ){
	        options.tilesUrl = "http://tile.openstreetmap.org/";
	    }
	    options.minLevel = 8;

	    $.TileSource.apply( this, [ options ] );

	};

	$.extend( $.OsmTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.OsmTileSource.prototype */{


	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return (
	            data.type &&
	            "openstreetmaps" == data.type
	        );
	    },

	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){
	        return data;
	    },


	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        return this.tilesUrl + (level - 8) + "/" + x + "/" + y + ".png";
	    }
	});


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - TmsTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	/*
	 * Derived from the TMS tile source in Rainer Simon's seajax-utils project
	 * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
	 * the included code to the OpenSeadragon project under the New BSD license;
	 * see <https://github.com/openseadragon/openseadragon/issues/58>.
	 */


	(function( $ ){

	/**
	 * @class TmsTileSource
	 * @classdesc A tilesource implementation for Tiled Map Services (TMS).
	 * TMS tile scheme ( [ as supported by OpenLayers ] is described here
	 * ( http://openlayers.org/dev/examples/tms.html ).
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 */
	$.TmsTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {
	    var options;

	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[0],
	            height: arguments[1],
	            tileSize: arguments[2],
	            tileOverlap: arguments[3],
	            tilesUrl: arguments[4]
	        };
	    }
	    // TMS has integer multiples of 256 for width/height and adds buffer
	    // if necessary -> account for this!
	    var bufferedWidth = Math.ceil(options.width / 256) * 256,
	        bufferedHeight = Math.ceil(options.height / 256) * 256,
	        max;

	    // Compute number of zoomlevels in this tileset
	    if (bufferedWidth > bufferedHeight) {
	        max = bufferedWidth / 256;
	    } else {
	        max = bufferedHeight / 256;
	    }
	    options.maxLevel = Math.ceil(Math.log(max)/Math.log(2)) - 1;
	    options.tileSize = 256;
	    options.width = bufferedWidth;
	    options.height = bufferedHeight;

	    $.TileSource.apply( this, [ options ] );

	};

	$.extend( $.TmsTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.TmsTileSource.prototype */{


	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return ( data.type && "tiledmapservice" == data.type );
	    },

	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){
	        return data;
	    },


	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        // Convert from Deep Zoom definition to TMS zoom definition
	        var yTiles = this.getNumTiles( level ).y - 1;

	        return this.tilesUrl + level + "/" + x + "/" +  (yTiles - y) + ".png";
	    }
	});


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - LegacyTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class LegacyTileSource
	 * @classdesc The LegacyTileSource allows simple, traditional image pyramids to be loaded
	 * into an OpenSeadragon Viewer.  Basically, this translates to the historically
	 * common practice of starting with a 'master' image, maybe a tiff for example,
	 * and generating a set of 'service' images like one or more thumbnails, a medium
	 * resolution image and a high resolution image in standard web formats like
	 * png or jpg.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Array} levels An array of file descriptions, each is an object with
	 *      a 'url', a 'width', and a 'height'.  Overriding classes can expect more
	 *      properties but these properties are sufficient for this implementation.
	 *      Additionally, the levels are required to be listed in order from
	 *      smallest to largest.
	 * @property {Number} aspectRatio
	 * @property {Number} dimensions
	 * @property {Number} tileSize
	 * @property {Number} tileOverlap
	 * @property {Number} minLevel
	 * @property {Number} maxLevel
	 * @property {Array}  levels
	 */
	$.LegacyTileSource = function( levels ) {

	    var options,
	        width,
	        height;

	    if( $.isArray( levels ) ){
	        options = {
	            type: 'legacy-image-pyramid',
	            levels: levels
	        };
	    }

	    //clean up the levels to make sure we support all formats
	    options.levels = filterFiles( options.levels );

	    if ( options.levels.length > 0 ) {
	        width = options.levels[ options.levels.length - 1 ].width;
	        height = options.levels[ options.levels.length - 1 ].height;
	    }
	    else {
	        width = 0;
	        height = 0;
	        $.console.error( "No supported image formats found" );
	    }

	    $.extend( true, options, {
	        width: width,
	        height: height,
	        tileSize: Math.max( height, width ),
	        tileOverlap: 0,
	        minLevel: 0,
	        maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0
	    } );

	    $.TileSource.apply( this, [ options ] );

	    this.levels = options.levels;
	};

	$.extend( $.LegacyTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.LegacyTileSource.prototype */{
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return (
	            data.type &&
	            "legacy-image-pyramid" == data.type
	        ) || (
	            data.documentElement &&
	            "legacy-image-pyramid" == data.documentElement.getAttribute('type')
	        );
	    },


	    /**
	     *
	     * @function
	     * @param {Object|XMLDocument} configuration - the raw configuration
	     * @param {String} dataUrl - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( configuration, dataUrl ){

	        var options;

	        if( !$.isPlainObject(configuration) ){

	            options = configureFromXML( this, configuration );

	        }else{

	            options = configureFromObject( this, configuration );
	        }

	        return options;

	    },

	    /**
	     * @function
	     * @param {Number} level
	     */
	    getLevelScale: function ( level ) {
	        var levelScale = NaN;
	        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {
	            levelScale =
	                this.levels[ level ].width /
	                this.levels[ this.maxLevel ].width;
	        }
	        return levelScale;
	    },

	    /**
	     * @function
	     * @param {Number} level
	     */
	    getNumTiles: function( level ) {
	        var scale = this.getLevelScale( level );
	        if ( scale ){
	            return new $.Point( 1, 1 );
	        } else {
	            return new $.Point( 0, 0 );
	        }
	    },

	    /**
	     * @function
	     * @param {Number} level
	     * @param {OpenSeadragon.Point} point
	     */
	    getTileAtPoint: function( level, point ) {
	        return new $.Point( 0, 0 );
	    },


	    /**
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function ( level, x, y ) {
	        var url = null;
	        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {
	            url = this.levels[ level ].url;
	        }
	        return url;
	    }
	} );

	/**
	 * This method removes any files from the Array which dont conform to our
	 * basic requirements for a 'level' in the LegacyTileSource.
	 * @private
	 * @inner
	 * @function
	 */
	function filterFiles( files ){
	    var filtered = [],
	        file,
	        i;
	    for( i = 0; i < files.length; i++ ){
	        file = files[ i ];
	        if( file.height &&
	            file.width &&
	            file.url && (
	                file.url.toLowerCase().match(/^.*\.(png|jpg|jpeg|gif)$/) || (
	                    file.mimetype &&
	                    file.mimetype.toLowerCase().match(/^.*\/(png|jpg|jpeg|gif)$/)
	                )
	            ) ){
	            //This is sufficient to serve as a level
	            filtered.push({
	                url: file.url,
	                width: Number( file.width ),
	                height: Number( file.height )
	            });
	        }
	        else {
	            $.console.error( 'Unsupported image format: %s', file.url ? file.url : '<no URL>' );
	        }
	    }

	    return filtered.sort(function(a,b){
	        return a.height - b.height;
	    });

	}

	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromXML( tileSource, xmlDoc ){

	    if ( !xmlDoc || !xmlDoc.documentElement ) {
	        throw new Error( $.getString( "Errors.Xml" ) );
	    }

	    var root         = xmlDoc.documentElement,
	        rootName     = root.tagName,
	        conf         = null,
	        levels       = [],
	        level,
	        i;

	    if ( rootName == "image" ) {

	        try {
	            conf = {
	                type:        root.getAttribute( "type" ),
	                levels:      []
	            };

	            levels = root.getElementsByTagName( "level" );
	            for ( i = 0; i < levels.length; i++ ) {
	                level = levels[ i ];

	                conf.levels .push({
	                    url:    level.getAttribute( "url" ),
	                    width:  parseInt( level.getAttribute( "width" ), 10 ),
	                    height: parseInt( level.getAttribute( "height" ), 10 )
	                });
	            }

	            return configureFromObject( tileSource, conf );

	        } catch ( e ) {
	            throw (e instanceof Error) ?
	                e :
	                new Error( 'Unknown error parsing Legacy Image Pyramid XML.' );
	        }
	    } else if ( rootName == "collection" ) {
	        throw new Error( 'Legacy Image Pyramid Collections not yet supported.' );
	    } else if ( rootName == "error" ) {
	        throw new Error( 'Error: ' + xmlDoc );
	    }

	    throw new Error( 'Unknown element ' + rootName );
	}

	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromObject( tileSource, configuration ){

	    return configuration.levels;

	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - ImageTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function ($) {

	    /**
	     * @class ImageTileSource
	     * @classdesc The ImageTileSource allows a simple image to be loaded
	     * into an OpenSeadragon Viewer.
	     * There are 2 ways to open an ImageTileSource:
	     * 1. viewer.open({type: 'image', url: fooUrl});
	     * 2. viewer.open(new OpenSeadragon.ImageTileSource({url: fooUrl}));
	     *
	     * With the first syntax, the crossOriginPolicy, ajaxWithCredentials and
	     * useCanvas options are inherited from the viewer if they are not
	     * specified directly in the options object.
	     *
	     * @memberof OpenSeadragon
	     * @extends OpenSeadragon.TileSource
	     * @param {Object} options Options object.
	     * @param {String} options.url URL of the image
	     * @param {Boolean} [options.buildPyramid=true] If set to true (default), a
	     * pyramid will be built internally to provide a better downsampling.
	     * @param {String|Boolean} [options.crossOriginPolicy=false] Valid values are
	     * 'Anonymous', 'use-credentials', and false. If false, image requests will
	     * not use CORS preventing internal pyramid building for images from other
	     * domains.
	     * @param {String|Boolean} [options.ajaxWithCredentials=false] Whether to set
	     * the withCredentials XHR flag for AJAX requests (when loading tile sources).
	     * @param {Boolean} [options.useCanvas=true] Set to false to prevent any use
	     * of the canvas API.
	     */
	    $.ImageTileSource = function (options) {

	        options = $.extend({
	            buildPyramid: true,
	            crossOriginPolicy: false,
	            ajaxWithCredentials: false,
	            useCanvas: true
	        }, options);
	        $.TileSource.apply(this, [options]);

	    };

	    $.extend($.ImageTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.ImageTileSource.prototype */{
	        /**
	         * Determine if the data and/or url imply the image service is supported by
	         * this tile source.
	         * @function
	         * @param {Object|Array} data
	         * @param {String} optional - url
	         */
	        supports: function (data, url) {
	            return data.type && data.type === "image";
	        },
	        /**
	         *
	         * @function
	         * @param {Object} options - the options
	         * @param {String} dataUrl - the url the image was retreived from, if any.
	         * @return {Object} options - A dictionary of keyword arguments sufficient
	         *      to configure this tile sources constructor.
	         */
	        configure: function (options, dataUrl) {
	            return options;
	        },
	        /**
	         * Responsible for retrieving, and caching the
	         * image metadata pertinent to this TileSources implementation.
	         * @function
	         * @param {String} url
	         * @throws {Error}
	         */
	        getImageInfo: function (url) {
	            var image = this._image = new Image();
	            var _this = this;

	            if (this.crossOriginPolicy) {
	                image.crossOrigin = this.crossOriginPolicy;
	            }
	            if (this.ajaxWithCredentials) {
	                image.useCredentials = this.ajaxWithCredentials;
	            }

	            $.addEvent(image, 'load', function () {
	                _this.width = image.naturalWidth;
	                _this.height = image.naturalHeight;
	                _this.aspectRatio = _this.width / _this.height;
	                _this.dimensions = new $.Point(_this.width, _this.height);
	                _this._tileWidth = _this.width;
	                _this._tileHeight = _this.height;
	                _this.tileOverlap = 0;
	                _this.minLevel = 0;
	                _this.levels = _this._buildLevels();
	                _this.maxLevel = _this.levels.length - 1;

	                _this.ready = true;
	                /**
	                 * Raised when a TileSource is opened and initialized.
	                 *
	                 * @event ready
	                 * @memberof OpenSeadragon.TileSource
	                 * @type {object}
	                 * @property {OpenSeadragon.TileSource} eventSource - A reference
	                 * to the TileSource which raised the event.
	                 * @property {Object} tileSource
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent('ready', {tileSource: _this});
	            });

	            $.addEvent(image, 'error', function () {
	                /***
	                 * Raised when an error occurs loading a TileSource.
	                 *
	                 * @event open-failed
	                 * @memberof OpenSeadragon.TileSource
	                 * @type {object}
	                 * @property {OpenSeadragon.TileSource} eventSource - A reference
	                 * to the TileSource which raised the event.
	                 * @property {String} message
	                 * @property {String} source
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent('open-failed', {
	                    message: "Error loading image at " + url,
	                    source: url
	                });
	            });

	            image.src = url;
	        },
	        /**
	         * @function
	         * @param {Number} level
	         */
	        getLevelScale: function (level) {
	            var levelScale = NaN;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                levelScale =
	                        this.levels[level].width /
	                        this.levels[this.maxLevel].width;
	            }
	            return levelScale;
	        },
	        /**
	         * @function
	         * @param {Number} level
	         */
	        getNumTiles: function (level) {
	            var scale = this.getLevelScale(level);
	            if (scale) {
	                return new $.Point(1, 1);
	            } else {
	                return new $.Point(0, 0);
	            }
	        },
	        /**
	         * @function
	         * @param {Number} level
	         * @param {OpenSeadragon.Point} point
	         */
	        getTileAtPoint: function (level, point) {
	            return new $.Point(0, 0);
	        },
	        /**
	         * Retrieves a tile url
	         * @function
	         * @param {Number} level Level of the tile
	         * @param {Number} x x coordinate of the tile
	         * @param {Number} y y coordinate of the tile
	         */
	        getTileUrl: function (level, x, y) {
	            var url = null;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                url = this.levels[level].url;
	            }
	            return url;
	        },
	        /**
	         * Retrieves a tile context 2D
	         * @function
	         * @param {Number} level Level of the tile
	         * @param {Number} x x coordinate of the tile
	         * @param {Number} y y coordinate of the tile
	         */
	        getContext2D: function (level, x, y) {
	            var context = null;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                context = this.levels[level].context2D;
	            }
	            return context;
	        },

	        // private
	        //
	        // Builds the differents levels of the pyramid if possible
	        // (i.e. if canvas API enabled and no canvas tainting issue).
	        _buildLevels: function () {
	            var levels = [{
	                    url: this._image.src,
	                    width: this._image.naturalWidth,
	                    height: this._image.naturalHeight
	                }];

	            if (!this.buildPyramid || !$.supportsCanvas || !this.useCanvas) {
	                // We don't need the image anymore. Allows it to be GC.
	                delete this._image;
	                return levels;
	            }

	            var currentWidth = this._image.naturalWidth;
	            var currentHeight = this._image.naturalHeight;

	            var bigCanvas = document.createElement("canvas");
	            var bigContext = bigCanvas.getContext("2d");

	            bigCanvas.width = currentWidth;
	            bigCanvas.height = currentHeight;
	            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight);
	            // We cache the context of the highest level because the browser
	            // is a lot faster at downsampling something it already has
	            // downsampled before.
	            levels[0].context2D = bigContext;
	            // We don't need the image anymore. Allows it to be GC.
	            delete this._image;

	            if ($.isCanvasTainted(bigCanvas)) {
	                // If the canvas is tainted, we can't compute the pyramid.
	                return levels;
	            }

	            // We build smaller levels until either width or height becomes
	            // 1 pixel wide.
	            while (currentWidth >= 2 && currentHeight >= 2) {
	                currentWidth = Math.floor(currentWidth / 2);
	                currentHeight = Math.floor(currentHeight / 2);
	                var smallCanvas = document.createElement("canvas");
	                var smallContext = smallCanvas.getContext("2d");
	                smallCanvas.width = currentWidth;
	                smallCanvas.height = currentHeight;
	                smallContext.drawImage(bigCanvas, 0, 0, currentWidth, currentHeight);

	                levels.splice(0, 0, {
	                    context2D: smallContext,
	                    width: currentWidth,
	                    height: currentHeight
	                });

	                bigCanvas = smallCanvas;
	                bigContext = smallContext;
	            }
	            return levels;
	        }
	    });

	}(OpenSeadragon));

	/*
	 * OpenSeadragon - TileSourceCollection
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	// deprecated
	$.TileSourceCollection = function( tileSize, tileSources, rows, layout  ) {
	    $.console.error('TileSourceCollection is deprecated; use World instead');
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Button
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * An enumeration of button states
	 * @member ButtonState
	 * @memberof OpenSeadragon
	 * @static
	 * @type {Object}
	 * @property {Number} REST
	 * @property {Number} GROUP
	 * @property {Number} HOVER
	 * @property {Number} DOWN
	 */
	$.ButtonState = {
	    REST:   0,
	    GROUP:  1,
	    HOVER:  2,
	    DOWN:   3
	};

	/**
	 * @class Button
	 * @classdesc Manages events, hover states for individual buttons, tool-tips, as well
	 * as fading the buttons out when the user has not interacted with them
	 * for a specified period.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 * @param {Element} [options.element=null] Element to use as the button. If not specified, an HTML &lt;button&gt; element is created.
	 * @param {String} [options.tooltip=null] Provides context help for the button when the
	 *  user hovers over it.
	 * @param {String} [options.srcRest=null] URL of image to use in 'rest' state.
	 * @param {String} [options.srcGroup=null] URL of image to use in 'up' state.
	 * @param {String} [options.srcHover=null] URL of image to use in 'hover' state.
	 * @param {String} [options.srcDown=null] URL of image to use in 'down' state.
	 * @param {Number} [options.fadeDelay=0] How long to wait before fading.
	 * @param {Number} [options.fadeLength=2000] How long should it take to fade the button.
	 * @param {OpenSeadragon.EventHandler} [options.onPress=null] Event handler callback for {@link OpenSeadragon.Button.event:press}.
	 * @param {OpenSeadragon.EventHandler} [options.onRelease=null] Event handler callback for {@link OpenSeadragon.Button.event:release}.
	 * @param {OpenSeadragon.EventHandler} [options.onClick=null] Event handler callback for {@link OpenSeadragon.Button.event:click}.
	 * @param {OpenSeadragon.EventHandler} [options.onEnter=null] Event handler callback for {@link OpenSeadragon.Button.event:enter}.
	 * @param {OpenSeadragon.EventHandler} [options.onExit=null] Event handler callback for {@link OpenSeadragon.Button.event:exit}.
	 * @param {OpenSeadragon.EventHandler} [options.onFocus=null] Event handler callback for {@link OpenSeadragon.Button.event:focus}.
	 * @param {OpenSeadragon.EventHandler} [options.onBlur=null] Event handler callback for {@link OpenSeadragon.Button.event:blur}.
	 */
	$.Button = function( options ) {

	    var _this = this;

	    $.EventSource.call( this );

	    $.extend( true, this, {

	        tooltip:            null,
	        srcRest:            null,
	        srcGroup:           null,
	        srcHover:           null,
	        srcDown:            null,
	        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
	        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
	        /**
	         * How long to wait before fading.
	         * @member {Number} fadeDelay
	         * @memberof OpenSeadragon.Button#
	         */
	        fadeDelay:          0,
	        /**
	         * How long should it take to fade the button.
	         * @member {Number} fadeLength
	         * @memberof OpenSeadragon.Button#
	         */
	        fadeLength:         2000,
	        onPress:            null,
	        onRelease:          null,
	        onClick:            null,
	        onEnter:            null,
	        onExit:             null,
	        onFocus:            null,
	        onBlur:             null

	    }, options );

	    /**
	     * The button element.
	     * @member {Element} element
	     * @memberof OpenSeadragon.Button#
	     */
	    this.element        = options.element   || $.makeNeutralElement( "div" );

	    //if the user has specified the element to bind the control to explicitly
	    //then do not add the default control images
	    if ( !options.element ) {
	        this.imgRest      = $.makeTransparentImage( this.srcRest );
	        this.imgGroup     = $.makeTransparentImage( this.srcGroup );
	        this.imgHover     = $.makeTransparentImage( this.srcHover );
	        this.imgDown      = $.makeTransparentImage( this.srcDown );

	        this.imgRest.alt  =
	        this.imgGroup.alt =
	        this.imgHover.alt =
	        this.imgDown.alt  =
	            this.tooltip;

	        this.element.style.position = "relative";
	        $.setElementTouchActionNone( this.element );

	        this.imgGroup.style.position =
	        this.imgHover.style.position =
	        this.imgDown.style.position  =
	            "absolute";

	        this.imgGroup.style.top =
	        this.imgHover.style.top =
	        this.imgDown.style.top  =
	            "0px";

	        this.imgGroup.style.left =
	        this.imgHover.style.left =
	        this.imgDown.style.left  =
	            "0px";

	        this.imgHover.style.visibility =
	        this.imgDown.style.visibility  =
	            "hidden";

	        if ( $.Browser.vendor == $.BROWSERS.FIREFOX  && $.Browser.version < 3 ){
	            this.imgGroup.style.top =
	            this.imgHover.style.top =
	            this.imgDown.style.top  =
	                "";
	        }

	        this.element.appendChild( this.imgRest );
	        this.element.appendChild( this.imgGroup );
	        this.element.appendChild( this.imgHover );
	        this.element.appendChild( this.imgDown );
	    }


	    this.addHandler( "press",     this.onPress );
	    this.addHandler( "release",   this.onRelease );
	    this.addHandler( "click",     this.onClick );
	    this.addHandler( "enter",     this.onEnter );
	    this.addHandler( "exit",      this.onExit );
	    this.addHandler( "focus",     this.onFocus );
	    this.addHandler( "blur",      this.onBlur );

	    /**
	     * The button's current state.
	     * @member {OpenSeadragon.ButtonState} currentState
	     * @memberof OpenSeadragon.Button#
	     */
	    this.currentState = $.ButtonState.GROUP;

	    // When the button last began to fade.
	    this.fadeBeginTime  = null;
	    // Whether this button should fade after user stops interacting with the viewport.
	    this.shouldFade     = false;

	    this.element.style.display  = "inline-block";
	    this.element.style.position = "relative";
	    this.element.title          = this.tooltip;

	    /**
	     * Tracks mouse/touch/key events on the button.
	     * @member {OpenSeadragon.MouseTracker} tracker
	     * @memberof OpenSeadragon.Button#
	     */
	    this.tracker = new $.MouseTracker({

	        element:            this.element,
	        clickTimeThreshold: this.clickTimeThreshold,
	        clickDistThreshold: this.clickDistThreshold,

	        enterHandler: function( event ) {
	            if ( event.insideElementPressed ) {
	                inTo( _this, $.ButtonState.DOWN );
	                /**
	                 * Raised when the cursor enters the Button element.
	                 *
	                 * @event enter
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "enter", { originalEvent: event.originalEvent } );
	            } else if ( !event.buttonDownAny ) {
	                inTo( _this, $.ButtonState.HOVER );
	            }
	        },

	        focusHandler: function ( event ) {
	            this.enterHandler( event );
	            /**
	             * Raised when the Button element receives focus.
	             *
	             * @event focus
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "focus", { originalEvent: event.originalEvent } );
	        },

	        exitHandler: function( event ) {
	            outTo( _this, $.ButtonState.GROUP );
	            if ( event.insideElementPressed ) {
	                /**
	                 * Raised when the cursor leaves the Button element.
	                 *
	                 * @event exit
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "exit", { originalEvent: event.originalEvent } );
	            }
	        },

	        blurHandler: function ( event ) {
	            this.exitHandler( event );
	            /**
	             * Raised when the Button element loses focus.
	             *
	             * @event blur
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "blur", { originalEvent: event.originalEvent } );
	        },

	        pressHandler: function ( event ) {
	            inTo( _this, $.ButtonState.DOWN );
	            /**
	             * Raised when a mouse button is pressed or touch occurs in the Button element.
	             *
	             * @event press
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "press", { originalEvent: event.originalEvent } );
	        },

	        releaseHandler: function( event ) {
	            if ( event.insideElementPressed && event.insideElementReleased ) {
	                outTo( _this, $.ButtonState.HOVER );
	                /**
	                 * Raised when the mouse button is released or touch ends in the Button element.
	                 *
	                 * @event release
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );
	            } else if ( event.insideElementPressed ) {
	                outTo( _this, $.ButtonState.GROUP );
	            } else {
	                inTo( _this, $.ButtonState.HOVER );
	            }
	        },

	        clickHandler: function( event ) {
	            if ( event.quick ) {
	                /**
	                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
	                 *
	                 * @event click
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent("click", { originalEvent: event.originalEvent });
	            }
	        },

	        keyHandler: function( event ){
	            //console.log( "%s : handling key %s!", _this.tooltip, event.keyCode);
	            if( 13 === event.keyCode ){
	                /***
	                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
	                 *
	                 * @event click
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "click", { originalEvent: event.originalEvent } );
	                /***
	                 * Raised when the mouse button is released or touch ends in the Button element.
	                 *
	                 * @event release
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );
	                return false;
	            }
	            return true;
	        }

	    });

	    outTo( this, $.ButtonState.REST );
	};

	$.extend( $.Button.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.Button.prototype */{

	    /**
	     * TODO: Determine what this function is intended to do and if it's actually
	     * useful as an API point.
	     * @function
	     */
	    notifyGroupEnter: function() {
	        inTo( this, $.ButtonState.GROUP );
	    },

	    /**
	     * TODO: Determine what this function is intended to do and if it's actually
	     * useful as an API point.
	     * @function
	     */
	    notifyGroupExit: function() {
	        outTo( this, $.ButtonState.REST );
	    },

	    /**
	     * @function
	     */
	    disable: function(){
	        this.notifyGroupExit();
	        this.element.disabled = true;
	        $.setElementOpacity( this.element, 0.2, true );
	    },

	    /**
	     * @function
	     */
	    enable: function(){
	        this.element.disabled = false;
	        $.setElementOpacity( this.element, 1.0, true );
	        this.notifyGroupEnter();
	    }

	});


	function scheduleFade( button ) {
	    $.requestAnimationFrame(function(){
	        updateFade( button );
	    });
	}

	function updateFade( button ) {
	    var currentTime,
	        deltaTime,
	        opacity;

	    if ( button.shouldFade ) {
	        currentTime = $.now();
	        deltaTime   = currentTime - button.fadeBeginTime;
	        opacity     = 1.0 - deltaTime / button.fadeLength;
	        opacity     = Math.min( 1.0, opacity );
	        opacity     = Math.max( 0.0, opacity );

	        if( button.imgGroup ){
	            $.setElementOpacity( button.imgGroup, opacity, true );
	        }
	        if ( opacity > 0 ) {
	            // fade again
	            scheduleFade( button );
	        }
	    }
	}

	function beginFading( button ) {
	    button.shouldFade = true;
	    button.fadeBeginTime = $.now() + button.fadeDelay;
	    window.setTimeout( function(){
	        scheduleFade( button );
	    }, button.fadeDelay );
	}

	function stopFading( button ) {
	    button.shouldFade = false;
	    if( button.imgGroup ){
	        $.setElementOpacity( button.imgGroup, 1.0, true );
	    }
	}

	function inTo( button, newState ) {

	    if( button.element.disabled ){
	        return;
	    }

	    if ( newState >= $.ButtonState.GROUP &&
	         button.currentState == $.ButtonState.REST ) {
	        stopFading( button );
	        button.currentState = $.ButtonState.GROUP;
	    }

	    if ( newState >= $.ButtonState.HOVER &&
	         button.currentState == $.ButtonState.GROUP ) {
	        if( button.imgHover ){
	            button.imgHover.style.visibility = "";
	        }
	        button.currentState = $.ButtonState.HOVER;
	    }

	    if ( newState >= $.ButtonState.DOWN &&
	         button.currentState == $.ButtonState.HOVER ) {
	        if( button.imgDown ){
	            button.imgDown.style.visibility = "";
	        }
	        button.currentState = $.ButtonState.DOWN;
	    }
	}


	function outTo( button, newState ) {

	    if( button.element.disabled ){
	        return;
	    }

	    if ( newState <= $.ButtonState.HOVER &&
	         button.currentState == $.ButtonState.DOWN ) {
	        if( button.imgDown ){
	            button.imgDown.style.visibility = "hidden";
	        }
	        button.currentState = $.ButtonState.HOVER;
	    }

	    if ( newState <= $.ButtonState.GROUP &&
	         button.currentState == $.ButtonState.HOVER ) {
	        if( button.imgHover ){
	            button.imgHover.style.visibility = "hidden";
	        }
	        button.currentState = $.ButtonState.GROUP;
	    }

	    if ( newState <= $.ButtonState.REST &&
	         button.currentState == $.ButtonState.GROUP ) {
	        beginFading( button );
	        button.currentState = $.ButtonState.REST;
	    }
	}



	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - ButtonGroup
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){
	/**
	 * @class ButtonGroup
	 * @classdesc Manages events on groups of buttons.
	 *
	 * @memberof OpenSeadragon
	 * @param {Object} options - A dictionary of settings applied against the entire group of buttons.
	 * @param {Array} options.buttons Array of buttons
	 * @param {Element} [options.element] Element to use as the container
	 **/
	$.ButtonGroup = function( options ) {

	    $.extend( true, this, {
	        /**
	         * An array containing the buttons themselves.
	         * @member {Array} buttons
	         * @memberof OpenSeadragon.ButtonGroup#
	         */
	        buttons:            [],
	        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
	        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
	        labelText:          ""
	    }, options );

	    // copy the button elements  TODO: Why?
	    var buttons = this.buttons.concat([]),
	        _this = this,
	        i;

	    /**
	     * The shared container for the buttons.
	     * @member {Element} element
	     * @memberof OpenSeadragon.ButtonGroup#
	     */
	    this.element = options.element || $.makeNeutralElement( "div" );

	    // TODO What if there IS an options.group specified?
	    if( !options.group ){
	        this.label   = $.makeNeutralElement( "label" );
	        //TODO: support labels for ButtonGroups
	        //this.label.innerHTML = this.labelText;
	        this.element.style.display = "inline-block";
	        this.element.appendChild( this.label );
	        for ( i = 0; i < buttons.length; i++ ) {
	            this.element.appendChild( buttons[ i ].element );
	        }
	    }

	    $.setElementTouchActionNone( this.element );

	    /**
	     * Tracks mouse/touch/key events accross the group of buttons.
	     * @member {OpenSeadragon.MouseTracker} tracker
	     * @memberof OpenSeadragon.ButtonGroup#
	     */
	    this.tracker = new $.MouseTracker({
	        element:            this.element,
	        clickTimeThreshold: this.clickTimeThreshold,
	        clickDistThreshold: this.clickDistThreshold,
	        enterHandler: function ( event ) {
	            var i;
	            for ( i = 0; i < _this.buttons.length; i++ ) {
	                _this.buttons[ i ].notifyGroupEnter();
	            }
	        },
	        exitHandler: function ( event ) {
	            var i;
	            if ( !event.insideElementPressed ) {
	                for ( i = 0; i < _this.buttons.length; i++ ) {
	                    _this.buttons[ i ].notifyGroupExit();
	                }
	            }
	        },
	    });
	};

	$.ButtonGroup.prototype = /** @lends OpenSeadragon.ButtonGroup.prototype */{

	    /**
	     * TODO: Figure out why this is used on the public API and if a more useful
	     * api can be created.
	     * @function
	     * @private
	     */
	    emulateEnter: function() {
	        this.tracker.enterHandler( { eventSource: this.tracker } );
	    },

	    /**
	     * TODO: Figure out why this is used on the public API and if a more useful
	     * api can be created.
	     * @function
	     * @private
	     */
	    emulateExit: function() {
	        this.tracker.exitHandler( { eventSource: this.tracker } );
	    }
	};


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Rect
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Rect
	 * @classdesc A Rectangle really represents a 2x2 matrix where each row represents a
	 * 2 dimensional vector component, the first is (x,y) and the second is
	 * (width, height).  The latter component implies the equation of a simple
	 * plane.
	 *
	 * @memberof OpenSeadragon
	 * @param {Number} x The vector component 'x'.
	 * @param {Number} y The vector component 'y'.
	 * @param {Number} width The vector component 'height'.
	 * @param {Number} height The vector component 'width'.
	 */
	$.Rect = function( x, y, width, height ) {
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.x = typeof ( x ) == "number" ? x : 0;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.y = typeof ( y ) == "number" ? y : 0;
	    /**
	     * The vector component 'width'.
	     * @member {Number} width
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.width  = typeof ( width )  == "number" ? width : 0;
	    /**
	     * The vector component 'height'.
	     * @member {Number} height
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.height = typeof ( height ) == "number" ? height : 0;
	};

	$.Rect.prototype = /** @lends OpenSeadragon.Rect.prototype */{
	    /**
	     * @function
	     * @returns {OpenSeadragon.Rect} a duplicate of this Rect
	     */
	    clone: function() {
	        return new $.Rect(this.x, this.y, this.width, this.height);
	    },

	    /**
	     * The aspect ratio is simply the ratio of width to height.
	     * @function
	     * @returns {Number} The ratio of width to height.
	     */
	    getAspectRatio: function() {
	        return this.width / this.height;
	    },

	    /**
	     * Provides the coordinates of the upper-left corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the upper-left corner of
	     *  the rectangle.
	     */
	    getTopLeft: function() {
	        return new $.Point(
	            this.x,
	            this.y
	        );
	    },

	    /**
	     * Provides the coordinates of the bottom-right corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the bottom-right corner of
	     *  the rectangle.
	     */
	    getBottomRight: function() {
	        return new $.Point(
	            this.x + this.width,
	            this.y + this.height
	        );
	    },

	    /**
	     * Provides the coordinates of the top-right corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the top-right corner of
	     *  the rectangle.
	     */
	    getTopRight: function() {
	        return new $.Point(
	            this.x + this.width,
	            this.y
	        );
	    },

	    /**
	     * Provides the coordinates of the bottom-left corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the bottom-left corner of
	     *  the rectangle.
	     */
	    getBottomLeft: function() {
	        return new $.Point(
	            this.x,
	            this.y + this.height
	        );
	    },

	    /**
	     * Computes the center of the rectangle.
	     * @function
	     * @returns {OpenSeadragon.Point} The center of the rectangle as represented
	     *  as represented by a 2-dimensional vector (x,y)
	     */
	    getCenter: function() {
	        return new $.Point(
	            this.x + this.width / 2.0,
	            this.y + this.height / 2.0
	        );
	    },

	    /**
	     * Returns the width and height component as a vector OpenSeadragon.Point
	     * @function
	     * @returns {OpenSeadragon.Point} The 2 dimensional vector representing the
	     *  the width and height of the rectangle.
	     */
	    getSize: function() {
	        return new $.Point( this.width, this.height );
	    },

	    /**
	     * Determines if two Rectangles have equivalent components.
	     * @function
	     * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.
	     * @return {Boolean} 'true' if all components are equal, otherwise 'false'.
	     */
	    equals: function( other ) {
	        return ( other instanceof $.Rect ) &&
	            ( this.x === other.x ) &&
	            ( this.y === other.y ) &&
	            ( this.width === other.width ) &&
	            ( this.height === other.height );
	    },

	    /**
	    * Multiply all dimensions in this Rect by a factor and return a new Rect.
	    * @function
	    * @param {Number} factor The factor to multiply vector components.
	    * @returns {OpenSeadragon.Rect} A new rect representing the multiplication
	    *  of the vector components by the factor
	    */
	    times: function( factor ) {
	        return new OpenSeadragon.Rect(
	            this.x * factor,
	            this.y * factor,
	            this.width * factor,
	            this.height * factor
	        );
	    },

	    /**
	     * Returns the smallest rectangle that will contain this and the given rectangle.
	     * @param {OpenSeadragon.Rect} rect
	     * @return {OpenSeadragon.Rect} The new rectangle.
	     */
	    // ----------
	    union: function(rect) {
	        var left = Math.min(this.x, rect.x);
	        var top = Math.min(this.y, rect.y);
	        var right = Math.max(this.x + this.width, rect.x + rect.width);
	        var bottom = Math.max(this.y + this.height, rect.y + rect.height);

	        return new OpenSeadragon.Rect(left, top, right - left, bottom - top);
	    },

	    /**
	     * Rotates a rectangle around a point. Currently only 90, 180, and 270
	     * degrees are supported.
	     * @function
	     * @param {Number} degrees The angle in degrees to rotate.
	     * @param {OpenSeadragon.Point} pivot The point about which to rotate.
	     * Defaults to the center of the rectangle.
	     * @return {OpenSeadragon.Rect}
	     */
	    rotate: function( degrees, pivot ) {
	        // TODO support arbitrary rotation
	        var width = this.width,
	            height = this.height,
	            newTopLeft;

	        degrees = ( degrees + 360 ) % 360;
	        if (degrees % 90 !== 0) {
	            throw new Error('Currently only 0, 90, 180, and 270 degrees are supported.');
	        }

	        if( degrees === 0 ){
	            return new $.Rect(
	                this.x,
	                this.y,
	                this.width,
	                this.height
	            );
	        }

	        pivot = pivot || this.getCenter();

	        switch ( degrees ) {
	            case 90:
	                newTopLeft = this.getBottomLeft();
	                width = this.height;
	                height = this.width;
	                break;
	            case 180:
	                newTopLeft = this.getBottomRight();
	                break;
	            case 270:
	                newTopLeft = this.getTopRight();
	                width = this.height;
	                height = this.width;
	                break;
	            default:
	                newTopLeft = this.getTopLeft();
	                break;
	        }

	        newTopLeft = newTopLeft.rotate(degrees, pivot);

	        return new $.Rect(newTopLeft.x, newTopLeft.y, width, height);
	    },

	    /**
	     * Provides a string representation of the rectangle which is useful for
	     * debugging.
	     * @function
	     * @returns {String} A string representation of the rectangle.
	     */
	    toString: function() {
	        return "[" +
	            (Math.round(this.x*100) / 100) + "," +
	            (Math.round(this.y*100) / 100) + "," +
	            (Math.round(this.width*100) / 100) + "x" +
	            (Math.round(this.height*100) / 100) +
	        "]";
	    }
	};


	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - ReferenceStrip
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function ( $ ) {

	// dictionary from id to private properties
	var THIS = {};

	/**
	 *  The CollectionDrawer is a reimplementation if the Drawer API that
	 *  focuses on allowing a viewport to be redefined as a collection
	 *  of smaller viewports, defined by a clear number of rows and / or
	 *  columns of which each item in the matrix of viewports has its own
	 *  source.
	 *
	 *  This idea is a reexpression of the idea of dzi collections
	 *  which allows a clearer algorithm to reuse the tile sources already
	 *  supported by OpenSeadragon, in heterogenious or homogenious
	 *  sequences just like mixed groups already supported by the viewer
	 *  for the purpose of image sequnces.
	 *
	 *  TODO:   The difficult part of this feature is figuring out how to express
	 *          this functionality as a combination of the functionality already
	 *          provided by Drawer, Viewport, TileSource, and Navigator.  It may
	 *          require better abstraction at those points in order to effeciently
	 *          reuse those paradigms.
	 */
	/**
	 * @class ReferenceStrip
	 * @memberof OpenSeadragon
	 * @param {Object} options
	 */
	$.ReferenceStrip = function ( options ) {

	    var _this       = this,
	        viewer      = options.viewer,
	        viewerSize  = $.getElementSize( viewer.element ),
	        element,
	        style,
	        i;

	    //We may need to create a new element and id if they did not
	    //provide the id for the existing element
	    if ( !options.id ) {
	        options.id              = 'referencestrip-' + $.now();
	        this.element            = $.makeNeutralElement( "div" );
	        this.element.id         = options.id;
	        this.element.className  = 'referencestrip';
	    }

	    options = $.extend( true, {
	        sizeRatio:  $.DEFAULT_SETTINGS.referenceStripSizeRatio,
	        position:   $.DEFAULT_SETTINGS.referenceStripPosition,
	        scroll:     $.DEFAULT_SETTINGS.referenceStripScroll,
	        clickTimeThreshold:  $.DEFAULT_SETTINGS.clickTimeThreshold
	    }, options, {
	        //required overrides
	        element:                this.element,
	        //These need to be overridden to prevent recursion since
	        //the navigator is a viewer and a viewer has a navigator
	        showNavigator:          false,
	        mouseNavEnabled:        false,
	        showNavigationControl:  false,
	        showSequenceControl:    false
	    } );

	    $.extend( this, options );
	    //Private state properties
	    THIS[this.id] = {
	        "animating":           false
	    };

	    this.minPixelRatio = this.viewer.minPixelRatio;

	    style = this.element.style;
	    style.marginTop     = '0px';
	    style.marginRight   = '0px';
	    style.marginBottom  = '0px';
	    style.marginLeft    = '0px';
	    style.left          = '0px';
	    style.bottom        = '0px';
	    style.border        = '0px';
	    style.background    = '#000';
	    style.position      = 'relative';

	    $.setElementTouchActionNone( this.element );

	    $.setElementOpacity( this.element, 0.8 );

	    this.viewer = viewer;
	    this.innerTracker = new $.MouseTracker( {
	        element:        this.element,
	        dragHandler:    $.delegate( this, onStripDrag ),
	        scrollHandler:  $.delegate( this, onStripScroll ),
	        enterHandler:   $.delegate( this, onStripEnter ),
	        exitHandler:    $.delegate( this, onStripExit ),
	        keyDownHandler: $.delegate( this, onKeyDown ),
	        keyHandler:     $.delegate( this, onKeyPress )
	    } );

	    //Controls the position and orientation of the reference strip and sets the
	    //appropriate width and height
	    if ( options.width && options.height ) {
	        this.element.style.width  = options.width + 'px';
	        this.element.style.height = options.height + 'px';
	        viewer.addControl(
	            this.element,
	            { anchor: $.ControlAnchor.BOTTOM_LEFT }
	        );
	    } else {
	        if ( "horizontal" == options.scroll ) {
	            this.element.style.width = (
	                viewerSize.x *
	                options.sizeRatio *
	                viewer.tileSources.length
	            ) + ( 12 * viewer.tileSources.length ) + 'px';

	            this.element.style.height = (
	                viewerSize.y *
	                options.sizeRatio
	            ) + 'px';

	            viewer.addControl(
	                this.element,
	                { anchor: $.ControlAnchor.BOTTOM_LEFT }
	            );
	        } else {
	            this.element.style.height = (
	                viewerSize.y *
	                options.sizeRatio *
	                viewer.tileSources.length
	            ) + ( 12 * viewer.tileSources.length ) + 'px';

	            this.element.style.width = (
	                viewerSize.x *
	                options.sizeRatio
	            ) + 'px';

	            viewer.addControl(
	                this.element,
	                { anchor: $.ControlAnchor.TOP_LEFT }
	            );

	        }
	    }

	    this.panelWidth = ( viewerSize.x * this.sizeRatio ) + 8;
	    this.panelHeight = ( viewerSize.y * this.sizeRatio ) + 8;
	    this.panels = [];

	    /*jshint loopfunc:true*/
	    for ( i = 0; i < viewer.tileSources.length; i++ ) {

	        element = $.makeNeutralElement( 'div' );
	        element.id = this.element.id + "-" + i;

	        element.style.width         = _this.panelWidth + 'px';
	        element.style.height        = _this.panelHeight + 'px';
	        element.style.display       = 'inline';
	        element.style.float         = 'left'; //Webkit
	        element.style.cssFloat      = 'left'; //Firefox
	        element.style.styleFloat    = 'left'; //IE
	        element.style.padding       = '2px';
	        $.setElementTouchActionNone( element );

	        element.innerTracker = new $.MouseTracker( {
	            element:            element,
	            clickTimeThreshold: this.clickTimeThreshold,
	            clickDistThreshold: this.clickDistThreshold,
	            pressHandler: function ( event ) {
	                event.eventSource.dragging = $.now();
	            },
	            releaseHandler: function ( event ) {
	                var tracker = event.eventSource,
	                    id      = tracker.element.id,
	                    page    = Number( id.split( '-' )[2] ),
	                    now     = $.now();

	                if ( event.insideElementPressed &&
	                     event.insideElementReleased &&
	                     tracker.dragging &&
	                     ( now - tracker.dragging ) < tracker.clickTimeThreshold ) {
	                    tracker.dragging = null;
	                    viewer.goToPage( page );
	                }
	            }
	        } );

	        this.element.appendChild( element );

	        element.activePanel = false;

	        this.panels.push( element );

	    }
	    loadPanels( this, this.scroll == 'vertical' ? viewerSize.y : viewerSize.x, 0 );
	    this.setFocus( 0 );

	};

	$.extend( $.ReferenceStrip.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.ReferenceStrip.prototype */{

	    /**
	     * @function
	     */
	    setFocus: function ( page ) {
	        var element      = $.getElement( this.element.id + '-' + page ),
	            viewerSize   = $.getElementSize( this.viewer.canvas ),
	            scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	            scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	            offsetLeft   = -Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	            offsetTop    = -Number( this.element.style.marginTop.replace( 'px', '' ) ),
	            offset;

	        if ( this.currentSelected !== element ) {
	            if ( this.currentSelected ) {
	                this.currentSelected.style.background = '#000';
	            }
	            this.currentSelected = element;
	            this.currentSelected.style.background = '#999';

	            if ( 'horizontal' == this.scroll ) {
	                //right left
	                offset = ( Number( page ) ) * ( this.panelWidth + 3 );
	                if ( offset > offsetLeft + viewerSize.x - this.panelWidth ) {
	                    offset = Math.min( offset, ( scrollWidth - viewerSize.x ) );
	                    this.element.style.marginLeft = -offset + 'px';
	                    loadPanels( this, viewerSize.x, -offset );
	                } else if ( offset < offsetLeft ) {
	                    offset = Math.max( 0, offset - viewerSize.x / 2 );
	                    this.element.style.marginLeft = -offset + 'px';
	                    loadPanels( this, viewerSize.x, -offset );
	                }
	            } else {
	                offset = ( Number( page ) ) * ( this.panelHeight + 3 );
	                if ( offset > offsetTop + viewerSize.y - this.panelHeight ) {
	                    offset = Math.min( offset, ( scrollHeight - viewerSize.y ) );
	                    this.element.style.marginTop = -offset + 'px';
	                    loadPanels( this, viewerSize.y, -offset );
	                } else if ( offset < offsetTop ) {
	                    offset = Math.max( 0, offset - viewerSize.y / 2 );
	                    this.element.style.marginTop = -offset + 'px';
	                    loadPanels( this, viewerSize.y, -offset );
	                }
	            }

	            this.currentPage = page;
	            $.getElement( element.id + '-displayregion' ).focus();
	            onStripEnter.call( this, { eventSource: this.innerTracker } );
	        }
	    },

	    /**
	     * @function
	     */
	    update: function () {
	        if ( THIS[this.id].animating ) {
	            $.console.log( 'image reference strip update' );
	            return true;
	        }
	        return false;
	    },

	    // Overrides Viewer.destroy
	    destroy: function() {
	        if (this.element) {
	            this.element.parentNode.removeChild(this.element);
	        }
	    }

	} );




	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripDrag( event ) {

	    var offsetLeft   = Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	        offsetTop    = Number( this.element.style.marginTop.replace( 'px', '' ) ),
	        scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	        scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	        viewerSize   = $.getElementSize( this.viewer.canvas );
	    this.dragging = true;
	    if ( this.element ) {
	        if ( 'horizontal' == this.scroll ) {
	            if ( -event.delta.x > 0 ) {
	                //forward
	                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {
	                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );
	                }
	            } else if ( -event.delta.x < 0 ) {
	                //reverse
	                if ( offsetLeft < 0 ) {
	                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );
	                }
	            }
	        } else {
	            if ( -event.delta.y > 0 ) {
	                //forward
	                if ( offsetTop > -( scrollHeight - viewerSize.y ) ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );
	                }
	            } else if ( -event.delta.y < 0 ) {
	                //reverse
	                if ( offsetTop < 0 ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );
	                }
	            }
	        }
	    }
	    return false;

	}



	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripScroll( event ) {
	    var offsetLeft   = Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	        offsetTop    = Number( this.element.style.marginTop.replace( 'px', '' ) ),
	        scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	        scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	        viewerSize   = $.getElementSize( this.viewer.canvas );
	    if ( this.element ) {
	        if ( 'horizontal' == this.scroll ) {
	            if ( event.scroll > 0 ) {
	                //forward
	                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {
	                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );
	                }
	            } else if ( event.scroll < 0 ) {
	                //reverse
	                if ( offsetLeft < 0 ) {
	                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );
	                }
	            }
	        } else {
	            if ( event.scroll < 0 ) {
	                //scroll up
	                if ( offsetTop > viewerSize.y - scrollHeight ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );
	                }
	            } else if ( event.scroll > 0 ) {
	                //scroll dowm
	                if ( offsetTop < 0 ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );
	                }
	            }
	        }
	    }
	    //cancels event
	    return false;
	}


	function loadPanels( strip, viewerSize, scroll ) {
	    var panelSize,
	        activePanelsStart,
	        activePanelsEnd,
	        miniViewer,
	        style,
	        i,
	        element;
	    if ( 'horizontal' == strip.scroll ) {
	        panelSize = strip.panelWidth;
	    } else {
	        panelSize = strip.panelHeight;
	    }
	    activePanelsStart = Math.ceil( viewerSize / panelSize ) + 5;
	    activePanelsEnd = Math.ceil( ( Math.abs( scroll ) + viewerSize ) / panelSize ) + 1;
	    activePanelsStart = activePanelsEnd - activePanelsStart;
	    activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart;

	    for ( i = activePanelsStart; i < activePanelsEnd && i < strip.panels.length; i++ ) {
	        element = strip.panels[i];
	        if ( !element.activePanel ) {
	            miniViewer = new $.Viewer( {
	                id:                     element.id,
	                tileSources:            [strip.viewer.tileSources[i]],
	                element:                element,
	                navigatorSizeRatio:     strip.sizeRatio,
	                showNavigator:          false,
	                mouseNavEnabled:        false,
	                showNavigationControl:  false,
	                showSequenceControl:    false,
	                immediateRender:        true,
	                blendTime:              0,
	                animationTime:          0
	            } );

	            miniViewer.displayRegion           = $.makeNeutralElement( "textarea" );
	            miniViewer.displayRegion.id        = element.id + '-displayregion';
	            miniViewer.displayRegion.className = 'displayregion';

	            style               = miniViewer.displayRegion.style;
	            style.position      = 'relative';
	            style.top           = '0px';
	            style.left          = '0px';
	            style.fontSize      = '0px';
	            style.overflow      = 'hidden';
	            style.float         = 'left'; //Webkit
	            style.cssFloat      = 'left'; //Firefox
	            style.styleFloat    = 'left'; //IE
	            style.zIndex        = 999999999;
	            style.cursor        = 'default';
	            style.width         = ( strip.panelWidth - 4 ) + 'px';
	            style.height        = ( strip.panelHeight - 4 ) + 'px';

	            // TODO: What is this for? Future keyboard navigation support?
	            miniViewer.displayRegion.innerTracker = new $.MouseTracker( {
	                element: miniViewer.displayRegion,
	                startDisabled: true
	            } );

	            element.getElementsByTagName( 'div' )[0].appendChild(
	                miniViewer.displayRegion
	            );

	            element.activePanel = true;
	        }
	    }
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripEnter( event ) {
	    var element = event.eventSource.element;

	    //$.setElementOpacity(element, 0.8);

	    //element.style.border = '1px solid #555';
	    //element.style.background = '#000';

	    if ( 'horizontal' == this.scroll ) {

	        //element.style.paddingTop = "0px";
	        element.style.marginBottom = "0px";

	    } else {

	        //element.style.paddingRight = "0px";
	        element.style.marginLeft = "0px";

	    }
	    return false;
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripExit( event ) {
	    var element = event.eventSource.element;

	    if ( 'horizontal' == this.scroll ) {

	        //element.style.paddingTop = "10px";
	        element.style.marginBottom = "-" + ( $.getElementSize( element ).y / 2 ) + "px";

	    } else {

	        //element.style.paddingRight = "10px";
	        element.style.marginLeft = "-" + ( $.getElementSize( element ).x / 2 ) + "px";

	    }
	    return false;
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onKeyDown( event ) {
	    //console.log( event.keyCode );

	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch ( event.keyCode ) {
	            case 38: //up arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 40: //down arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 37: //left arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 39: //right arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}


	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onKeyPress( event ) {
	    //console.log( event.keyCode );

	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch ( event.keyCode ) {
	            case 61: //=|+
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 45: //-|_
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 48: //0|)
	            case 119: //w
	            case 87: //W
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 115: //s
	            case 83: //S
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 97: //a
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 100: //d
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}



	} ( OpenSeadragon ) );

	/*
	 * OpenSeadragon - DisplayRect
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class DisplayRect
	 * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds two
	 * fields, 'minLevel' and 'maxLevel' which denote the supported zoom levels
	 * for this rectangle.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.Rect
	 * @param {Number} x The vector component 'x'.
	 * @param {Number} y The vector component 'y'.
	 * @param {Number} width The vector component 'height'.
	 * @param {Number} height The vector component 'width'.
	 * @param {Number} minLevel The lowest zoom level supported.
	 * @param {Number} maxLevel The highest zoom level supported.
	 */
	$.DisplayRect = function( x, y, width, height, minLevel, maxLevel ) {
	    $.Rect.apply( this, [ x, y, width, height ] );

	    /**
	     * The lowest zoom level supported.
	     * @member {Number} minLevel
	     * @memberof OpenSeadragon.DisplayRect#
	     */
	    this.minLevel = minLevel;
	    /**
	     * The highest zoom level supported.
	     * @member {Number} maxLevel
	     * @memberof OpenSeadragon.DisplayRect#
	     */
	    this.maxLevel = maxLevel;
	};

	$.extend( $.DisplayRect.prototype, $.Rect.prototype );

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Spring
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Spring
	 * @memberof OpenSeadragon
	 * @param {Object} options - Spring configuration settings.
	 * @param {Number} options.springStiffness - Spring stiffness. Must be greater than zero.
	 * The closer to zero, the closer to linear animation.
	 * @param {Number} options.animationTime - Animation duration per spring, in seconds.
	 * Must be greater than zero.
	 * @param {Number} [options.initial=0] - Initial value of spring.
	 * @param {Boolean} [options.exponential=false] - Whether this spring represents
	 * an exponential scale (such as zoom) and should be animated accordingly. Note that
	 * exponential springs must have non-zero values.
	 */
	$.Spring = function( options ) {
	    var args = arguments;

	    if( typeof( options ) != 'object' ){
	        //allows backward compatible use of ( initialValue, config ) as
	        //constructor parameters
	        options = {
	            initial: args.length && typeof ( args[ 0 ] ) == "number" ?
	                args[ 0 ] :
	                undefined,
	            /**
	             * Spring stiffness.
	             * @member {Number} springStiffness
	             * @memberof OpenSeadragon.Spring#
	             */
	            springStiffness: args.length > 1 ?
	                args[ 1 ].springStiffness :
	                5.0,
	            /**
	             * Animation duration per spring.
	             * @member {Number} animationTime
	             * @memberof OpenSeadragon.Spring#
	             */
	            animationTime: args.length > 1 ?
	                args[ 1 ].animationTime :
	                1.5
	        };
	    }

	    $.console.assert(typeof options.springStiffness === "number" && options.springStiffness !== 0,
	        "[OpenSeadragon.Spring] options.springStiffness must be a non-zero number");

	    $.console.assert(typeof options.animationTime === "number" && options.springStiffness !== 0,
	        "[OpenSeadragon.Spring] options.animationTime must be a non-zero number");

	    if (options.exponential) {
	        this._exponential = true;
	        delete options.exponential;
	    }

	    $.extend( true, this, options);

	    /**
	     * @member {Object} current
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.current = {
	        value: typeof ( this.initial ) == "number" ?
	            this.initial :
	            (this._exponential ? 0 : 1),
	        time:  $.now() // always work in milliseconds
	    };

	    $.console.assert(!this._exponential || this.current.value !== 0,
	        "[OpenSeadragon.Spring] value must be non-zero for exponential springs");

	    /**
	     * @member {Object} start
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.start = {
	        value: this.current.value,
	        time:  this.current.time
	    };

	    /**
	     * @member {Object} target
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.target = {
	        value: this.current.value,
	        time:  this.current.time
	    };

	    if (this._exponential) {
	        this.start._logValue = Math.log(this.start.value);
	        this.target._logValue = Math.log(this.target.value);
	        this.current._logValue = Math.log(this.current.value);
	    }
	};

	$.Spring.prototype = /** @lends OpenSeadragon.Spring.prototype */{

	    /**
	     * @function
	     * @param {Number} target
	     */
	    resetTo: function( target ) {
	        $.console.assert(!this._exponential || target !== 0,
	            "[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs");

	        this.start.value = this.target.value = this.current.value = target;
	        this.start.time = this.target.time = this.current.time = $.now();

	        if (this._exponential) {
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	            this.current._logValue = Math.log(this.current.value);
	        }
	    },

	    /**
	     * @function
	     * @param {Number} target
	     */
	    springTo: function( target ) {
	        $.console.assert(!this._exponential || target !== 0,
	            "[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs");

	        this.start.value  = this.current.value;
	        this.start.time   = this.current.time;
	        this.target.value = target;
	        this.target.time  = this.start.time + 1000 * this.animationTime;

	        if (this._exponential) {
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	        }
	    },

	    /**
	     * @function
	     * @param {Number} delta
	     */
	    shiftBy: function( delta ) {
	        this.start.value  += delta;
	        this.target.value += delta;

	        if (this._exponential) {
	            $.console.assert(this.target.value !== 0 && this.start.value !== 0,
	                "[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs");

	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	        }
	    },

	    setExponential: function(value) {
	        this._exponential = value;

	        if (this._exponential) {
	            $.console.assert(this.current.value !== 0 && this.target.value !== 0 && this.start.value !== 0,
	                "[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs");

	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	            this.current._logValue = Math.log(this.current.value);
	        }
	    },

	    /**
	     * @function
	     */
	    update: function() {
	        this.current.time  = $.now();

	        var startValue, targetValue;
	        if (this._exponential) {
	            startValue = this.start._logValue;
	            targetValue = this.target._logValue;
	        } else {
	            startValue = this.start.value;
	            targetValue = this.target.value;
	        }

	        var currentValue = (this.current.time >= this.target.time) ?
	            targetValue :
	            startValue +
	                ( targetValue - startValue ) *
	                transform(
	                    this.springStiffness,
	                    ( this.current.time - this.start.time ) /
	                    ( this.target.time  - this.start.time )
	                );

	        if (this._exponential) {
	            this.current.value = Math.exp(currentValue);
	        } else {
	            this.current.value = currentValue;
	        }
	    }
	};

	/**
	 * @private
	 */
	function transform( stiffness, x ) {
	    return ( 1.0 - Math.exp( stiffness * -x ) ) /
	        ( 1.0 - Math.exp( -stiffness ) );
	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - ImageLoader
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors

	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	// private class
	function ImageJob ( options ) {

	    $.extend( true, this, {
	        timeout:        $.DEFAULT_SETTINGS.timeout,
	        jobId:          null
	    }, options );

	    /**
	     * Image object which will contain downloaded image.
	     * @member {Image} image
	     * @memberof OpenSeadragon.ImageJob#
	     */
	    this.image = null;
	}

	ImageJob.prototype = {
	    errorMsg: null,
	    start: function(){
	        var _this = this;

	        this.image = new Image();

	        if ( this.crossOriginPolicy !== false ) {
	            this.image.crossOrigin = this.crossOriginPolicy;
	        }

	        this.image.onload = function(){
	            _this.finish( true );
	        };
	        this.image.onabort = this.image.onerror = function(){
	            _this.errorMsg = "Image load aborted";
	            _this.finish( false );
	        };

	        this.jobId = window.setTimeout( function(){
	            _this.errorMsg = "Image load exceeded timeout";
	            _this.finish( false );
	        }, this.timeout);

	        this.image.src = this.src;
	    },

	    finish: function( successful ) {
	        this.image.onload = this.image.onerror = this.image.onabort = null;
	        if (!successful) {
	            this.image = null;
	        }

	        if ( this.jobId ) {
	            window.clearTimeout( this.jobId );
	        }

	        this.callback( this );
	    }

	};

	/**
	 * @class ImageLoader
	 * @memberof OpenSeadragon
	 * @classdesc Handles downloading of a set of images using asynchronous queue pattern.
	 * You generally won't have to interact with the ImageLoader directly.
	 * @param {Object} options - Options for this ImageLoader.
	 * @param {Number} [options.jobLimit] - The number of concurrent image requests. See imageLoaderLimit in {@link OpenSeadragon.Options} for details.
	 */
	$.ImageLoader = function( options ) {

	    $.extend( true, this, {
	        jobLimit:       $.DEFAULT_SETTINGS.imageLoaderLimit,
	        jobQueue:       [],
	        jobsInProgress: 0
	    }, options );

	};

	$.ImageLoader.prototype = /** @lends OpenSeadragon.ImageLoader.prototype */{

	    /**
	     * Add an unloaded image to the loader queue.
	     * @method
	     * @param {String} src - URL of image to download.
	     * @param {String} crossOriginPolicy - CORS policy to use for downloads
	     * @param {Function} callback - Called once image has been downloaded.
	     */
	    addJob: function( options ) {
	        var _this = this,
	            complete = function( job ) {
	                completeJob( _this, job, options.callback );
	            },
	            jobOptions = {
	                src: options.src,
	                crossOriginPolicy: options.crossOriginPolicy,
	                callback: complete,
	                abort: options.abort
	            },
	            newJob = new ImageJob( jobOptions );

	        if ( !this.jobLimit || this.jobsInProgress < this.jobLimit ) {
	            newJob.start();
	            this.jobsInProgress++;
	        }
	        else {
	            this.jobQueue.push( newJob );
	        }
	    },

	    /**
	     * Clear any unstarted image loading jobs from the queue.
	     * @method
	     */
	    clear: function() {
	        for( var i = 0; i < this.jobQueue.length; i++ ) {
	            var job = this.jobQueue[i];
	            if ( typeof job.abort === "function" ) {
	                job.abort();
	            }
	        }

	        this.jobQueue = [];
	    }
	};

	/**
	 * Cleans up ImageJob once completed.
	 * @method
	 * @private
	 * @param loader - ImageLoader used to start job.
	 * @param job - The ImageJob that has completed.
	 * @param callback - Called once cleanup is finished.
	 */
	function completeJob( loader, job, callback ) {
	    var nextJob;

	    loader.jobsInProgress--;

	    if ( (!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) && loader.jobQueue.length > 0) {
	        nextJob = loader.jobQueue.shift();
	        nextJob.start();
	        loader.jobsInProgress++;
	    }

	    callback( job.image, job.errorMsg );
	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Tile
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Tile
	 * @memberof OpenSeadragon
	 * @param {Number} level The zoom level this tile belongs to.
	 * @param {Number} x The vector component 'x'.
	 * @param {Number} y The vector component 'y'.
	 * @param {OpenSeadragon.Point} bounds Where this tile fits, in normalized
	 *      coordinates.
	 * @param {Boolean} exists Is this tile a part of a sparse image? ( Also has
	 *      this tile failed to load? )
	 * @param {String} url The URL of this tile's image.
	 * @param {CanvasRenderingContext2D} context2D The context2D of this tile if it
	 * is provided directly by the tile source.
	 */
	$.Tile = function(level, x, y, bounds, exists, url, context2D) {
	    /**
	     * The zoom level this tile belongs to.
	     * @member {Number} level
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.level   = level;
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.x       = x;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.y       = y;
	    /**
	     * Where this tile fits, in normalized coordinates
	     * @member {OpenSeadragon.Rect} bounds
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.bounds  = bounds;
	    /**
	     * Is this tile a part of a sparse image? Also has this tile failed to load?
	     * @member {Boolean} exists
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.exists  = exists;
	    /**
	     * The URL of this tile's image.
	     * @member {String} url
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.url     = url;
	    /**
	     * The context2D of this tile if it is provided directly by the tile source.
	     * @member {CanvasRenderingContext2D} context2D
	     * @memberOf OpenSeadragon.Tile#
	     */
	    this.context2D = context2D;
	    /**
	     * Is this tile loaded?
	     * @member {Boolean} loaded
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.loaded  = false;
	    /**
	     * Is this tile loading?
	     * @member {Boolean} loading
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.loading = false;

	    /**
	     * The HTML div element for this tile
	     * @member {Element} element
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.element    = null;
	    /**
	     * The HTML img element for this tile.
	     * @member {Element} imgElement
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.imgElement = null;
	    /**
	     * The Image object for this tile.
	     * @member {Object} image
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.image      = null;

	    /**
	     * The alias of this.element.style.
	     * @member {String} style
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.style      = null;
	    /**
	     * This tile's position on screen, in pixels.
	     * @member {OpenSeadragon.Point} position
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.position   = null;
	    /**
	     * This tile's size on screen, in pixels.
	     * @member {OpenSeadragon.Point} size
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.size       = null;
	    /**
	     * The start time of this tile's blending.
	     * @member {Number} blendStart
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.blendStart = null;
	    /**
	     * The current opacity this tile should be.
	     * @member {Number} opacity
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.opacity    = null;
	    /**
	     * The distance of this tile to the viewport center.
	     * @member {Number} distance
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.distance   = null;
	    /**
	     * The visibility score of this tile.
	     * @member {Number} visibility
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.visibility = null;

	    /**
	     * Whether this tile is currently being drawn.
	     * @member {Boolean} beingDrawn
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.beingDrawn     = false;
	    /**
	     * Timestamp the tile was last touched.
	     * @member {Number} lastTouchTime
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.lastTouchTime  = 0;
	};

	$.Tile.prototype = /** @lends OpenSeadragon.Tile.prototype */{

	    /**
	     * Provides a string representation of this tiles level and (x,y)
	     * components.
	     * @function
	     * @returns {String}
	     */
	    toString: function() {
	        return this.level + "/" + this.x + "_" + this.y;
	    },

	    /**
	     * Renders the tile in an html container.
	     * @function
	     * @param {Element} container
	     */
	    drawHTML: function( container ) {
	        if (!this.cacheImageRecord) {
	            $.console.warn(
	                '[Tile.drawHTML] attempting to draw tile %s when it\'s not cached',
	                this.toString());
	            return;
	        }

	        if ( !this.loaded ) {
	            $.console.warn(
	                "Attempting to draw tile %s when it's not yet loaded.",
	                this.toString()
	            );
	            return;
	        }

	        //EXPERIMENTAL - trying to figure out how to scale the container
	        //               content during animation of the container size.

	        if ( !this.element ) {
	            this.element                              = $.makeNeutralElement( "div" );
	            this.imgElement                           = this.cacheImageRecord.getImage().cloneNode();
	            this.imgElement.style.msInterpolationMode = "nearest-neighbor";
	            this.imgElement.style.width               = "100%";
	            this.imgElement.style.height              = "100%";

	            this.style                     = this.element.style;
	            this.style.position            = "absolute";
	        }
	        if ( this.element.parentNode != container ) {
	            container.appendChild( this.element );
	        }
	        if ( this.imgElement.parentNode != this.element ) {
	            this.element.appendChild( this.imgElement );
	        }

	        this.style.top     = this.position.y + "px";
	        this.style.left    = this.position.x + "px";
	        this.style.height  = this.size.y + "px";
	        this.style.width   = this.size.x + "px";

	        $.setElementOpacity( this.element, this.opacity );
	    },

	    /**
	     * Renders the tile in a canvas-based context.
	     * @function
	     * @param {Canvas} context
	     * @param {Function} drawingHandler - Method for firing the drawing event.
	     * drawingHandler({context, tile, rendered})
	     * where <code>rendered</code> is the context with the pre-drawn image.
	     */
	    drawCanvas: function( context, drawingHandler ) {

	        var position = this.position,
	            size     = this.size,
	            rendered;

	        if (!this.context2D && !this.cacheImageRecord) {
	            $.console.warn(
	                '[Tile.drawCanvas] attempting to draw tile %s when it\'s not cached',
	                this.toString());
	            return;
	        }

	        rendered = this.context2D || this.cacheImageRecord.getRenderedContext();

	        if ( !this.loaded || !rendered ){
	            $.console.warn(
	                "Attempting to draw tile %s when it's not yet loaded.",
	                this.toString()
	            );

	            return;
	        }

	        context.save();

	        context.globalAlpha = this.opacity;

	        //if we are supposed to be rendering fully opaque rectangle,
	        //ie its done fading or fading is turned off, and if we are drawing
	        //an image with an alpha channel, then the only way
	        //to avoid seeing the tile underneath is to clear the rectangle
	        if (context.globalAlpha === 1 &&
	                (this.context2D || this.url.match('.png'))) {
	            //clearing only the inside of the rectangle occupied
	            //by the png prevents edge flikering
	            context.clearRect(
	                (position.x * $.pixelDensityRatio)+1,
	                (position.y * $.pixelDensityRatio)+1,
	                (size.x * $.pixelDensityRatio)-2,
	                (size.y * $.pixelDensityRatio)-2
	            );

	        }

	        // This gives the application a chance to make image manipulation
	        // changes as we are rendering the image
	        drawingHandler({context: context, tile: this, rendered: rendered});

	        context.drawImage(
	            rendered.canvas,
	            0,
	            0,
	            rendered.canvas.width,
	            rendered.canvas.height,
	            position.x * $.pixelDensityRatio,
	            position.y * $.pixelDensityRatio,
	            size.x * $.pixelDensityRatio,
	            size.y * $.pixelDensityRatio
	        );

	        context.restore();
	    },

	    /**
	     * Removes tile from its container.
	     * @function
	     */
	    unload: function() {
	        if ( this.imgElement && this.imgElement.parentNode ) {
	            this.imgElement.parentNode.removeChild( this.imgElement );
	        }
	        if ( this.element && this.element.parentNode ) {
	            this.element.parentNode.removeChild( this.element );
	        }

	        this.element    = null;
	        this.imgElement = null;
	        this.loaded     = false;
	        this.loading    = false;
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Overlay
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	    /**
	     * An enumeration of positions that an overlay may be assigned relative to
	     * the viewport.
	     * @member OverlayPlacement
	     * @memberof OpenSeadragon
	     * @static
	     * @type {Object}
	     * @property {Number} CENTER
	     * @property {Number} TOP_LEFT
	     * @property {Number} TOP
	     * @property {Number} TOP_RIGHT
	     * @property {Number} RIGHT
	     * @property {Number} BOTTOM_RIGHT
	     * @property {Number} BOTTOM
	     * @property {Number} BOTTOM_LEFT
	     * @property {Number} LEFT
	     */
	    $.OverlayPlacement = {
	        CENTER:       0,
	        TOP_LEFT:     1,
	        TOP:          2,
	        TOP_RIGHT:    3,
	        RIGHT:        4,
	        BOTTOM_RIGHT: 5,
	        BOTTOM:       6,
	        BOTTOM_LEFT:  7,
	        LEFT:         8
	    };

	    /**
	     * @class Overlay
	     * @classdesc Provides a way to float an HTML element on top of the viewer element.
	     *
	     * @memberof OpenSeadragon
	     * @param {Object} options
	     * @param {Element} options.element
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} options.location - The
	     * location of the overlay on the image. If a {@link OpenSeadragon.Point}
	     * is specified, the overlay will keep a constant size independently of the
	     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will
	     * be adjusted when the zoom changes.
	     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]
	     * Relative position to the viewport.
	     * Only used if location is a {@link OpenSeadragon.Point}.
	     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]
	     * @param {Boolean} [options.checkResize=true] Set to false to avoid to
	     * check the size of the overlay everytime it is drawn when using a
	     * {@link OpenSeadragon.Point} as options.location. It will improve
	     * performances but will cause a misalignment if the overlay size changes.
	     */
	    $.Overlay = function( element, location, placement ) {

	        /**
	         * onDraw callback signature used by {@link OpenSeadragon.Overlay}.
	         *
	         * @callback OnDrawCallback
	         * @memberof OpenSeadragon.Overlay
	         * @param {OpenSeadragon.Point} position
	         * @param {OpenSeadragon.Point} size
	         * @param {Element} element
	         */

	        var options;
	        if ( $.isPlainObject( element ) ) {
	            options = element;
	        } else {
	            options = {
	                element: element,
	                location: location,
	                placement: placement
	            };
	        }

	        this.element    = options.element;
	        this.scales     = options.location instanceof $.Rect;
	        this.bounds     = new $.Rect(
	            options.location.x,
	            options.location.y,
	            options.location.width,
	            options.location.height
	        );
	        this.position   = new $.Point(
	            options.location.x,
	            options.location.y
	        );
	        this.size       = new $.Point(
	            options.location.width,
	            options.location.height
	        );
	        this.style      = options.element.style;
	        // rects are always top-left
	        this.placement  = options.location instanceof $.Point ?
	            options.placement :
	            $.OverlayPlacement.TOP_LEFT;
	        this.onDraw = options.onDraw;
	        this.checkResize = options.checkResize === undefined ?
	            true : options.checkResize;
	    };

	    $.Overlay.prototype = /** @lends OpenSeadragon.Overlay.prototype */{

	        /**
	         * @function
	         * @param {OpenSeadragon.OverlayPlacement} position
	         * @param {OpenSeadragon.Point} size
	         */
	        adjust: function( position, size ) {
	            switch ( this.placement ) {
	                case $.OverlayPlacement.TOP_LEFT:
	                    break;
	                case $.OverlayPlacement.TOP:
	                    position.x -= size.x / 2;
	                    break;
	                case $.OverlayPlacement.TOP_RIGHT:
	                    position.x -= size.x;
	                    break;
	                case $.OverlayPlacement.RIGHT:
	                    position.x -= size.x;
	                    position.y -= size.y / 2;
	                    break;
	                case $.OverlayPlacement.BOTTOM_RIGHT:
	                    position.x -= size.x;
	                    position.y -= size.y;
	                    break;
	                case $.OverlayPlacement.BOTTOM:
	                    position.x -= size.x / 2;
	                    position.y -= size.y;
	                    break;
	                case $.OverlayPlacement.BOTTOM_LEFT:
	                    position.y -= size.y;
	                    break;
	                case $.OverlayPlacement.LEFT:
	                    position.y -= size.y / 2;
	                    break;
	                default:
	                case $.OverlayPlacement.CENTER:
	                    position.x -= size.x / 2;
	                    position.y -= size.y / 2;
	                    break;
	            }
	        },

	        /**
	         * @function
	         */
	        destroy: function() {
	            var element = this.element,
	                style   = this.style;

	            if ( element.parentNode ) {
	                element.parentNode.removeChild( element );
	                //this should allow us to preserve overlays when required between
	                //pages
	                if ( element.prevElementParent ) {
	                    style.display = 'none';
	                    //element.prevElementParent.insertBefore(
	                    //    element,
	                    //    element.prevNextSibling
	                    //);
	                    document.body.appendChild( element );
	                }
	            }

	            // clear the onDraw callback
	            this.onDraw = null;

	            style.top = "";
	            style.left = "";
	            style.position = "";

	            if ( this.scales ) {
	                style.width = "";
	                style.height = "";
	            }
	        },

	        /**
	         * @function
	         * @param {Element} container
	         */
	        drawHTML: function( container, viewport ) {
	            var element = this.element,
	                style   = this.style,
	                scales  = this.scales,
	                degrees  = viewport.degrees,
	                position = viewport.pixelFromPoint(
	                    this.bounds.getTopLeft(),
	                    true
	                ),
	                size,
	                overlayCenter;

	            if ( element.parentNode != container ) {
	                //save the source parent for later if we need it
	                element.prevElementParent  = element.parentNode;
	                element.prevNextSibling    = element.nextSibling;
	                container.appendChild( element );
	                this.size = $.getElementSize( element );
	            }

	            if ( scales ) {
	                size = viewport.deltaPixelsFromPoints(
	                    this.bounds.getSize(),
	                    true
	                );
	            } else if ( this.checkResize ) {
	                size = $.getElementSize( element );
	            } else {
	                size = this.size;
	            }

	            this.position = position;
	            this.size     = size;

	            this.adjust( position, size );

	            position = position.apply( Math.round );
	            size     = size.apply( Math.round );

	            // rotate the position of the overlay
	            // TODO only rotate overlays if in canvas mode
	            // TODO replace the size rotation with CSS3 transforms
	            // TODO add an option to overlays to not rotate with the image
	            // Currently only rotates position and size
	            if( degrees !== 0 && this.scales ) {
	                overlayCenter = new $.Point( size.x / 2, size.y / 2 );

	                var drawerCenter = new $.Point(
	                    viewport.viewer.drawer.canvas.width / 2,
	                    viewport.viewer.drawer.canvas.height / 2
	                );
	                position = position.plus( overlayCenter ).rotate(
	                    degrees,
	                    drawerCenter
	                ).minus( overlayCenter );

	                size = size.rotate( degrees, new $.Point( 0, 0 ) );
	                size = new $.Point( Math.abs( size.x ), Math.abs( size.y ) );
	            }

	            // call the onDraw callback if it exists to allow one to overwrite
	            // the drawing/positioning/sizing of the overlay
	            if ( this.onDraw ) {
	                this.onDraw( position, size, element );
	            } else {
	                style.left     = position.x + "px";
	                style.top      = position.y + "px";
	                style.position = "absolute";

	                if (style.display != 'none') {
	                    style.display  = 'block';
	                }

	                if ( scales ) {
	                    style.width  = size.x + "px";
	                    style.height = size.y + "px";
	                }
	            }
	        },

	        /**
	         * @function
	         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location
	         * @param {OpenSeadragon.OverlayPlacement} position
	         */
	        update: function( location, placement ) {
	            this.scales     = location instanceof $.Rect;
	            this.bounds     = new $.Rect(
	                location.x,
	                location.y,
	                location.width,
	                location.height
	            );
	            // rects are always top-left
	            this.placement  = location instanceof $.Point ?
	                placement :
	                $.OverlayPlacement.TOP_LEFT;
	        }

	    };

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Drawer
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class Drawer
	 * @memberof OpenSeadragon
	 * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
	 * @param {Object} options - Options for this Drawer.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this Drawer.
	 * @param {OpenSeadragon.Viewport} options.viewport - Reference to Viewer viewport.
	 * @param {Element} options.element - Parent element.
	 * @param {Number} [options.debugGridColor] - See debugGridColor in {@link OpenSeadragon.Options} for details.
	 */
	$.Drawer = function( options ) {

	    $.console.assert( options.viewer, "[Drawer] options.viewer is required" );

	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    var args  = arguments;

	    if( !$.isPlainObject( options ) ){
	        options = {
	            source:     args[ 0 ], // Reference to Viewer tile source.
	            viewport:   args[ 1 ], // Reference to Viewer viewport.
	            element:    args[ 2 ]  // Parent element.
	        };
	    }

	    $.console.assert( options.viewport, "[Drawer] options.viewport is required" );
	    $.console.assert( options.element, "[Drawer] options.element is required" );

	    if ( options.source ) {
	        $.console.error( "[Drawer] options.source is no longer accepted; use TiledImage instead" );
	    }

	    this.viewer = options.viewer;
	    this.viewport = options.viewport;
	    this.debugGridColor = options.debugGridColor || $.DEFAULT_SETTINGS.debugGridColor;
	    if (options.opacity) {
	        $.console.error( "[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead" );
	    }

	    this.useCanvas  = $.supportsCanvas && ( this.viewer ? this.viewer.useCanvas : true );
	    /**
	     * The parent element of this Drawer instance, passed in when the Drawer was created.
	     * The parent of {@link OpenSeadragon.Drawer#canvas}.
	     * @member {Element} container
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.container  = $.getElement( options.element );
	    /**
	     * A &lt;canvas&gt; element if the browser supports them, otherwise a &lt;div&gt; element.
	     * Child element of {@link OpenSeadragon.Drawer#container}.
	     * @member {Element} canvas
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.canvas     = $.makeNeutralElement( this.useCanvas ? "canvas" : "div" );
	    /**
	     * 2d drawing context for {@link OpenSeadragon.Drawer#canvas} if it's a &lt;canvas&gt; element, otherwise null.
	     * @member {Object} context
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.context    = this.useCanvas ? this.canvas.getContext( "2d" ) : null;

	    /**
	     * Sketch canvas used to temporarily draw tiles which cannot be drawn directly
	     * to the main canvas due to opacity. Lazily initialized.
	     */
	    this.sketchCanvas = null;
	    this.sketchContext = null;

	    /**
	     * @member {Element} element
	     * @memberof OpenSeadragon.Drawer#
	     * @deprecated Alias for {@link OpenSeadragon.Drawer#container}.
	     */
	    this.element    = this.container;

	    // We force our container to ltr because our drawing math doesn't work in rtl.
	    // This issue only affects our canvas renderer, but we do it always for consistency.
	    // Note that this means overlays you want to be rtl need to be explicitly set to rtl.
	    this.container.dir = 'ltr';

	    // check canvas available width and height, set canvas width and height such that the canvas backing store is set to the proper pixel density
	    if (this.useCanvas) {
	        var viewportSize = this._calculateCanvasSize();
	        this.canvas.width = viewportSize.x;
	        this.canvas.height = viewportSize.y;
	    }

	    this.canvas.style.width     = "100%";
	    this.canvas.style.height    = "100%";
	    this.canvas.style.position  = "absolute";
	    $.setElementOpacity( this.canvas, this.opacity, true );

	    // explicit left-align
	    this.container.style.textAlign = "left";
	    this.container.appendChild( this.canvas );
	};

	$.Drawer.prototype = /** @lends OpenSeadragon.Drawer.prototype */{
	    // deprecated
	    addOverlay: function( element, location, placement, onDraw ) {
	        $.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead.");
	        this.viewer.addOverlay( element, location, placement, onDraw );
	        return this;
	    },

	    // deprecated
	    updateOverlay: function( element, location, placement ) {
	        $.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.");
	        this.viewer.updateOverlay( element, location, placement );
	        return this;
	    },

	    // deprecated
	    removeOverlay: function( element ) {
	        $.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.");
	        this.viewer.removeOverlay( element );
	        return this;
	    },

	    // deprecated
	    clearOverlays: function() {
	        $.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.");
	        this.viewer.clearOverlays();
	        return this;
	    },

	    /**
	     * Set the opacity of the drawer.
	     * @param {Number} opacity
	     * @return {OpenSeadragon.Drawer} Chainable.
	     */
	    setOpacity: function( opacity ) {
	        $.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");
	        var world = this.viewer.world;
	        for (var i = 0; i < world.getItemCount(); i++) {
	            world.getItemAt( i ).setOpacity( opacity );
	        }
	        return this;
	    },

	    /**
	     * Get the opacity of the drawer.
	     * @returns {Number}
	     */
	    getOpacity: function() {
	        $.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");
	        var world = this.viewer.world;
	        var maxOpacity = 0;
	        for (var i = 0; i < world.getItemCount(); i++) {
	            var opacity = world.getItemAt( i ).getOpacity();
	            if ( opacity > maxOpacity ) {
	                maxOpacity = opacity;
	            }
	        }
	        return maxOpacity;
	    },

	    // deprecated
	    needsUpdate: function() {
	        $.console.error( "[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead." );
	        return this.viewer.world.needsDraw();
	    },

	    // deprecated
	    numTilesLoaded: function() {
	        $.console.error( "[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead." );
	        return this.viewer.tileCache.numTilesLoaded();
	    },

	    // deprecated
	    reset: function() {
	        $.console.error( "[Drawer.reset] this function is deprecated. Use World.resetItems instead." );
	        this.viewer.world.resetItems();
	        return this;
	    },

	    // deprecated
	    update: function() {
	        $.console.error( "[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead." );
	        this.clear();
	        this.viewer.world.draw();
	        return this;
	    },

	    /**
	     * @return {Boolean} True if rotation is supported.
	     */
	    canRotate: function() {
	        return this.useCanvas;
	    },

	    /**
	     * Destroy the drawer (unload current loaded tiles)
	     */
	    destroy: function() {
	        //force unloading of current canvas (1x1 will be gc later, trick not necessarily needed)
	        this.canvas.width  = 1;
	        this.canvas.height = 1;
	        this.sketchCanvas = null;
	        this.sketchContext = null;
	    },

	    /**
	     * Clears the Drawer so it's ready to draw another frame.
	     */
	    clear: function() {
	        this.canvas.innerHTML = "";
	        if ( this.useCanvas ) {
	            var viewportSize = this._calculateCanvasSize();
	            if( this.canvas.width != viewportSize.x ||
	                this.canvas.height != viewportSize.y ) {
	                this.canvas.width = viewportSize.x;
	                this.canvas.height = viewportSize.y;
	                if ( this.sketchCanvas !== null ) {
	                    this.sketchCanvas.width = this.canvas.width;
	                    this.sketchCanvas.height = this.canvas.height;
	                }
	            }
	            this._clear();
	        }
	    },

	    _clear: function ( useSketch ) {
	        if ( !this.useCanvas ) {
	            return;
	        }
	        var context = this._getContext( useSketch );
	        var canvas = context.canvas;
	        context.clearRect( 0, 0, canvas.width, canvas.height );
	    },

	    /**
	     * Translates from OpenSeadragon viewer rectangle to drawer rectangle.
	     * @param {OpenSeadragon.Rect} rectangle - The rectangle in viewport coordinate system.
	     * @return {OpenSeadragon.Rect} Rectangle in drawer coordinate system.
	     */
	    viewportToDrawerRectangle: function(rectangle) {
	        var topLeft = this.viewport.pixelFromPoint(rectangle.getTopLeft(), true);
	        var size = this.viewport.deltaPixelsFromPoints(rectangle.getSize(), true);

	        return new $.Rect(
	            topLeft.x * $.pixelDensityRatio,
	            topLeft.y * $.pixelDensityRatio,
	            size.x    * $.pixelDensityRatio,
	            size.y    * $.pixelDensityRatio
	        );
	    },

	    /**
	     * Draws the given tile.
	     * @param {OpenSeadragon.Tile} tile - The tile to draw.
	     * @param {Function} drawingHandler - Method for firing the drawing event if using canvas.
	     * drawingHandler({context, tile, rendered})
	     * @param {Boolean} useSketch - Whether to use the sketch canvas or not.
	     * where <code>rendered</code> is the context with the pre-drawn image.
	     */
	    drawTile: function( tile, drawingHandler, useSketch ) {
	        $.console.assert(tile, '[Drawer.drawTile] tile is required');
	        $.console.assert(drawingHandler, '[Drawer.drawTile] drawingHandler is required');

	        if ( this.useCanvas ) {
	            var context = this._getContext( useSketch );
	            // TODO do this in a more performant way
	            // specifically, don't save,rotate,restore every time we draw a tile
	            if( this.viewport.degrees !== 0 ) {
	                this._offsetForRotation( tile, this.viewport.degrees, useSketch );
	                tile.drawCanvas( context, drawingHandler );
	                this._restoreRotationChanges( tile, useSketch );
	            } else {
	                tile.drawCanvas( context, drawingHandler );
	            }
	        } else {
	            tile.drawHTML( this.canvas );
	        }
	    },

	    _getContext: function( useSketch ) {
	        var context = this.context;
	        if ( useSketch ) {
	            if (this.sketchCanvas === null) {
	                this.sketchCanvas = document.createElement( "canvas" );
	                this.sketchCanvas.width = this.canvas.width;
	                this.sketchCanvas.height = this.canvas.height;
	                this.sketchContext = this.sketchCanvas.getContext( "2d" );
	            }
	            context = this.sketchContext;
	        }
	        return context;
	    },

	    // private
	    saveContext: function( useSketch ) {
	        if (!this.useCanvas) {
	            return;
	        }

	        this._getContext( useSketch ).save();
	    },

	    // private
	    restoreContext: function( useSketch ) {
	        if (!this.useCanvas) {
	            return;
	        }

	        this._getContext( useSketch ).restore();
	    },

	    // private
	    setClip: function(rect, useSketch) {
	        if (!this.useCanvas) {
	            return;
	        }

	        var context = this._getContext( useSketch );
	        context.beginPath();
	        context.rect(rect.x, rect.y, rect.width, rect.height);
	        context.clip();
	    },

	    // private
	    drawRectangle: function(rect, fillStyle, useSketch) {
	        if (!this.useCanvas) {
	            return;
	        }

	        var context = this._getContext( useSketch );
	        context.save();
	        context.fillStyle = fillStyle;
	        context.fillRect(rect.x, rect.y, rect.width, rect.height);
	        context.restore();
	    },

	    /**
	     * Blends the sketch canvas in the main canvas.
	     * @param {Float} opacity The opacity of the blending.
	     * @returns {undefined}
	     */
	    blendSketch: function(opacity) {
	        if (!this.useCanvas || !this.sketchCanvas) {
	            return;
	        }

	        this.context.save();
	        this.context.globalAlpha = opacity;
	        this.context.drawImage(this.sketchCanvas, 0, 0);
	        this.context.restore();
	    },

	    // private
	    drawDebugInfo: function( tile, count, i ){
	        if ( !this.useCanvas ) {
	            return;
	        }

	        var context = this.context;
	        context.save();
	        context.lineWidth = 2 * $.pixelDensityRatio;
	        context.font = 'small-caps bold ' + (13 * $.pixelDensityRatio) + 'px arial';
	        context.strokeStyle = this.debugGridColor;
	        context.fillStyle = this.debugGridColor;

	        if ( this.viewport.degrees !== 0 ) {
	            this._offsetForRotation( tile, this.viewport.degrees );
	        }

	        context.strokeRect(
	            tile.position.x * $.pixelDensityRatio,
	            tile.position.y * $.pixelDensityRatio,
	            tile.size.x * $.pixelDensityRatio,
	            tile.size.y * $.pixelDensityRatio
	        );

	        var tileCenterX = (tile.position.x + (tile.size.x / 2)) * $.pixelDensityRatio;
	        var tileCenterY = (tile.position.y + (tile.size.y / 2)) * $.pixelDensityRatio;

	        // Rotate the text the right way around.
	        context.translate( tileCenterX, tileCenterY );
	        context.rotate( Math.PI / 180 * -this.viewport.degrees );
	        context.translate( -tileCenterX, -tileCenterY );

	        if( tile.x === 0 && tile.y === 0 ){
	            context.fillText(
	                "Zoom: " + this.viewport.getZoom(),
	                tile.position.x * $.pixelDensityRatio,
	                (tile.position.y - 30) * $.pixelDensityRatio
	            );
	            context.fillText(
	                "Pan: " + this.viewport.getBounds().toString(),
	                tile.position.x * $.pixelDensityRatio,
	                (tile.position.y - 20) * $.pixelDensityRatio
	            );
	        }
	        context.fillText(
	            "Level: " + tile.level,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 20) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Column: " + tile.x,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 30) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Row: " + tile.y,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 40) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Order: " + i + " of " + count,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 50) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Size: " + tile.size.toString(),
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 60) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Position: " + tile.position.toString(),
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 70) * $.pixelDensityRatio
	        );

	        if ( this.viewport.degrees !== 0 ) {
	            this._restoreRotationChanges( tile );
	        }
	        context.restore();
	    },

	    // private
	    debugRect: function(rect) {
	        if ( this.useCanvas ) {
	            var context = this.context;
	            context.save();
	            context.lineWidth = 2 * $.pixelDensityRatio;
	            context.strokeStyle = this.debugGridColor;
	            context.fillStyle = this.debugGridColor;

	            context.strokeRect(
	                rect.x * $.pixelDensityRatio,
	                rect.y * $.pixelDensityRatio,
	                rect.width * $.pixelDensityRatio,
	                rect.height * $.pixelDensityRatio
	            );

	            context.restore();
	        }
	    },

	    // private
	    _offsetForRotation: function( tile, degrees, useSketch ){
	        var cx = this.canvas.width / 2,
	            cy = this.canvas.height / 2;

	        var context = this._getContext( useSketch );
	        context.save();

	        context.translate(cx, cy);
	        context.rotate( Math.PI / 180 * degrees);
	        context.translate(-cx, -cy);
	    },

	    // private
	    _restoreRotationChanges: function( tile, useSketch ){
	        var context = this._getContext( useSketch );
	        context.restore();
	    },

	    // private
	    _calculateCanvasSize: function() {
	        var pixelDensityRatio = $.pixelDensityRatio;
	        var viewportSize = this.viewport.getContainerSize();
	        return {
	            x: viewportSize.x * pixelDensityRatio,
	            y: viewportSize.y * pixelDensityRatio
	        };
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - Viewport
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){


	/**
	 * @class Viewport
	 * @memberof OpenSeadragon
	 * @classdesc Handles coordinate-related functionality (zoom, pan, rotation, etc.)
	 * for an {@link OpenSeadragon.Viewer}.
	 * @param {Object} options - Options for this Viewport.
	 * @param {Object} [options.margins] - See viewportMargins in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.springStiffness] - See springStiffness in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.animationTime] - See animationTime in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomImageRatio] - See minZoomImageRatio in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.maxZoomPixelRatio] - See maxZoomPixelRatio in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.visibilityRatio] - See visibilityRatio in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapHorizontal] - See wrapHorizontal in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapVertical] - See wrapVertical in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.defaultZoomLevel] - See defaultZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomLevel] - See minZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.maxZoomLevel] - See maxZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.degrees] - See degrees in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.homeFillsViewer] - See homeFillsViewer in {@link OpenSeadragon.Options}.
	 */
	$.Viewport = function( options ) {

	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    var args = arguments;
	    if(  args.length && args[ 0 ] instanceof $.Point ){
	        options = {
	            containerSize:  args[ 0 ],
	            contentSize:    args[ 1 ],
	            config:         args[ 2 ]
	        };
	    }

	    //options.config and the general config argument are deprecated
	    //in favor of the more direct specification of optional settings
	    //being passed directly on the options object
	    if ( options.config ){
	        $.extend( true, options, options.config );
	        delete options.config;
	    }

	    this._margins = $.extend({
	        left: 0,
	        top: 0,
	        right: 0,
	        bottom: 0
	    }, options.margins || {});

	    delete options.margins;

	    $.extend( true, this, {

	        //required settings
	        containerSize:      null,
	        contentSize:        null,

	        //internal state properties
	        zoomPoint:          null,
	        viewer:           null,

	        //configurable options
	        springStiffness:    $.DEFAULT_SETTINGS.springStiffness,
	        animationTime:      $.DEFAULT_SETTINGS.animationTime,
	        minZoomImageRatio:  $.DEFAULT_SETTINGS.minZoomImageRatio,
	        maxZoomPixelRatio:  $.DEFAULT_SETTINGS.maxZoomPixelRatio,
	        visibilityRatio:    $.DEFAULT_SETTINGS.visibilityRatio,
	        wrapHorizontal:     $.DEFAULT_SETTINGS.wrapHorizontal,
	        wrapVertical:       $.DEFAULT_SETTINGS.wrapVertical,
	        defaultZoomLevel:   $.DEFAULT_SETTINGS.defaultZoomLevel,
	        minZoomLevel:       $.DEFAULT_SETTINGS.minZoomLevel,
	        maxZoomLevel:       $.DEFAULT_SETTINGS.maxZoomLevel,
	        degrees:            $.DEFAULT_SETTINGS.degrees,
	        homeFillsViewer:    $.DEFAULT_SETTINGS.homeFillsViewer

	    }, options );

	    this._updateContainerInnerSize();

	    this.centerSpringX = new $.Spring({
	        initial: 0,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });
	    this.centerSpringY = new $.Spring({
	        initial: 0,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });
	    this.zoomSpring    = new $.Spring({
	        exponential: true,
	        initial: 1,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });

	    this._oldCenterX = this.centerSpringX.current.value;
	    this._oldCenterY = this.centerSpringY.current.value;
	    this._oldZoom    = this.zoomSpring.current.value;

	    if (this.contentSize) {
	        this.resetContentSize( this.contentSize );
	    } else {
	        this.setHomeBounds(new $.Rect(0, 0, 1, 1), 1);
	    }

	    this.goHome( true );
	    this.update();
	};

	$.Viewport.prototype = /** @lends OpenSeadragon.Viewport.prototype */{
	    /**
	     * Updates the viewport's home bounds and constraints for the given content size.
	     * @function
	     * @param {OpenSeadragon.Point} contentSize - size of the content in content units
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:reset-size
	     */
	    resetContentSize: function( contentSize ){
	        $.console.assert(contentSize, "[Viewport.resetContentSize] contentSize is required");
	        $.console.assert(contentSize instanceof $.Point, "[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point");
	        $.console.assert(contentSize.x > 0, "[Viewport.resetContentSize] contentSize.x must be greater than 0");
	        $.console.assert(contentSize.y > 0, "[Viewport.resetContentSize] contentSize.y must be greater than 0");

	        this.setHomeBounds(new $.Rect(0, 0, 1, contentSize.y / contentSize.x), contentSize.x);
	        return this;
	    },

	    /**
	     * Updates the viewport's home bounds and constraints.
	     * @function
	     * @param {OpenSeadragon.Rect} bounds - the new bounds in viewport coordinates
	     * @param {Number} contentFactor - how many content units per viewport unit
	     * @fires OpenSeadragon.Viewer.event:reset-size
	     */
	    setHomeBounds: function(bounds, contentFactor) {
	        $.console.assert(bounds, "[Viewport.setHomeBounds] bounds is required");
	        $.console.assert(bounds instanceof $.Rect, "[Viewport.setHomeBounds] bounds must be an OpenSeadragon.Rect");
	        $.console.assert(bounds.width > 0, "[Viewport.setHomeBounds] bounds.width must be greater than 0");
	        $.console.assert(bounds.height > 0, "[Viewport.setHomeBounds] bounds.height must be greater than 0");

	        this.homeBounds = bounds.clone();
	        this.contentSize = this.homeBounds.getSize().times(contentFactor);
	        this.contentAspectX = this.contentSize.x / this.contentSize.y;
	        this.contentAspectY = this.contentSize.y / this.contentSize.x;

	        if( this.viewer ){
	            /**
	             * Raised when the viewer's content size or home bounds are reset
	             * (see {@link OpenSeadragon.Viewport#resetContentSize},
	             * {@link OpenSeadragon.Viewport#setHomeBounds}).
	             *
	             * @event reset-size
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} contentSize
	             * @property {OpenSeadragon.Rect} homeBounds
	             * @property {Number} contentFactor
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'reset-size', {
	                contentSize: this.contentSize.clone(),
	                contentFactor: contentFactor,
	                homeBounds: this.homeBounds.clone()
	            });
	        }
	    },

	    /**
	     * @function
	     */
	    getHomeZoom: function() {
	        if( this.defaultZoomLevel ){
	            return this.defaultZoomLevel;
	        } else {
	            var aspectFactor =
	                this.contentAspectX / this.getAspectRatio();

	            var output;
	            if( this.homeFillsViewer ){ // fill the viewer and clip the image
	                output = ( aspectFactor >= 1) ?
	                    aspectFactor :
	                    1;
	            } else {
	                output = ( aspectFactor >= 1 ) ?
	                    1 :
	                    aspectFactor;
	            }

	            return output / this.homeBounds.width;
	        }
	    },

	    /**
	     * @function
	     */
	    getHomeBounds: function() {
	        var center = this.homeBounds.getCenter( ),
	            width  = 1.0 / this.getHomeZoom( ),
	            height = width / this.getAspectRatio();

	        return new $.Rect(
	            center.x - ( width / 2.0 ),
	            center.y - ( height / 2.0 ),
	            width,
	            height
	        );
	    },

	    /**
	     * @function
	     * @param {Boolean} immediately
	     * @fires OpenSeadragon.Viewer.event:home
	     */
	    goHome: function( immediately ) {
	        if( this.viewer ){
	            /**
	             * Raised when the "home" operation occurs (see {@link OpenSeadragon.Viewport#goHome}).
	             *
	             * @event home
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'home', {
	                immediately: immediately
	            });
	        }
	        return this.fitBounds( this.getHomeBounds(), immediately );
	    },

	    /**
	     * @function
	     */
	    getMinZoom: function() {
	        var homeZoom = this.getHomeZoom(),
	            zoom = this.minZoomLevel ?
	            this.minZoomLevel :
	                this.minZoomImageRatio * homeZoom;

	        return zoom;
	    },

	    /**
	     * @function
	     */
	    getMaxZoom: function() {
	        var zoom = this.maxZoomLevel;
	        if (!zoom) {
	            zoom = this.contentSize.x * this.maxZoomPixelRatio / this._containerInnerSize.x;
	            zoom /= this.homeBounds.width;
	        }

	        return Math.max( zoom, this.getHomeZoom() );
	    },

	    /**
	     * @function
	     */
	    getAspectRatio: function() {
	        return this._containerInnerSize.x / this._containerInnerSize.y;
	    },

	    /**
	     * @function
	     * @returns {OpenSeadragon.Point} The size of the container, in screen coordinates.
	     */
	    getContainerSize: function() {
	        return new $.Point(
	            this.containerSize.x,
	            this.containerSize.y
	        );
	    },

	    /**
	     * @function
	     * The margins push the "home" region in from the sides by the specified amounts.
	     * @returns {Object} Properties (Numbers, in screen coordinates): left, top, right, bottom.
	     */
	    getMargins: function() {
	        return $.extend({}, this._margins); // Make a copy so we are not returning our original
	    },

	    /**
	     * @function
	     * The margins push the "home" region in from the sides by the specified amounts.
	     * @param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.
	     */
	    setMargins: function(margins) {
	        $.console.assert($.type(margins) === 'object', '[Viewport.setMargins] margins must be an object');

	        this._margins = $.extend({
	            left: 0,
	            top: 0,
	            right: 0,
	            bottom: 0
	        }, margins);

	        this._updateContainerInnerSize();
	        this.viewer.forceRedraw();
	    },

	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.
	     */
	    getBounds: function( current ) {
	        var center = this.getCenter( current ),
	            width  = 1.0 / this.getZoom( current ),
	            height = width / this.getAspectRatio();

	        return new $.Rect(
	            center.x - ( width / 2.0 ),
	            center.y - ( height / 2.0 ),
	            width,
	            height
	        );
	    },

	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,
	     * including the space taken by margins, in viewport coordinates.
	     */
	    getBoundsWithMargins: function( current ) {
	        var bounds = this.getBounds(current);
	        var factor = this._containerInnerSize.x * this.getZoom(current);
	        bounds.x -= this._margins.left / factor;
	        bounds.y -= this._margins.top / factor;
	        bounds.width += (this._margins.left + this._margins.right) / factor;
	        bounds.height += (this._margins.top + this._margins.bottom) / factor;
	        return bounds;
	    },

	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    getCenter: function( current ) {
	        var centerCurrent = new $.Point(
	                this.centerSpringX.current.value,
	                this.centerSpringY.current.value
	            ),
	            centerTarget = new $.Point(
	                this.centerSpringX.target.value,
	                this.centerSpringY.target.value
	            ),
	            oldZoomPixel,
	            zoom,
	            width,
	            height,
	            bounds,
	            newZoomPixel,
	            deltaZoomPixels,
	            deltaZoomPoints;

	        if ( current ) {
	            return centerCurrent;
	        } else if ( !this.zoomPoint ) {
	            return centerTarget;
	        }

	        oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);

	        zoom    = this.getZoom();
	        width   = 1.0 / zoom;
	        height  = width / this.getAspectRatio();
	        bounds  = new $.Rect(
	            centerCurrent.x - width / 2.0,
	            centerCurrent.y - height / 2.0,
	            width,
	            height
	        );

	        newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds);
	        deltaZoomPixels = newZoomPixel.minus( oldZoomPixel );
	        deltaZoomPoints = deltaZoomPixels.divide( this._containerInnerSize.x * zoom );

	        return centerTarget.plus( deltaZoomPoints );
	    },

	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    getZoom: function( current ) {
	        if ( current ) {
	            return this.zoomSpring.current.value;
	        } else {
	            return this.zoomSpring.target.value;
	        }
	    },

	    /**
	     * @function
	     * @private
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Rect} constrained bounds.
	     */
	    _applyBoundaryConstraints: function( bounds, immediately ) {
	        var dx = 0,
	            dy = 0,
	            newBounds = new $.Rect(
	                bounds.x,
	                bounds.y,
	                bounds.width,
	                bounds.height
	            );

	        var horizontalThreshold = this.visibilityRatio * newBounds.width;
	        var verticalThreshold   = this.visibilityRatio * newBounds.height;

	        if ( this.wrapHorizontal ) {
	            //do nothing
	        } else {
	            var thresholdLeft = newBounds.x + (newBounds.width - horizontalThreshold);
	            if (this.homeBounds.x > thresholdLeft) {
	                dx = this.homeBounds.x - thresholdLeft;
	            }

	            var homeRight = this.homeBounds.x + this.homeBounds.width;
	            var thresholdRight = newBounds.x + horizontalThreshold;
	            if (homeRight < thresholdRight) {
	                var newDx = homeRight - thresholdRight;
	                if (dx) {
	                    dx = (dx + newDx) / 2;
	                } else {
	                    dx = newDx;
	                }
	            }
	        }

	        if ( this.wrapVertical ) {
	            //do nothing
	        } else {
	            var thresholdTop = newBounds.y + (newBounds.height - verticalThreshold);
	            if (this.homeBounds.y > thresholdTop) {
	                dy = this.homeBounds.y - thresholdTop;
	            }

	            var homeBottom = this.homeBounds.y + this.homeBounds.height;
	            var thresholdBottom = newBounds.y + verticalThreshold;
	            if (homeBottom < thresholdBottom) {
	                var newDy = homeBottom - thresholdBottom;
	                if (dy) {
	                    dy = (dy + newDy) / 2;
	                } else {
	                    dy = newDy;
	                }
	            }
	        }

	        if ( dx || dy ) {
	            newBounds.x += dx;
	            newBounds.y += dy;
	        }

	        if( this.viewer ){
	            /**
	             * Raised when the viewport constraints are applied (see {@link OpenSeadragon.Viewport#applyConstraints}).
	             *
	             * @event constrain
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'constrain', {
	                immediately: immediately
	            });
	        }

	        return newBounds;
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:constrain
	     */
	    applyConstraints: function( immediately ) {
	        var actualZoom = this.getZoom(),
	            constrainedZoom = Math.max(
	                Math.min( actualZoom, this.getMaxZoom() ),
	                this.getMinZoom()
	            ),
	            bounds,
	            constrainedBounds;

	        if ( actualZoom != constrainedZoom ) {
	            this.zoomTo( constrainedZoom, this.zoomPoint, immediately );
	        }

	        bounds = this.getBounds();

	        constrainedBounds = this._applyBoundaryConstraints( bounds, immediately );

	        if ( bounds.x !== constrainedBounds.x || bounds.y !== constrainedBounds.y || immediately ){
	            this.fitBounds( constrainedBounds, immediately );
	        }

	        return this;
	    },

	    /**
	     * @function
	     * @param {Boolean} immediately
	     */
	    ensureVisible: function( immediately ) {
	        return this.applyConstraints( immediately );
	    },

	    /**
	     * @function
	     * @private
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Object} options (immediately=false, constraints=false)
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    _fitBounds: function( bounds, options ) {
	        options = options || {};
	        var immediately = options.immediately || false;
	        var constraints = options.constraints || false;

	        var aspect = this.getAspectRatio(),
	            center = bounds.getCenter(),
	            newBounds = new $.Rect(
	                bounds.x,
	                bounds.y,
	                bounds.width,
	                bounds.height
	            ),
	            oldBounds,
	            oldZoom,
	            newZoom,
	            referencePoint,
	            newBoundsAspectRatio,
	            newConstrainedZoom;

	        if ( newBounds.getAspectRatio() >= aspect ) {
	            newBounds.height = bounds.width / aspect;
	            newBounds.y      = center.y - newBounds.height / 2;
	        } else {
	            newBounds.width = bounds.height * aspect;
	            newBounds.x     = center.x - newBounds.width / 2;
	        }

	        if ( constraints ) {
	            newBoundsAspectRatio = newBounds.getAspectRatio();
	        }

	        this.panTo( this.getCenter( true ), true );
	        this.zoomTo( this.getZoom( true ), null, true );

	        oldBounds = this.getBounds();
	        oldZoom   = this.getZoom();
	        newZoom   = 1.0 / newBounds.width;

	        if ( constraints ) {
	            newConstrainedZoom = Math.max(
	                Math.min(newZoom, this.getMaxZoom() ),
	                this.getMinZoom()
	            );

	            if (newZoom !== newConstrainedZoom) {
	                newZoom = newConstrainedZoom;
	                newBounds.width = 1.0 / newZoom;
	                newBounds.x = center.x - newBounds.width / 2;
	                newBounds.height = newBounds.width / newBoundsAspectRatio;
	                newBounds.y = center.y - newBounds.height / 2;
	            }

	            newBounds = this._applyBoundaryConstraints( newBounds, immediately );
	            center = newBounds.getCenter();
	        }

	        if (immediately) {
	            this.panTo( center, true );
	            return this.zoomTo(newZoom, null, true);
	        }

	        if (Math.abs(newZoom - oldZoom) < 0.00000001 ||
	                Math.abs(newBounds.width - oldBounds.width) < 0.00000001) {
	            return this.panTo( center, immediately );
	        }

	        referencePoint = oldBounds.getTopLeft().times(
	            this._containerInnerSize.x / oldBounds.width
	        ).minus(
	            newBounds.getTopLeft().times(
	                this._containerInnerSize.x / newBounds.width
	            )
	        ).divide(
	            this._containerInnerSize.x / oldBounds.width -
	            this._containerInnerSize.x / newBounds.width
	        );

	        return this.zoomTo( newZoom, referencePoint, immediately );
	    },

	    /**
	     * @function
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitBounds: function( bounds, immediately ) {
	        return this._fitBounds( bounds, {
	            immediately: immediately,
	            constraints: false
	        } );
	    },

	    /**
	     * @function
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitBoundsWithConstraints: function( bounds, immediately ) {
	        return this._fitBounds( bounds, {
	            immediately: immediately,
	            constraints: true
	        } );
	    },

	    /**
	     * Zooms so the image just fills the viewer vertically.
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitVertically: function( immediately ) {
	        var box = new $.Rect(this.homeBounds.x + (this.homeBounds.width / 2), this.homeBounds.y,
	            0, this.homeBounds.height);

	        return this.fitBounds( box, immediately );
	    },

	    /**
	     * Zooms so the image just fills the viewer horizontally.
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitHorizontally: function( immediately ) {
	        var box = new $.Rect(this.homeBounds.x, this.homeBounds.y + (this.homeBounds.height / 2),
	            this.homeBounds.width, 0);

	        return this.fitBounds( box, immediately );
	    },


	    /**
	     * @function
	     * @param {OpenSeadragon.Point} delta
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pan
	     */
	    panBy: function( delta, immediately ) {
	        var center = new $.Point(
	            this.centerSpringX.target.value,
	            this.centerSpringY.target.value
	        );
	        delta = delta.rotate( -this.degrees, new $.Point( 0, 0 ) );
	        return this.panTo( center.plus( delta ), immediately );
	    },

	    /**
	     * @function
	     * @param {OpenSeadragon.Point} center
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pan
	     */
	    panTo: function( center, immediately ) {
	        if ( immediately ) {
	            this.centerSpringX.resetTo( center.x );
	            this.centerSpringY.resetTo( center.y );
	        } else {
	            this.centerSpringX.springTo( center.x );
	            this.centerSpringY.springTo( center.y );
	        }

	        if( this.viewer ){
	            /**
	             * Raised when the viewport is panned (see {@link OpenSeadragon.Viewport#panBy} and {@link OpenSeadragon.Viewport#panTo}).
	             *
	             * @event pan
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} center
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'pan', {
	                center: center,
	                immediately: immediately
	            });
	        }

	        return this;
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:zoom
	     */
	    zoomBy: function( factor, refPoint, immediately ) {
	        if( refPoint instanceof $.Point && !isNaN( refPoint.x ) && !isNaN( refPoint.y ) ) {
	            refPoint = refPoint.rotate(
	                -this.degrees,
	                new $.Point( this.centerSpringX.target.value, this.centerSpringY.target.value )
	            );
	        }
	        return this.zoomTo( this.zoomSpring.target.value * factor, refPoint, immediately );
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:zoom
	     */
	    zoomTo: function( zoom, refPoint, immediately ) {

	        this.zoomPoint = refPoint instanceof $.Point &&
	            !isNaN(refPoint.x) &&
	            !isNaN(refPoint.y) ?
	            refPoint :
	            null;

	        if ( immediately ) {
	            this.zoomSpring.resetTo( zoom );
	        } else {
	            this.zoomSpring.springTo( zoom );
	        }

	        if( this.viewer ){
	            /**
	             * Raised when the viewport zoom level changes (see {@link OpenSeadragon.Viewport#zoomBy} and {@link OpenSeadragon.Viewport#zoomTo}).
	             *
	             * @event zoom
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Number} zoom
	             * @property {OpenSeadragon.Point} refPoint
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'zoom', {
	                zoom: zoom,
	                refPoint: refPoint,
	                immediately: immediately
	            });
	        }

	        return this;
	    },

	    /**
	     * Rotates this viewport to the angle specified.
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    setRotation: function( degrees ) {
	        if( !( this.viewer && this.viewer.drawer.canRotate() ) ) {
	            return this;
	        }

	        degrees = ( degrees + 360 ) % 360;
	        this.degrees = degrees;
	        this.viewer.forceRedraw();

	        /**
	         * Raised when rotation has been changed.
	         *
	         * @event rotate
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Number} degrees - The number of degrees the rotation was set to.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        if (this.viewer !== null)
	        {
	            this.viewer.raiseEvent('rotate', {"degrees": degrees});
	        }
	        return this;
	    },

	    /**
	     * Gets the current rotation in degrees.
	     * @function
	     * @return {Number} The current rotation in degrees.
	     */
	    getRotation: function() {
	        return this.degrees;
	    },

	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:resize
	     */
	    resize: function( newContainerSize, maintain ) {
	        var oldBounds = this.getBounds(),
	            newBounds = oldBounds,
	            widthDeltaFactor;

	        this.containerSize.x = newContainerSize.x;
	        this.containerSize.y = newContainerSize.y;

	        this._updateContainerInnerSize();

	        if ( maintain ) {
	            // TODO: widthDeltaFactor will always be 1; probably not what's intended
	            widthDeltaFactor = newContainerSize.x / this.containerSize.x;
	            newBounds.width  = oldBounds.width * widthDeltaFactor;
	            newBounds.height = newBounds.width / this.getAspectRatio();
	        }

	        if( this.viewer ){
	            /**
	             * Raised when the viewer is resized (see {@link OpenSeadragon.Viewport#resize}).
	             *
	             * @event resize
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} newContainerSize
	             * @property {Boolean} maintain
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'resize', {
	                newContainerSize: newContainerSize,
	                maintain: maintain
	            });
	        }

	        return this.fitBounds( newBounds, true );
	    },

	    // private
	    _updateContainerInnerSize: function() {
	        this._containerInnerSize = new $.Point(
	            Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),
	            Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))
	        );
	    },

	    /**
	     * @function
	     */
	    update: function() {
	        var oldZoomPixel,
	            newZoomPixel,
	            deltaZoomPixels,
	            deltaZoomPoints;

	        if (this.zoomPoint) {
	            oldZoomPixel = this.pixelFromPoint( this.zoomPoint, true );
	        }

	        this.zoomSpring.update();

	        if (this.zoomPoint && this.zoomSpring.current.value != this._oldZoom) {
	            newZoomPixel    = this.pixelFromPoint( this.zoomPoint, true );
	            deltaZoomPixels = newZoomPixel.minus( oldZoomPixel );
	            deltaZoomPoints = this.deltaPointsFromPixels( deltaZoomPixels, true );

	            this.centerSpringX.shiftBy( deltaZoomPoints.x );
	            this.centerSpringY.shiftBy( deltaZoomPoints.y );
	        } else {
	            this.zoomPoint = null;
	        }

	        this.centerSpringX.update();
	        this.centerSpringY.update();

	        var changed = this.centerSpringX.current.value != this._oldCenterX ||
	            this.centerSpringY.current.value != this._oldCenterY ||
	            this.zoomSpring.current.value != this._oldZoom;

	        this._oldCenterX = this.centerSpringX.current.value;
	        this._oldCenterY = this.centerSpringY.current.value;
	        this._oldZoom    = this.zoomSpring.current.value;

	        return changed;
	    },


	    /**
	     * Convert a delta (translation vector) from pixels coordinates to viewport coordinates
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    deltaPixelsFromPoints: function( deltaPoints, current ) {
	        return deltaPoints.times(
	            this._containerInnerSize.x * this.getZoom( current )
	        );
	    },

	    /**
	     * Convert a delta (translation vector) from viewport coordinates to pixels coordinates.
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    deltaPointsFromPixels: function( deltaPixels, current ) {
	        return deltaPixels.divide(
	            this._containerInnerSize.x * this.getZoom( current )
	        );
	    },

	    /**
	     * Convert image pixel coordinates to viewport coordinates.
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    pixelFromPoint: function( point, current ) {
	        return this._pixelFromPoint(point, this.getBounds( current ));
	    },

	    // private
	    _pixelFromPoint: function( point, bounds ) {
	        return point.minus(
	            bounds.getTopLeft()
	        ).times(
	            this._containerInnerSize.x / bounds.width
	        ).plus(
	            new $.Point(this._margins.left, this._margins.top)
	        );
	    },

	    /**
	     * Convert viewport coordinates to image pixel coordinates.
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    pointFromPixel: function( pixel, current ) {
	        var bounds = this.getBounds( current );
	        return pixel.minus(
	            new $.Point(this._margins.left, this._margins.top)
	        ).divide(
	            this._containerInnerSize.x / bounds.width
	        ).plus(
	            bounds.getTopLeft()
	        );
	    },

	    // private
	    _viewportToImageDelta: function( viewerX, viewerY ) {
	        var scale = this.homeBounds.width;
	        return new $.Point(viewerX * (this.contentSize.x / scale),
	            viewerY * ((this.contentSize.y * this.contentAspectX) / scale));
	    },

	    /**
	     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
	     * This method can be called either by passing X,Y coordinates or an
	     * OpenSeadragon.Point
	     * Note: not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.
	     * @function
	     * @param {OpenSeadragon.Point} viewerX the point in viewport coordinate system.
	     * @param {Number} viewerX X coordinate in viewport coordinate system.
	     * @param {Number} viewerY Y coordinate in viewport coordinate system.
	     * @return {OpenSeadragon.Point} a point representing the coordinates in the image.
	     */
	    viewportToImageCoordinates: function( viewerX, viewerY ) {
	        if ( arguments.length == 1 ) {
	            //they passed a point instead of individual components
	            return this.viewportToImageCoordinates( viewerX.x, viewerX.y );
	        }

	        if (this.viewer && this.viewer.world.getItemCount() > 1) {
	            $.console.error('[Viewport.viewportToImageCoordinates] is not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.');
	        }

	        return this._viewportToImageDelta(viewerX - this.homeBounds.x, viewerY - this.homeBounds.y);
	    },

	    // private
	    _imageToViewportDelta: function( imageX, imageY ) {
	        var scale = this.homeBounds.width;
	        return new $.Point((imageX / this.contentSize.x) * scale,
	            (imageY / this.contentSize.y / this.contentAspectX) * scale);
	    },

	    /**
	     * Translates from image coordinate system to OpenSeadragon viewer coordinate system
	     * This method can be called either by passing X,Y coordinates or an
	     * OpenSeadragon.Point
	     * Note: not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.
	     * @function
	     * @param {OpenSeadragon.Point} imageX the point in image coordinate system.
	     * @param {Number} imageX X coordinate in image coordinate system.
	     * @param {Number} imageY Y coordinate in image coordinate system.
	     * @return {OpenSeadragon.Point} a point representing the coordinates in the viewport.
	     */
	    imageToViewportCoordinates: function( imageX, imageY ) {
	        if ( arguments.length == 1 ) {
	            //they passed a point instead of individual components
	            return this.imageToViewportCoordinates( imageX.x, imageX.y );
	        }

	        if (this.viewer && this.viewer.world.getItemCount() > 1) {
	            $.console.error('[Viewport.imageToViewportCoordinates] is not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.');
	        }

	        var point = this._imageToViewportDelta(imageX, imageY);
	        point.x += this.homeBounds.x;
	        point.y += this.homeBounds.y;
	        return point;
	    },

	    /**
	     * Translates from a rectangle which describes a portion of the image in
	     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an
	     * OpenSeadragon.Rect
	     * Note: not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.
	     * @function
	     * @param {OpenSeadragon.Rect} imageX the rectangle in image coordinate system.
	     * @param {Number} imageX the X coordinate of the top left corner of the rectangle
	     * in image coordinate system.
	     * @param {Number} imageY the Y coordinate of the top left corner of the rectangle
	     * in image coordinate system.
	     * @param {Number} pixelWidth the width in pixel of the rectangle.
	     * @param {Number} pixelHeight the height in pixel of the rectangle.
	     */
	    imageToViewportRectangle: function( imageX, imageY, pixelWidth, pixelHeight ) {
	        var coordA,
	            coordB,
	            rect;
	        if( arguments.length == 1 ) {
	            //they passed a rectangle instead of individual components
	            rect = imageX;
	            return this.imageToViewportRectangle(
	                rect.x, rect.y, rect.width, rect.height
	            );
	        }

	        coordA = this.imageToViewportCoordinates(
	            imageX, imageY
	        );
	        coordB = this._imageToViewportDelta(
	            pixelWidth, pixelHeight
	        );
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y
	        );
	    },

	    /**
	     * Translates from a rectangle which describes a portion of
	     * the viewport in point coordinates to image rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an
	     * OpenSeadragon.Rect
	     * Note: not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.
	     * @function
	     * @param {OpenSeadragon.Rect} viewerX the rectangle in viewport coordinate system.
	     * @param {Number} viewerX the X coordinate of the top left corner of the rectangle
	     * in viewport coordinate system.
	     * @param {Number} imageY the Y coordinate of the top left corner of the rectangle
	     * in viewport coordinate system.
	     * @param {Number} pointWidth the width of the rectangle in viewport coordinate system.
	     * @param {Number} pointHeight the height of the rectangle in viewport coordinate system.
	     */
	    viewportToImageRectangle: function( viewerX, viewerY, pointWidth, pointHeight ) {
	        var coordA,
	            coordB,
	            rect;
	        if ( arguments.length == 1 ) {
	            //they passed a rectangle instead of individual components
	            rect = viewerX;
	            return this.viewportToImageRectangle(
	                rect.x, rect.y, rect.width, rect.height
	            );
	        }

	        coordA = this.viewportToImageCoordinates( viewerX, viewerY );
	        coordB = this._viewportToImageDelta(pointWidth, pointHeight);
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y
	        );
	    },

	    /**
	     * Convert pixel coordinates relative to the viewer element to image
	     * coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToImageCoordinates: function( pixel ) {
	        var point = this.pointFromPixel( pixel, true );
	        return this.viewportToImageCoordinates( point );
	    },

	    /**
	     * Convert pixel coordinates relative to the image to
	     * viewer element coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToViewerElementCoordinates: function( pixel ) {
	        var point = this.imageToViewportCoordinates( pixel );
	        return this.pixelFromPoint( point, true );
	    },

	    /**
	     * Convert pixel coordinates relative to the window to image coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToImageCoordinates: function( pixel ) {
	        var viewerCoordinates = pixel.minus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	        return this.viewerElementToImageCoordinates( viewerCoordinates );
	    },

	    /**
	     * Convert image coordinates to pixel coordinates relative to the window.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToWindowCoordinates: function( pixel ) {
	        var viewerCoordinates = this.imageToViewerElementCoordinates( pixel );
	        return viewerCoordinates.plus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	    },

	    /**
	     * Convert pixel coordinates relative to the viewer element to viewport
	     * coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToViewportCoordinates: function( pixel ) {
	        return this.pointFromPixel( pixel, true );
	    },

	    /**
	     * Convert viewport coordinates to pixel coordinates relative to the
	     * viewer element.
	     * @param {OpenSeadragon.Point} point
	     * @returns {OpenSeadragon.Point}
	     */
	    viewportToViewerElementCoordinates: function( point ) {
	        return this.pixelFromPoint( point, true );
	    },

	    /**
	     * Convert pixel coordinates relative to the window to viewport coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToViewportCoordinates: function( pixel ) {
	        var viewerCoordinates = pixel.minus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	        return this.viewerElementToViewportCoordinates( viewerCoordinates );
	    },

	    /**
	     * Convert viewport coordinates to pixel coordinates relative to the window.
	     * @param {OpenSeadragon.Point} point
	     * @returns {OpenSeadragon.Point}
	     */
	    viewportToWindowCoordinates: function( point ) {
	        var viewerCoordinates = this.viewportToViewerElementCoordinates( point );
	        return viewerCoordinates.plus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	    },

	    /**
	     * Convert a viewport zoom to an image zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} viewportZoom The viewport zoom
	     * target zoom.
	     * @returns {Number} imageZoom The image zoom
	     */
	    viewportToImageZoom: function( viewportZoom ) {
	        if (this.viewer && this.viewer.world.getItemCount() > 1) {
	            $.console.error('[Viewport.viewportToImageZoom] is not accurate with multi-image.');
	        }

	        var imageWidth = this.contentSize.x;
	        var containerWidth = this._containerInnerSize.x;
	        var scale = this.homeBounds.width;
	        var viewportToImageZoomRatio = (containerWidth / imageWidth) * scale;
	        return viewportZoom * viewportToImageZoomRatio;
	    },

	    /**
	     * Convert an image zoom to a viewport zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} imageZoom The image zoom
	     * target zoom.
	     * @returns {Number} viewportZoom The viewport zoom
	     */
	    imageToViewportZoom: function( imageZoom ) {
	        if (this.viewer && this.viewer.world.getItemCount() > 1) {
	            $.console.error('[Viewport.imageToViewportZoom] is not accurate with multi-image.');
	        }

	        var imageWidth = this.contentSize.x;
	        var containerWidth = this._containerInnerSize.x;
	        var scale = this.homeBounds.width;
	        var viewportToImageZoomRatio = (imageWidth / containerWidth) / scale;
	        return imageZoom * viewportToImageZoomRatio;
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - TiledImage
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * You shouldn't have to create a TiledImage directly; use {@link OpenSeadragon.Viewer#open}
	 * or {@link OpenSeadragon.Viewer#addTiledImage} instead.
	 * @class TiledImage
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
	 * A new instance is created for each TileSource opened.
	 * @param {Object} options - Configuration for this TiledImage.
	 * @param {OpenSeadragon.TileSource} options.source - The TileSource that defines this TiledImage.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this TiledImage.
	 * @param {OpenSeadragon.TileCache} options.tileCache - The TileCache for this TiledImage to use.
	 * @param {OpenSeadragon.Drawer} options.drawer - The Drawer for this TiledImage to draw onto.
	 * @param {OpenSeadragon.ImageLoader} options.imageLoader - The ImageLoader for this TiledImage to use.
	 * @param {Number} [options.x=0] - Left position, in viewport coordinates.
	 * @param {Number} [options.y=0] - Top position, in viewport coordinates.
	 * @param {Number} [options.width=1] - Width, in viewport coordinates.
	 * @param {Number} [options.height] - Height, in viewport coordinates.
	 * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
	 * (portions of the image outside of this area will not be visible). Only works on
	 * browsers that support the HTML5 canvas.
	 * @param {Number} [options.springStiffness] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.animationTime] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomImageRatio] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapHorizontal] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapVertical] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.immediateRender] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.blendTime] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.alwaysBlend] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minPixelRatio] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.opacity=1] - Opacity the tiled image should be drawn at.
	 * @param {Boolean} [options.debugMode] - See {@link OpenSeadragon.Options}.
	 * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
	 * @param {String|Boolean} [options.crossOriginPolicy] - See {@link OpenSeadragon.Options}.
	 */
	$.TiledImage = function( options ) {
	    var _this = this;

	    $.console.assert( options.tileCache, "[TiledImage] options.tileCache is required" );
	    $.console.assert( options.drawer, "[TiledImage] options.drawer is required" );
	    $.console.assert( options.viewer, "[TiledImage] options.viewer is required" );
	    $.console.assert( options.imageLoader, "[TiledImage] options.imageLoader is required" );
	    $.console.assert( options.source, "[TiledImage] options.source is required" );
	    $.console.assert(!options.clip || options.clip instanceof $.Rect,
	        "[TiledImage] options.clip must be an OpenSeadragon.Rect if present");

	    $.EventSource.call( this );

	    this._tileCache = options.tileCache;
	    delete options.tileCache;

	    this._drawer = options.drawer;
	    delete options.drawer;

	    this._imageLoader = options.imageLoader;
	    delete options.imageLoader;

	    if (options.clip instanceof $.Rect) {
	        this._clip = options.clip.clone();
	    }

	    delete options.clip;

	    var x = options.x || 0;
	    delete options.x;
	    var y = options.y || 0;
	    delete options.y;

	    // Ratio of zoomable image height to width.
	    this.normHeight = options.source.dimensions.y / options.source.dimensions.x;
	    this.contentAspectX = options.source.dimensions.x / options.source.dimensions.y;

	    var scale = 1;
	    if ( options.width ) {
	        scale = options.width;
	        delete options.width;

	        if ( options.height ) {
	            $.console.error( "specifying both width and height to a tiledImage is not supported" );
	            delete options.height;
	        }
	    } else if ( options.height ) {
	        scale = options.height / this.normHeight;
	        delete options.height;
	    }

	    $.extend( true, this, {

	        //internal state properties
	        viewer:         null,
	        tilesMatrix:    {},    // A '3d' dictionary [level][x][y] --> Tile.
	        coverage:       {},    // A '3d' dictionary [level][x][y] --> Boolean.
	        lastDrawn:      [],    // An unordered list of Tiles drawn last frame.
	        lastResetTime:  0,     // Last time for which the tiledImage was reset.
	        _midDraw:       false, // Is the tiledImage currently updating the viewport?
	        _needsDraw:     true,  // Does the tiledImage need to update the viewport again?
	        _hasOpaqueTile: false,  // Do we have even one fully opaque tile?

	        //configurable settings
	        springStiffness:      $.DEFAULT_SETTINGS.springStiffness,
	        animationTime:        $.DEFAULT_SETTINGS.animationTime,
	        minZoomImageRatio:    $.DEFAULT_SETTINGS.minZoomImageRatio,
	        wrapHorizontal:       $.DEFAULT_SETTINGS.wrapHorizontal,
	        wrapVertical:         $.DEFAULT_SETTINGS.wrapVertical,
	        immediateRender:      $.DEFAULT_SETTINGS.immediateRender,
	        blendTime:            $.DEFAULT_SETTINGS.blendTime,
	        alwaysBlend:          $.DEFAULT_SETTINGS.alwaysBlend,
	        minPixelRatio:        $.DEFAULT_SETTINGS.minPixelRatio,
	        debugMode:            $.DEFAULT_SETTINGS.debugMode,
	        crossOriginPolicy:    $.DEFAULT_SETTINGS.crossOriginPolicy,
	        placeholderFillStyle: $.DEFAULT_SETTINGS.placeholderFillStyle,
	        opacity:              $.DEFAULT_SETTINGS.opacity

	    }, options );

	    this._xSpring = new $.Spring({
	        initial: x,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });

	    this._ySpring = new $.Spring({
	        initial: y,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });

	    this._scaleSpring = new $.Spring({
	        initial: scale,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });

	    this._updateForScale();

	    // We need a callback to give image manipulation a chance to happen
	    this._drawingHandler = function(args) {
	      /**
	       * This event is fired just before the tile is drawn giving the application a chance to alter the image.
	       *
	       * NOTE: This event is only fired when the drawer is using a <canvas>.
	       *
	       * @event tile-drawing
	       * @memberof OpenSeadragon.Viewer
	       * @type {object}
	       * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	       * @property {OpenSeadragon.Tile} tile - The Tile being drawn.
	       * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	       * @property {OpenSeadragon.Tile} context - The HTML canvas context being drawn into.
	       * @property {OpenSeadragon.Tile} rendered - The HTML canvas context containing the tile imagery.
	       * @property {?Object} userData - Arbitrary subscriber-defined object.
	       */
	        _this.viewer.raiseEvent('tile-drawing', $.extend({
	            tiledImage: _this
	        }, args));
	    };
	};

	$.extend($.TiledImage.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.TiledImage.prototype */{
	    /**
	     * @returns {Boolean} Whether the TiledImage needs to be drawn.
	     */
	    needsDraw: function() {
	        return this._needsDraw;
	    },

	    /**
	     * Clears all tiles and triggers an update on the next call to
	     * {@link OpenSeadragon.TiledImage#update}.
	     */
	    reset: function() {
	        this._tileCache.clearTilesFor(this);
	        this.lastResetTime = $.now();
	        this._needsDraw = true;
	    },

	    /**
	     * Updates the TiledImage's bounds, animating if needed.
	     * @returns {Boolean} Whether the TiledImage animated.
	     */
	    update: function() {
	        var oldX = this._xSpring.current.value;
	        var oldY = this._ySpring.current.value;
	        var oldScale = this._scaleSpring.current.value;

	        this._xSpring.update();
	        this._ySpring.update();
	        this._scaleSpring.update();

	        if (this._xSpring.current.value !== oldX || this._ySpring.current.value !== oldY ||
	                this._scaleSpring.current.value !== oldScale) {
	            this._updateForScale();
	            this._needsDraw = true;
	            return true;
	        }

	        return false;
	    },

	    /**
	     * Draws the TiledImage to its Drawer.
	     */
	    draw: function() {
	        this._midDraw = true;
	        updateViewport( this );
	        this._midDraw = false;
	    },

	    /**
	     * Destroy the TiledImage (unload current loaded tiles).
	     */
	    destroy: function() {
	        this.reset();
	    },

	    /**
	     * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.
	     * @param {Boolean} [current=false] - Pass true for the current location; false for target location.
	     */
	    getBounds: function(current) {
	        if (current) {
	            return new $.Rect( this._xSpring.current.value, this._ySpring.current.value,
	                this._worldWidthCurrent, this._worldHeightCurrent );
	        }

	        return new $.Rect( this._xSpring.target.value, this._ySpring.target.value,
	            this._worldWidthTarget, this._worldHeightTarget );
	    },

	    // deprecated
	    getWorldBounds: function() {
	        $.console.error('[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead');
	        return this.getBounds();
	    },

	    /**
	     * @returns {OpenSeadragon.Point} This TiledImage's content size, in original pixels.
	     */
	    getContentSize: function() {
	        return new $.Point(this.source.dimensions.x, this.source.dimensions.y);
	    },

	    // private
	    _viewportToImageDelta: function( viewerX, viewerY, current ) {
	        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);
	        return new $.Point(viewerX * (this.source.dimensions.x / scale),
	            viewerY * ((this.source.dimensions.y * this.contentAspectX) / scale));
	    },

	    /**
	     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
	     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
	     * @param {Number|OpenSeadragon.Point} viewerX - The X coordinate or point in viewport coordinate system.
	     * @param {Number} [viewerY] - The Y coordinate in viewport coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Point} A point representing the coordinates in the image.
	     */
	    viewportToImageCoordinates: function( viewerX, viewerY, current ) {
	        if (viewerX instanceof $.Point) {
	            //they passed a point instead of individual components
	            current = viewerY;
	            viewerY = viewerX.y;
	            viewerX = viewerX.x;
	        }

	        if (current) {
	            return this._viewportToImageDelta(viewerX - this._xSpring.current.value,
	                viewerY - this._ySpring.current.value);
	        }

	        return this._viewportToImageDelta(viewerX - this._xSpring.target.value,
	            viewerY - this._ySpring.target.value);
	    },

	    // private
	    _imageToViewportDelta: function( imageX, imageY, current ) {
	        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);
	        return new $.Point((imageX / this.source.dimensions.x) * scale,
	            (imageY / this.source.dimensions.y / this.contentAspectX) * scale);
	    },

	    /**
	     * Translates from image coordinate system to OpenSeadragon viewer coordinate system
	     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
	     * @param {Number|OpenSeadragon.Point} imageX - The X coordinate or point in image coordinate system.
	     * @param {Number} [imageY] - The Y coordinate in image coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Point} A point representing the coordinates in the viewport.
	     */
	    imageToViewportCoordinates: function( imageX, imageY, current ) {
	        if (imageX instanceof $.Point) {
	            //they passed a point instead of individual components
	            current = imageY;
	            imageY = imageX.y;
	            imageX = imageX.x;
	        }

	        var point = this._imageToViewportDelta(imageX, imageY);
	        if (current) {
	            point.x += this._xSpring.current.value;
	            point.y += this._ySpring.current.value;
	        } else {
	            point.x += this._xSpring.target.value;
	            point.y += this._ySpring.target.value;
	        }

	        return point;
	    },

	    /**
	     * Translates from a rectangle which describes a portion of the image in
	     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
	     * @param {Number|OpenSeadragon.Rect} imageX - The left coordinate or rectangle in image coordinate system.
	     * @param {Number} [imageY] - The top coordinate in image coordinate system.
	     * @param {Number} [pixelWidth] - The width in pixel of the rectangle.
	     * @param {Number} [pixelHeight] - The height in pixel of the rectangle.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the viewport.
	     */
	    imageToViewportRectangle: function( imageX, imageY, pixelWidth, pixelHeight, current ) {
	        if (imageX instanceof $.Rect) {
	            //they passed a rect instead of individual components
	            current = imageY;
	            pixelWidth = imageX.width;
	            pixelHeight = imageX.height;
	            imageY = imageX.y;
	            imageX = imageX.x;
	        }

	        var coordA = this.imageToViewportCoordinates(imageX, imageY, current);
	        var coordB = this._imageToViewportDelta(pixelWidth, pixelHeight, current);

	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y
	        );
	    },

	    /**
	     * Translates from a rectangle which describes a portion of
	     * the viewport in point coordinates to image rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
	     * @param {Number|OpenSeadragon.Rect} viewerX - The left coordinate or rectangle in viewport coordinate system.
	     * @param {Number} [viewerY] - The top coordinate in viewport coordinate system.
	     * @param {Number} [pointWidth] - The width in viewport coordinate system.
	     * @param {Number} [pointHeight] - The height in viewport coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the image.
	     */
	    viewportToImageRectangle: function( viewerX, viewerY, pointWidth, pointHeight, current ) {
	        if (viewerX instanceof $.Rect) {
	            //they passed a rect instead of individual components
	            current = viewerY;
	            pointWidth = viewerX.width;
	            pointHeight = viewerX.height;
	            viewerY = viewerX.y;
	            viewerX = viewerX.x;
	        }

	        var coordA = this.viewportToImageCoordinates(viewerX, viewerY, current);
	        var coordB = this._viewportToImageDelta(pointWidth, pointHeight, current);

	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y
	        );
	    },

	    /**
	     * Convert pixel coordinates relative to the viewer element to image
	     * coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToImageCoordinates: function( pixel ) {
	        var point = this.viewport.pointFromPixel( pixel, true );
	        return this.viewportToImageCoordinates( point );
	    },

	    /**
	     * Convert pixel coordinates relative to the image to
	     * viewer element coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToViewerElementCoordinates: function( pixel ) {
	        var point = this.imageToViewportCoordinates( pixel );
	        return this.viewport.pixelFromPoint( point, true );
	    },

	    /**
	     * Convert pixel coordinates relative to the window to image coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToImageCoordinates: function( pixel ) {
	        var viewerCoordinates = pixel.minus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	        return this.viewerElementToImageCoordinates( viewerCoordinates );
	    },

	    /**
	     * Convert image coordinates to pixel coordinates relative to the window.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToWindowCoordinates: function( pixel ) {
	        var viewerCoordinates = this.imageToViewerElementCoordinates( pixel );
	        return viewerCoordinates.plus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	    },

	    /**
	     * Convert a viewport zoom to an image zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * @function
	     * @param {Number} viewportZoom The viewport zoom
	     * @returns {Number} imageZoom The image zoom
	     */
	    viewportToImageZoom: function( viewportZoom ) {
	        var ratio = this._scaleSpring.current.value *
	                this.viewport._containerInnerSize.x / this.source.dimensions.x;
	        return ratio * viewportZoom ;
	    },

	    /**
	     * Convert an image zoom to a viewport zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} imageZoom The image zoom
	     * @returns {Number} viewportZoom The viewport zoom
	     */
	    imageToViewportZoom: function( imageZoom ) {
	        var ratio = this._scaleSpring.current.value *
	                this.viewport._containerInnerSize.x / this.source.dimensions.x;
	        return imageZoom / ratio;
	    },

	    /**
	     * Sets the TiledImage's position in the world.
	     * @param {OpenSeadragon.Point} position - The new position, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new position or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setPosition: function(position, immediately) {
	        var sameTarget = (this._xSpring.target.value === position.x &&
	            this._ySpring.target.value === position.y);

	        if (immediately) {
	            if (sameTarget && this._xSpring.current.value === position.x &&
	                    this._ySpring.current.value === position.y) {
	                return;
	            }

	            this._xSpring.resetTo(position.x);
	            this._ySpring.resetTo(position.y);
	            this._needsDraw = true;
	        } else {
	            if (sameTarget) {
	                return;
	            }

	            this._xSpring.springTo(position.x);
	            this._ySpring.springTo(position.y);
	            this._needsDraw = true;
	        }

	        if (!sameTarget) {
	            this._raiseBoundsChange();
	        }
	    },

	    /**
	     * Sets the TiledImage's width in the world, adjusting the height to match based on aspect ratio.
	     * @param {Number} width - The new width, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setWidth: function(width, immediately) {
	        this._setScale(width, immediately);
	    },

	    /**
	     * Sets the TiledImage's height in the world, adjusting the width to match based on aspect ratio.
	     * @param {Number} height - The new height, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setHeight: function(height, immediately) {
	        this._setScale(height / this.normHeight, immediately);
	    },

	    /**
	     * @returns {OpenSeadragon.Rect|null} The TiledImage's current clip rectangle,
	     * in image pixels, or null if none.
	     */
	    getClip: function() {
	        if (this._clip) {
	            return this._clip.clone();
	        }

	        return null;
	    },

	    /**
	     * @param {OpenSeadragon.Rect|null} newClip - An area, in image pixels, to clip to
	     * (portions of the image outside of this area will not be visible). Only works on
	     * browsers that support the HTML5 canvas.
	     */
	    setClip: function(newClip) {
	        $.console.assert(!newClip || newClip instanceof $.Rect,
	            "[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null");

	        if (newClip instanceof $.Rect) {
	            this._clip = newClip.clone();
	        } else {
	            this._clip = null;
	        }

	        this._needsDraw = true;
	    },

	    /**
	     * @returns {Number} The TiledImage's current opacity.
	     */
	    getOpacity: function() {
	        return this.opacity;
	    },

	    /**
	     * @param {Number} opacity Opacity the tiled image should be drawn at.
	     */
	    setOpacity: function(opacity) {
	        this.opacity = opacity;
	        this._needsDraw = true;
	    },

	    // private
	    _setScale: function(scale, immediately) {
	        var sameTarget = (this._scaleSpring.target.value === scale);
	        if (immediately) {
	            if (sameTarget && this._scaleSpring.current.value === scale) {
	                return;
	            }

	            this._scaleSpring.resetTo(scale);
	            this._updateForScale();
	            this._needsDraw = true;
	        } else {
	            if (sameTarget) {
	                return;
	            }

	            this._scaleSpring.springTo(scale);
	            this._updateForScale();
	            this._needsDraw = true;
	        }

	        if (!sameTarget) {
	            this._raiseBoundsChange();
	        }
	    },

	    // private
	    _updateForScale: function() {
	        this._worldWidthTarget = this._scaleSpring.target.value;
	        this._worldHeightTarget = this.normHeight * this._scaleSpring.target.value;
	        this._worldWidthCurrent = this._scaleSpring.current.value;
	        this._worldHeightCurrent = this.normHeight * this._scaleSpring.current.value;
	    },

	    // private
	    _raiseBoundsChange: function() {
	        /**
	         * Raised when the TiledImage's bounds are changed.
	         * Note that this event is triggered only when the animation target is changed;
	         * not for every frame of animation.
	         * @event bounds-change
	         * @memberOf OpenSeadragon.TiledImage
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the TiledImage which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent('bounds-change');
	    }
	});

	/**
	 * @private
	 * @inner
	 * Pretty much every other line in this needs to be documented so it's clear
	 * how each piece of this routine contributes to the drawing process.  That's
	 * why there are so many TODO's inside this function.
	 */
	function updateViewport( tiledImage ) {

	    tiledImage._needsDraw = false;

	    var tile,
	        level,
	        best            = null,
	        haveDrawn       = false,
	        currentTime     = $.now(),
	        viewportBounds  = tiledImage.viewport.getBoundsWithMargins( true ),
	        zeroRatioC      = tiledImage.viewport.deltaPixelsFromPoints(
	            tiledImage.source.getPixelRatio( 0 ),
	            true
	        ).x * tiledImage._scaleSpring.current.value,
	        lowestLevel     = Math.max(
	            tiledImage.source.minLevel,
	            Math.floor(
	                Math.log( tiledImage.minZoomImageRatio ) /
	                Math.log( 2 )
	            )
	        ),
	        highestLevel    = Math.min(
	            Math.abs(tiledImage.source.maxLevel),
	            Math.abs(Math.floor(
	                Math.log( zeroRatioC / tiledImage.minPixelRatio ) /
	                Math.log( 2 )
	            ))
	        ),
	        degrees         = tiledImage.viewport.degrees,
	        renderPixelRatioC,
	        renderPixelRatioT,
	        zeroRatioT,
	        optimalRatio,
	        levelOpacity,
	        levelVisibility;

	    viewportBounds.x -= tiledImage._xSpring.current.value;
	    viewportBounds.y -= tiledImage._ySpring.current.value;

	    // Reset tile's internal drawn state
	    while ( tiledImage.lastDrawn.length > 0 ) {
	        tile = tiledImage.lastDrawn.pop();
	        tile.beingDrawn = false;
	    }

	    //Change bounds for rotation
	    if (degrees === 90 || degrees === 270) {
	        viewportBounds = viewportBounds.rotate( degrees );
	    } else if (degrees !== 0 && degrees !== 180) {
	        // This is just an approximation.
	        var orthBounds = viewportBounds.rotate(90);
	        viewportBounds.x -= orthBounds.width / 2;
	        viewportBounds.y -= orthBounds.height / 2;
	        viewportBounds.width += orthBounds.width;
	        viewportBounds.height += orthBounds.height;
	    }

	    var viewportTL = viewportBounds.getTopLeft();
	    var viewportBR = viewportBounds.getBottomRight();

	    //Don't draw if completely outside of the viewport
	    if  ( !tiledImage.wrapHorizontal && (viewportBR.x < 0 || viewportTL.x > tiledImage._worldWidthCurrent ) ) {
	        return;
	    }

	    if ( !tiledImage.wrapVertical && ( viewportBR.y < 0 || viewportTL.y > tiledImage._worldHeightCurrent ) ) {
	        return;
	    }

	    // Calculate viewport rect / bounds
	    if ( !tiledImage.wrapHorizontal ) {
	        viewportTL.x = Math.max( viewportTL.x, 0 );
	        viewportBR.x = Math.min( viewportBR.x, tiledImage._worldWidthCurrent );
	    }

	    if ( !tiledImage.wrapVertical ) {
	        viewportTL.y = Math.max( viewportTL.y, 0 );
	        viewportBR.y = Math.min( viewportBR.y, tiledImage._worldHeightCurrent );
	    }

	    // Calculations for the interval of levels to draw
	    // (above in initial var statement)
	    // can return invalid intervals; fix that here if necessary
	    lowestLevel = Math.min( lowestLevel, highestLevel );

	    // Update any level that will be drawn
	    var drawLevel; // FIXME: drawLevel should have a more explanatory name
	    for ( level = highestLevel; level >= lowestLevel; level-- ) {
	        drawLevel = false;

	        //Avoid calculations for draw if we have already drawn this
	        renderPixelRatioC = tiledImage.viewport.deltaPixelsFromPoints(
	            tiledImage.source.getPixelRatio( level ),
	            true
	        ).x * tiledImage._scaleSpring.current.value;

	        if ( ( !haveDrawn && renderPixelRatioC >= tiledImage.minPixelRatio ) ||
	             ( level == lowestLevel ) ) {
	            drawLevel = true;
	            haveDrawn = true;
	        } else if ( !haveDrawn ) {
	            continue;
	        }

	        //Perform calculations for draw if we haven't drawn this
	        renderPixelRatioT = tiledImage.viewport.deltaPixelsFromPoints(
	            tiledImage.source.getPixelRatio( level ),
	            false
	        ).x * tiledImage._scaleSpring.current.value;

	        zeroRatioT      = tiledImage.viewport.deltaPixelsFromPoints(
	            tiledImage.source.getPixelRatio(
	                Math.max(
	                    tiledImage.source.getClosestLevel( tiledImage.viewport.containerSize ) - 1,
	                    0
	                )
	            ),
	            false
	        ).x * tiledImage._scaleSpring.current.value;

	        optimalRatio    = tiledImage.immediateRender ?
	            1 :
	            zeroRatioT;

	        levelOpacity    = Math.min( 1, ( renderPixelRatioC - 0.5 ) / 0.5 );

	        levelVisibility = optimalRatio / Math.abs(
	            optimalRatio - renderPixelRatioT
	        );

	        // Update the level and keep track of 'best' tile to load
	        best = updateLevel(
	            tiledImage,
	            haveDrawn,
	            drawLevel,
	            level,
	            levelOpacity,
	            levelVisibility,
	            viewportTL,
	            viewportBR,
	            currentTime,
	            best
	        );

	        // Stop the loop if lower-res tiles would all be covered by
	        // already drawn tiles
	        if (  providesCoverage( tiledImage.coverage, level ) ) {
	            break;
	        }
	    }

	    // Perform the actual drawing
	    drawTiles( tiledImage, tiledImage.lastDrawn );

	    // Load the new 'best' tile
	    if (best && !best.context2D) {
	        loadTile( tiledImage, best, currentTime );
	    }

	}


	function updateLevel( tiledImage, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, viewportTL, viewportBR, currentTime, best ){

	    var x, y,
	        tileTL,
	        tileBR,
	        numberOfTiles,
	        viewportCenter  = tiledImage.viewport.pixelFromPoint( tiledImage.viewport.getCenter() );


	    if( tiledImage.viewer ){
	        /**
	         * <em>- Needs documentation -</em>
	         *
	         * @event update-level
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	         * @property {Object} havedrawn
	         * @property {Object} level
	         * @property {Object} opacity
	         * @property {Object} visibility
	         * @property {Object} topleft
	         * @property {Object} bottomright
	         * @property {Object} currenttime
	         * @property {Object} best
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        tiledImage.viewer.raiseEvent( 'update-level', {
	            tiledImage: tiledImage,
	            havedrawn: haveDrawn,
	            level: level,
	            opacity: levelOpacity,
	            visibility: levelVisibility,
	            topleft: viewportTL,
	            bottomright: viewportBR,
	            currenttime: currentTime,
	            best: best
	        });
	    }

	    //OK, a new drawing so do your calculations
	    tileTL    = tiledImage.source.getTileAtPoint( level, viewportTL.divide( tiledImage._scaleSpring.current.value ));
	    tileBR    = tiledImage.source.getTileAtPoint( level, viewportBR.divide( tiledImage._scaleSpring.current.value ));
	    numberOfTiles  = tiledImage.source.getNumTiles( level );

	    resetCoverage( tiledImage.coverage, level );

	    if ( !tiledImage.wrapHorizontal ) {
	        tileBR.x = Math.min( tileBR.x, numberOfTiles.x - 1 );
	    }
	    if ( !tiledImage.wrapVertical ) {
	        tileBR.y = Math.min( tileBR.y, numberOfTiles.y - 1 );
	    }

	    for ( x = tileTL.x; x <= tileBR.x; x++ ) {
	        for ( y = tileTL.y; y <= tileBR.y; y++ ) {

	            best = updateTile(
	                tiledImage,
	                drawLevel,
	                haveDrawn,
	                x, y,
	                level,
	                levelOpacity,
	                levelVisibility,
	                viewportCenter,
	                numberOfTiles,
	                currentTime,
	                best
	            );

	        }
	    }

	    return best;
	}

	function updateTile( tiledImage, drawLevel, haveDrawn, x, y, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best){

	    var tile = getTile(
	            x, y,
	            level,
	            tiledImage.source,
	            tiledImage.tilesMatrix,
	            currentTime,
	            numberOfTiles,
	            tiledImage._worldWidthCurrent,
	            tiledImage._worldHeightCurrent
	        ),
	        drawTile = drawLevel;

	    if( tiledImage.viewer ){
	        /**
	         * <em>- Needs documentation -</em>
	         *
	         * @event update-tile
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	         * @property {OpenSeadragon.Tile} tile
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        tiledImage.viewer.raiseEvent( 'update-tile', {
	            tiledImage: tiledImage,
	            tile: tile
	        });
	    }

	    setCoverage( tiledImage.coverage, level, x, y, false );

	    if ( !tile.exists ) {
	        return best;
	    }

	    if ( haveDrawn && !drawTile ) {
	        if ( isCovered( tiledImage.coverage, level, x, y ) ) {
	            setCoverage( tiledImage.coverage, level, x, y, true );
	        } else {
	            drawTile = true;
	        }
	    }

	    if ( !drawTile ) {
	        return best;
	    }

	    positionTile(
	        tile,
	        tiledImage.source.tileOverlap,
	        tiledImage.viewport,
	        viewportCenter,
	        levelVisibility,
	        tiledImage
	    );

	    if (!tile.loaded) {
	        if (tile.context2D) {
	            setTileLoaded(tiledImage, tile);
	        } else {
	            var imageRecord = tiledImage._tileCache.getImageRecord(tile.url);
	            if (imageRecord) {
	                var image = imageRecord.getImage();
	                setTileLoaded(tiledImage, tile, image);
	            }
	        }
	    }

	    if ( tile.loaded ) {
	        var needsDraw = blendTile(
	            tiledImage,
	            tile,
	            x, y,
	            level,
	            levelOpacity,
	            currentTime
	        );

	        if ( needsDraw ) {
	            tiledImage._needsDraw = true;
	        }
	    } else if ( tile.loading ) {
	        // the tile is already in the download queue
	        // thanks josh1093 for finally translating this typo
	    } else {
	        best = compareTiles( best, tile );
	    }

	    return best;
	}

	function getTile( x, y, level, tileSource, tilesMatrix, time, numTiles, worldWidth, worldHeight ) {
	    var xMod,
	        yMod,
	        bounds,
	        exists,
	        url,
	        context2D,
	        tile;

	    if ( !tilesMatrix[ level ] ) {
	        tilesMatrix[ level ] = {};
	    }
	    if ( !tilesMatrix[ level ][ x ] ) {
	        tilesMatrix[ level ][ x ] = {};
	    }

	    if ( !tilesMatrix[ level ][ x ][ y ] ) {
	        xMod    = ( numTiles.x + ( x % numTiles.x ) ) % numTiles.x;
	        yMod    = ( numTiles.y + ( y % numTiles.y ) ) % numTiles.y;
	        bounds  = tileSource.getTileBounds( level, xMod, yMod );
	        exists  = tileSource.tileExists( level, xMod, yMod );
	        url     = tileSource.getTileUrl( level, xMod, yMod );
	        context2D = tileSource.getContext2D ?
	            tileSource.getContext2D(level, xMod, yMod) : undefined;

	        bounds.x += ( x - xMod ) / numTiles.x;
	        bounds.y += (worldHeight / worldWidth) * (( y - yMod ) / numTiles.y);

	        tilesMatrix[ level ][ x ][ y ] = new $.Tile(
	            level,
	            x,
	            y,
	            bounds,
	            exists,
	            url,
	            context2D
	        );
	    }

	    tile = tilesMatrix[ level ][ x ][ y ];
	    tile.lastTouchTime = time;

	    return tile;
	}

	function loadTile( tiledImage, tile, time ) {
	    tile.loading = true;
	    tiledImage._imageLoader.addJob({
	        src: tile.url,
	        crossOriginPolicy: tiledImage.crossOriginPolicy,
	        callback: function( image, errorMsg ){
	            onTileLoad( tiledImage, tile, time, image, errorMsg );
	        },
	        abort: function() {
	            tile.loading = false;
	        }
	    });
	}

	function onTileLoad( tiledImage, tile, time, image, errorMsg ) {
	    if ( !image ) {
	        $.console.log( "Tile %s failed to load: %s - error: %s", tile, tile.url, errorMsg );
	        /**
	         * Triggered when a tile fails to load.
	         *
	         * @event tile-load-failed
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Tile} tile - The tile that failed to load.
	         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image the tile belongs to.
	         * @property {number} time - The time in milliseconds when the tile load began.
	         * @property {string} message - The error message.
	         */
	        tiledImage.viewer.raiseEvent("tile-load-failed", {tile: tile, tiledImage: tiledImage, time: time, message: errorMsg});
	        if( !tiledImage.debugMode ){
	            tile.loading = false;
	            tile.exists = false;
	            return;
	        }
	    } else if ( time < tiledImage.lastResetTime ) {
	        $.console.log( "Ignoring tile %s loaded before reset: %s", tile, tile.url );
	        tile.loading = false;
	        return;
	    }

	    var finish = function() {
	        var cutoff = Math.ceil( Math.log(
	            tiledImage.source.getTileWidth(tile.level) ) / Math.log( 2 ) );
	        setTileLoaded(tiledImage, tile, image, cutoff);
	    };

	    // Check if we're mid-update; this can happen on IE8 because image load events for
	    // cached images happen immediately there
	    if ( !tiledImage._midDraw ) {
	        finish();
	    } else {
	        // Wait until after the update, in case caching unloads any tiles
	        window.setTimeout( finish, 1);
	    }
	}

	function setTileLoaded(tiledImage, tile, image, cutoff) {
	    var increment = 0;

	    function getCompletionCallback() {
	        increment++;
	        return completionCallback;
	    }

	    function completionCallback() {
	        increment--;
	        if (increment === 0) {
	            tile.loading = false;
	            tile.loaded = true;
	            if (!tile.context2D) {
	                tiledImage._tileCache.cacheTile({
	                    image: image,
	                    tile: tile,
	                    cutoff: cutoff,
	                    tiledImage: tiledImage
	                });
	            }
	            tiledImage._needsDraw = true;
	        }
	    }

	    /**
	     * Triggered when a tile has just been loaded in memory. That means that the
	     * image has been downloaded and can be modified before being drawn to the canvas.
	     *
	     * @event tile-loaded
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {Image} image - The image of the tile.
	     * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the loaded tile.
	     * @property {OpenSeadragon.Tile} tile - The tile which has been loaded.
	     * @property {function} getCompletionCallback - A function giving a callback to call
	     * when the asynchronous processing of the image is done. The image will be
	     * marked as entirely loaded when the callback has been called once for each
	     * call to getCompletionCallback.
	     */
	    tiledImage.viewer.raiseEvent("tile-loaded", {
	        tile: tile,
	        tiledImage: tiledImage,
	        image: image,
	        getCompletionCallback: getCompletionCallback
	    });
	    // In case the completion callback is never called, we at least force it once.
	    getCompletionCallback()();
	}

	function positionTile( tile, overlap, viewport, viewportCenter, levelVisibility, tiledImage ){
	    var boundsTL     = tile.bounds.getTopLeft();

	    boundsTL.x *= tiledImage._scaleSpring.current.value;
	    boundsTL.y *= tiledImage._scaleSpring.current.value;
	    boundsTL.x += tiledImage._xSpring.current.value;
	    boundsTL.y += tiledImage._ySpring.current.value;

	    var boundsSize   = tile.bounds.getSize();

	    boundsSize.x *= tiledImage._scaleSpring.current.value;
	    boundsSize.y *= tiledImage._scaleSpring.current.value;

	    var positionC    = viewport.pixelFromPoint( boundsTL, true ),
	        positionT    = viewport.pixelFromPoint( boundsTL, false ),
	        sizeC        = viewport.deltaPixelsFromPoints( boundsSize, true ),
	        sizeT        = viewport.deltaPixelsFromPoints( boundsSize, false ),
	        tileCenter   = positionT.plus( sizeT.divide( 2 ) ),
	        tileDistance = viewportCenter.distanceTo( tileCenter );

	    if ( !overlap ) {
	        sizeC = sizeC.plus( new $.Point( 1, 1 ) );
	    }

	    tile.position   = positionC;
	    tile.size       = sizeC;
	    tile.distance   = tileDistance;
	    tile.visibility = levelVisibility;
	}


	function blendTile( tiledImage, tile, x, y, level, levelOpacity, currentTime ){
	    var blendTimeMillis = 1000 * tiledImage.blendTime,
	        deltaTime,
	        opacity;

	    if ( !tile.blendStart ) {
	        tile.blendStart = currentTime;
	    }

	    deltaTime   = currentTime - tile.blendStart;
	    opacity     = blendTimeMillis ? Math.min( 1, deltaTime / ( blendTimeMillis ) ) : 1;

	    if ( tiledImage.alwaysBlend ) {
	        opacity *= levelOpacity;
	    }

	    tile.opacity = opacity;

	    tiledImage.lastDrawn.push( tile );

	    if ( opacity == 1 ) {
	        setCoverage( tiledImage.coverage, level, x, y, true );
	        tiledImage._hasOpaqueTile = true;
	    } else if ( deltaTime < blendTimeMillis ) {
	        return true;
	    }

	    return false;
	}

	/**
	 * @private
	 * @inner
	 * Returns true if the given tile provides coverage to lower-level tiles of
	 * lower resolution representing the same content. If neither x nor y is
	 * given, returns true if the entire visible level provides coverage.
	 *
	 * Note that out-of-bounds tiles provide coverage in this sense, since
	 * there's no content that they would need to cover. Tiles at non-existent
	 * levels that are within the image bounds, however, do not.
	 */
	function providesCoverage( coverage, level, x, y ) {
	    var rows,
	        cols,
	        i, j;

	    if ( !coverage[ level ] ) {
	        return false;
	    }

	    if ( x === undefined || y === undefined ) {
	        rows = coverage[ level ];
	        for ( i in rows ) {
	            if ( rows.hasOwnProperty( i ) ) {
	                cols = rows[ i ];
	                for ( j in cols ) {
	                    if ( cols.hasOwnProperty( j ) && !cols[ j ] ) {
	                        return false;
	                    }
	                }
	            }
	        }

	        return true;
	    }

	    return (
	        coverage[ level ][ x] === undefined ||
	        coverage[ level ][ x ][ y ] === undefined ||
	        coverage[ level ][ x ][ y ] === true
	    );
	}

	/**
	 * @private
	 * @inner
	 * Returns true if the given tile is completely covered by higher-level
	 * tiles of higher resolution representing the same content. If neither x
	 * nor y is given, returns true if the entire visible level is covered.
	 */
	function isCovered( coverage, level, x, y ) {
	    if ( x === undefined || y === undefined ) {
	        return providesCoverage( coverage, level + 1 );
	    } else {
	        return (
	             providesCoverage( coverage, level + 1, 2 * x, 2 * y ) &&
	             providesCoverage( coverage, level + 1, 2 * x, 2 * y + 1 ) &&
	             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y ) &&
	             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y + 1 )
	        );
	    }
	}

	/**
	 * @private
	 * @inner
	 * Sets whether the given tile provides coverage or not.
	 */
	function setCoverage( coverage, level, x, y, covers ) {
	    if ( !coverage[ level ] ) {
	        $.console.warn(
	            "Setting coverage for a tile before its level's coverage has been reset: %s",
	            level
	        );
	        return;
	    }

	    if ( !coverage[ level ][ x ] ) {
	        coverage[ level ][ x ] = {};
	    }

	    coverage[ level ][ x ][ y ] = covers;
	}

	/**
	 * @private
	 * @inner
	 * Resets coverage information for the given level. This should be called
	 * after every draw routine. Note that at the beginning of the next draw
	 * routine, coverage for every visible tile should be explicitly set.
	 */
	function resetCoverage( coverage, level ) {
	    coverage[ level ] = {};
	}

	/**
	 * @private
	 * @inner
	 * Determines whether the 'last best' tile for the area is better than the
	 * tile in question.
	 */
	function compareTiles( previousBest, tile ) {
	    if ( !previousBest ) {
	        return tile;
	    }

	    if ( tile.visibility > previousBest.visibility ) {
	        return tile;
	    } else if ( tile.visibility == previousBest.visibility ) {
	        if ( tile.distance < previousBest.distance ) {
	            return tile;
	        }
	    }

	    return previousBest;
	}

	function drawTiles( tiledImage, lastDrawn ) {
	    var i,
	        tile;

	    if ( tiledImage.opacity <= 0 ) {
	        drawDebugInfo( tiledImage, lastDrawn );
	        return;
	    }
	    var useSketch = tiledImage.opacity < 1;
	    if ( useSketch ) {
	        tiledImage._drawer._clear( true );
	    }

	    var usedClip = false;
	    if ( tiledImage._clip ) {
	        tiledImage._drawer.saveContext(useSketch);

	        var box = tiledImage.imageToViewportRectangle(tiledImage._clip, true);
	        var clipRect = tiledImage._drawer.viewportToDrawerRectangle(box);
	        tiledImage._drawer.setClip(clipRect, useSketch);

	        usedClip = true;
	    }

	    if ( tiledImage.placeholderFillStyle && tiledImage._hasOpaqueTile === false ) {
	        var placeholderRect = tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));

	        var fillStyle = null;
	        if ( typeof tiledImage.placeholderFillStyle === "function" ) {
	            fillStyle = tiledImage.placeholderFillStyle(tiledImage, tiledImage._drawer.context);
	        }
	        else {
	            fillStyle = tiledImage.placeholderFillStyle;
	        }

	        tiledImage._drawer.drawRectangle(placeholderRect, fillStyle, useSketch);
	    }

	    for ( i = lastDrawn.length - 1; i >= 0; i-- ) {
	        tile = lastDrawn[ i ];
	        tiledImage._drawer.drawTile( tile, tiledImage._drawingHandler, useSketch );
	        tile.beingDrawn = true;

	        if( tiledImage.viewer ){
	            /**
	             * <em>- Needs documentation -</em>
	             *
	             * @event tile-drawn
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	             * @property {OpenSeadragon.Tile} tile
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            tiledImage.viewer.raiseEvent( 'tile-drawn', {
	                tiledImage: tiledImage,
	                tile: tile
	            });
	        }
	    }

	    if ( usedClip ) {
	        tiledImage._drawer.restoreContext( useSketch );
	    }

	    if ( useSketch ) {
	        tiledImage._drawer.blendSketch( tiledImage.opacity );
	    }
	    drawDebugInfo( tiledImage, lastDrawn );
	}

	function drawDebugInfo( tiledImage, lastDrawn ) {
	    if( tiledImage.debugMode ) {
	        for ( var i = lastDrawn.length - 1; i >= 0; i-- ) {
	            var tile = lastDrawn[ i ];
	            try {
	                tiledImage._drawer.drawDebugInfo( tile, lastDrawn.length, i );
	            } catch(e) {
	                $.console.error(e);
	            }
	        }
	    }
	}

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - TileCache
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	// private class
	var TileRecord = function( options ) {
	    $.console.assert( options, "[TileCache.cacheTile] options is required" );
	    $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );
	    $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );
	    this.tile = options.tile;
	    this.tiledImage = options.tiledImage;
	};

	// private class
	var ImageRecord = function(options) {
	    $.console.assert( options, "[ImageRecord] options is required" );
	    $.console.assert( options.image, "[ImageRecord] options.image is required" );
	    this._image = options.image;
	    this._tiles = [];
	};

	ImageRecord.prototype = {
	    destroy: function() {
	        this._image = null;
	        this._renderedContext = null;
	        this._tiles = null;
	    },

	    getImage: function() {
	        return this._image;
	    },

	    getRenderedContext: function() {
	        if (!this._renderedContext) {
	            var canvas = document.createElement( 'canvas' );
	            canvas.width = this._image.width;
	            canvas.height = this._image.height;
	            this._renderedContext = canvas.getContext('2d');
	            this._renderedContext.drawImage( this._image, 0, 0 );
	            //since we are caching the prerendered image on a canvas
	            //allow the image to not be held in memory
	            this._image = null;
	        }
	        return this._renderedContext;
	    },

	    setRenderedContext: function(renderedContext) {
	        $.console.error("ImageRecord.setRenderedContext is deprecated. " +
	                "The rendered context should be created by the ImageRecord " +
	                "itself when calling ImageRecord.getRenderedContext.");
	        this._renderedContext = renderedContext;
	    },

	    addTile: function(tile) {
	        $.console.assert(tile, '[ImageRecord.addTile] tile is required');
	        this._tiles.push(tile);
	    },

	    removeTile: function(tile) {
	        for (var i = 0; i < this._tiles.length; i++) {
	            if (this._tiles[i] === tile) {
	                this._tiles.splice(i, 1);
	                return;
	            }
	        }

	        $.console.warn('[ImageRecord.removeTile] trying to remove unknown tile', tile);
	    },

	    getTileCount: function() {
	        return this._tiles.length;
	    }
	};

	/**
	 * @class TileCache
	 * @memberof OpenSeadragon
	 * @classdesc Stores all the tiles displayed in a {@link OpenSeadragon.Viewer}.
	 * You generally won't have to interact with the TileCache directly.
	 * @param {Object} options - Configuration for this TileCache.
	 * @param {Number} [options.maxImageCacheCount] - See maxImageCacheCount in
	 * {@link OpenSeadragon.Options} for details.
	 */
	$.TileCache = function( options ) {
	    options = options || {};

	    this._maxImageCacheCount = options.maxImageCacheCount || $.DEFAULT_SETTINGS.maxImageCacheCount;
	    this._tilesLoaded = [];
	    this._imagesLoaded = [];
	    this._imagesLoadedCount = 0;
	};

	$.TileCache.prototype = /** @lends OpenSeadragon.TileCache.prototype */{
	    /**
	     * @returns {Number} The total number of tiles that have been loaded by
	     * this TileCache.
	     */
	    numTilesLoaded: function() {
	        return this._tilesLoaded.length;
	    },

	    /**
	     * Caches the specified tile, removing an old tile if necessary to stay under the
	     * maxImageCacheCount specified on construction. Note that if multiple tiles reference
	     * the same image, there may be more tiles than maxImageCacheCount; the goal is to keep
	     * the number of images below that number. Note, as well, that even the number of images
	     * may temporarily surpass that number, but should eventually come back down to the max specified.
	     * @param {Object} options - Tile info.
	     * @param {OpenSeadragon.Tile} options.tile - The tile to cache.
	     * @param {Image} options.image - The image of the tile to cache.
	     * @param {OpenSeadragon.TiledImage} options.tiledImage - The TiledImage that owns that tile.
	     * @param {Number} [options.cutoff=0] - If adding this tile goes over the cache max count, this
	     * function will release an old tile. The cutoff option specifies a tile level at or below which
	     * tiles will not be released.
	     */
	    cacheTile: function( options ) {
	        $.console.assert( options, "[TileCache.cacheTile] options is required" );
	        $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );
	        $.console.assert( options.tile.url, "[TileCache.cacheTile] options.tile.url is required" );
	        $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );

	        var cutoff = options.cutoff || 0;
	        var insertionIndex = this._tilesLoaded.length;

	        var imageRecord = this._imagesLoaded[options.tile.url];
	        if (!imageRecord) {
	            $.console.assert( options.image, "[TileCache.cacheTile] options.image is required to create an ImageRecord" );
	            imageRecord = this._imagesLoaded[options.tile.url] = new ImageRecord({
	                image: options.image
	            });

	            this._imagesLoadedCount++;
	        }

	        imageRecord.addTile(options.tile);
	        options.tile.cacheImageRecord = imageRecord;

	        // Note that just because we're unloading a tile doesn't necessarily mean
	        // we're unloading an image. With repeated calls it should sort itself out, though.
	        if ( this._imagesLoadedCount > this._maxImageCacheCount ) {
	            var worstTile       = null;
	            var worstTileIndex  = -1;
	            var worstTileRecord = null;
	            var prevTile, worstTime, worstLevel, prevTime, prevLevel, prevTileRecord;

	            for ( var i = this._tilesLoaded.length - 1; i >= 0; i-- ) {
	                prevTileRecord = this._tilesLoaded[ i ];
	                prevTile = prevTileRecord.tile;

	                if ( prevTile.level <= cutoff || prevTile.beingDrawn ) {
	                    continue;
	                } else if ( !worstTile ) {
	                    worstTile       = prevTile;
	                    worstTileIndex  = i;
	                    worstTileRecord = prevTileRecord;
	                    continue;
	                }

	                prevTime    = prevTile.lastTouchTime;
	                worstTime   = worstTile.lastTouchTime;
	                prevLevel   = prevTile.level;
	                worstLevel  = worstTile.level;

	                if ( prevTime < worstTime ||
	                   ( prevTime == worstTime && prevLevel > worstLevel ) ) {
	                    worstTile       = prevTile;
	                    worstTileIndex  = i;
	                    worstTileRecord = prevTileRecord;
	                }
	            }

	            if ( worstTile && worstTileIndex >= 0 ) {
	                this._unloadTile(worstTileRecord);
	                insertionIndex = worstTileIndex;
	            }
	        }

	        this._tilesLoaded[ insertionIndex ] = new TileRecord({
	            tile: options.tile,
	            tiledImage: options.tiledImage
	        });
	    },

	    /**
	     * Clears all tiles associated with the specified tiledImage.
	     * @param {OpenSeadragon.TiledImage} tiledImage
	     */
	    clearTilesFor: function( tiledImage ) {
	        $.console.assert(tiledImage, '[TileCache.clearTilesFor] tiledImage is required');
	        var tileRecord;
	        for ( var i = 0; i < this._tilesLoaded.length; ++i ) {
	            tileRecord = this._tilesLoaded[ i ];
	            if ( tileRecord.tiledImage === tiledImage ) {
	                this._unloadTile(tileRecord);
	                this._tilesLoaded.splice( i, 1 );
	                i--;
	            }
	        }
	    },

	    // private
	    getImageRecord: function(url) {
	        $.console.assert(url, '[TileCache.getImageRecord] url is required');
	        return this._imagesLoaded[url];
	    },

	    // private
	    _unloadTile: function(tileRecord) {
	        $.console.assert(tileRecord, '[TileCache._unloadTile] tileRecord is required');
	        var tile = tileRecord.tile;
	        var tiledImage = tileRecord.tiledImage;

	        tile.unload();
	        tile.cacheImageRecord = null;

	        var imageRecord = this._imagesLoaded[tile.url];
	        imageRecord.removeTile(tile);
	        if (!imageRecord.getTileCount()) {
	            imageRecord.destroy();
	            delete this._imagesLoaded[tile.url];
	            this._imagesLoadedCount--;
	        }

	        /**
	         * Triggered when a tile has just been unloaded from memory.
	         *
	         * @event tile-unloaded
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the unloaded tile.
	         * @property {OpenSeadragon.Tile} tile - The tile which has been unloaded.
	         */
	        tiledImage.viewer.raiseEvent("tile-unloaded", {
	            tile: tile,
	            tiledImage: tiledImage
	        });
	    }
	};

	}( OpenSeadragon ));

	/*
	 * OpenSeadragon - World
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	(function( $ ){

	/**
	 * @class World
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @classdesc Keeps track of all of the tiled images in the scene.
	 * @param {Object} options - World options.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this World.
	 **/
	$.World = function( options ) {
	    var _this = this;

	    $.console.assert( options.viewer, "[World] options.viewer is required" );

	    $.EventSource.call( this );

	    this.viewer = options.viewer;
	    this._items = [];
	    this._needsDraw = false;
	    this._autoRefigureSizes = true;
	    this._needsSizesFigured = false;
	    this._delegatedFigureSizes = function(event) {
	        if (_this._autoRefigureSizes) {
	            _this._figureSizes();
	        } else {
	            _this._needsSizesFigured = true;
	        }
	    };

	    this._figureSizes();
	};

	$.extend( $.World.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.World.prototype */{
	    /**
	     * Add the specified item.
	     * @param {OpenSeadragon.TiledImage} item - The item to add.
	     * @param {Number} [options.index] - Index for the item. If not specified, goes at the top.
	     * @fires OpenSeadragon.World.event:add-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    addItem: function( item, options ) {
	        $.console.assert(item, "[World.addItem] item is required");
	        $.console.assert(item instanceof $.TiledImage, "[World.addItem] only TiledImages supported at this time");

	        options = options || {};
	        if (options.index !== undefined) {
	            var index = Math.max(0, Math.min(this._items.length, options.index));
	            this._items.splice(index, 0, item);
	        } else {
	            this._items.push( item );
	        }

	        if (this._autoRefigureSizes) {
	            this._figureSizes();
	        } else {
	            this._needsSizesFigured = true;
	        }

	        this._needsDraw = true;

	        item.addHandler('bounds-change', this._delegatedFigureSizes);

	        /**
	         * Raised when an item is added to the World.
	         * @event add-item
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item that has been added.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'add-item', {
	            item: item
	        } );
	    },

	    /**
	     * Get the item at the specified index.
	     * @param {Number} index - The item's index.
	     * @returns {OpenSeadragon.TiledImage} The item at the specified index.
	     */
	    getItemAt: function( index ) {
	        $.console.assert(index !== undefined, "[World.getItemAt] index is required");
	        return this._items[ index ];
	    },

	    /**
	     * Get the index of the given item or -1 if not present.
	     * @param {OpenSeadragon.TiledImage} item - The item.
	     * @returns {Number} The index of the item or -1 if not present.
	     */
	    getIndexOfItem: function( item ) {
	        $.console.assert(item, "[World.getIndexOfItem] item is required");
	        return $.indexOf( this._items, item );
	    },

	    /**
	     * @returns {Number} The number of items used.
	     */
	    getItemCount: function() {
	        return this._items.length;
	    },

	    /**
	     * Change the index of a item so that it appears over or under others.
	     * @param {OpenSeadragon.TiledImage} item - The item to move.
	     * @param {Number} index - The new index.
	     * @fires OpenSeadragon.World.event:item-index-change
	     */
	    setItemIndex: function( item, index ) {
	        $.console.assert(item, "[World.setItemIndex] item is required");
	        $.console.assert(index !== undefined, "[World.setItemIndex] index is required");

	        var oldIndex = this.getIndexOfItem( item );

	        if ( index >= this._items.length ) {
	            throw new Error( "Index bigger than number of layers." );
	        }

	        if ( index === oldIndex || oldIndex === -1 ) {
	            return;
	        }

	        this._items.splice( oldIndex, 1 );
	        this._items.splice( index, 0, item );
	        this._needsDraw = true;

	        /**
	         * Raised when the order of the indexes has been changed.
	         * @event item-index-change
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item whose index has
	         * been changed
	         * @property {Number} previousIndex - The previous index of the item
	         * @property {Number} newIndex - The new index of the item
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'item-index-change', {
	            item: item,
	            previousIndex: oldIndex,
	            newIndex: index
	        } );
	    },

	    /**
	     * Remove an item.
	     * @param {OpenSeadragon.TiledImage} item - The item to remove.
	     * @fires OpenSeadragon.World.event:remove-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    removeItem: function( item ) {
	        $.console.assert(item, "[World.removeItem] item is required");

	        var index = $.indexOf(this._items, item );
	        if ( index === -1 ) {
	            return;
	        }

	        item.removeHandler('bounds-change', this._delegatedFigureSizes);
	        item.destroy();
	        this._items.splice( index, 1 );
	        this._figureSizes();
	        this._needsDraw = true;
	        this._raiseRemoveItem(item);
	    },

	    /**
	     * Remove all items.
	     * @fires OpenSeadragon.World.event:remove-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    removeAll: function() {
	        // We need to make sure any pending images are canceled so the world items don't get messed up
	        this.viewer._cancelPendingImages();
	        var item;
	        for (var i = 0; i < this._items.length; i++) {
	            item = this._items[i];
	            item.removeHandler('bounds-change', this._delegatedFigureSizes);
	            item.destroy();
	        }

	        var removedItems = this._items;
	        this._items = [];
	        this._figureSizes();
	        this._needsDraw = true;

	        for (i = 0; i < removedItems.length; i++) {
	            item = removedItems[i];
	            this._raiseRemoveItem(item);
	        }
	    },

	    /**
	     * Clears all tiles and triggers updates for all items.
	     */
	    resetItems: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            this._items[i].reset();
	        }
	    },

	    /**
	     * Updates (i.e. animates bounds of) all items.
	     */
	    update: function() {
	        var animated = false;
	        for ( var i = 0; i < this._items.length; i++ ) {
	            animated = this._items[i].update() || animated;
	        }

	        return animated;
	    },

	    /**
	     * Draws all items.
	     */
	    draw: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            this._items[i].draw();
	        }

	        this._needsDraw = false;
	    },

	    /**
	     * @returns {Boolean} true if any items need updating.
	     */
	    needsDraw: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            if ( this._items[i].needsDraw() ) {
	                return true;
	            }
	        }
	        return this._needsDraw;
	    },

	    /**
	     * @returns {OpenSeadragon.Rect} The smallest rectangle that encloses all items, in viewport coordinates.
	     */
	    getHomeBounds: function() {
	        return this._homeBounds.clone();
	    },

	    /**
	     * To facilitate zoom constraints, we keep track of the pixel density of the
	     * densest item in the World (i.e. the item whose content size to viewport size
	     * ratio is the highest) and save it as this "content factor".
	     * @returns {Number} the number of content units per viewport unit.
	     */
	    getContentFactor: function() {
	        return this._contentFactor;
	    },

	    /**
	     * As a performance optimization, setting this flag to false allows the bounds-change event handler
	     * on tiledImages to skip calculations on the world bounds. If a lot of images are going to be positioned in
	     * rapid succession, this is a good idea. When finished, setAutoRefigureSizes should be called with true
	     * or the system may behave oddly.
	     * @param {Boolean} [value] The value to which to set the flag.
	     */
	    setAutoRefigureSizes: function(value) {
	        this._autoRefigureSizes = value;
	        if (value & this._needsSizesFigured) {
	            this._figureSizes();
	            this._needsSizesFigured = false;
	        }
	    },

	    /**
	     * Arranges all of the TiledImages with the specified settings.
	     * @param {Object} options - Specifies how to arrange.
	     * @param {Boolean} [options.immediately=false] - Whether to animate to the new arrangement.
	     * @param {String} [options.layout] - See collectionLayout in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.rows] - See collectionRows in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.columns] - See collectionColumns in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.tileSize] - See collectionTileSize in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.tileMargin] - See collectionTileMargin in {@link OpenSeadragon.Options}.
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    arrange: function(options) {
	        options = options || {};
	        var immediately = options.immediately || false;
	        var layout = options.layout || $.DEFAULT_SETTINGS.collectionLayout;
	        var rows = options.rows || $.DEFAULT_SETTINGS.collectionRows;
	        var columns = options.columns || $.DEFAULT_SETTINGS.collectionColumns;
	        var tileSize = options.tileSize || $.DEFAULT_SETTINGS.collectionTileSize;
	        var tileMargin = options.tileMargin || $.DEFAULT_SETTINGS.collectionTileMargin;
	        var increment = tileSize + tileMargin;
	        var wrap;
	        if (!options.rows && columns) {
	            wrap = columns;
	        } else {
	            wrap = Math.ceil(this._items.length / rows);
	        }
	        var x = 0;
	        var y = 0;
	        var item, box, width, height, position;

	        this.setAutoRefigureSizes(false);
	        for (var i = 0; i < this._items.length; i++) {
	            if (i && (i % wrap) === 0) {
	                if (layout === 'horizontal') {
	                    y += increment;
	                    x = 0;
	                } else {
	                    x += increment;
	                    y = 0;
	                }
	            }

	            item = this._items[i];
	            box = item.getBounds();
	            if (box.width > box.height) {
	                width = tileSize;
	            } else {
	                width = tileSize * (box.width / box.height);
	            }

	            height = width * (box.height / box.width);
	            position = new $.Point(x + ((tileSize - width) / 2),
	                y + ((tileSize - height) / 2));

	            item.setPosition(position, immediately);
	            item.setWidth(width, immediately);

	            if (layout === 'horizontal') {
	                x += increment;
	            } else {
	                y += increment;
	            }
	        }
	        this.setAutoRefigureSizes(true);
	    },

	    // private
	    _figureSizes: function() {
	        var oldHomeBounds = this._homeBounds ? this._homeBounds.clone() : null;
	        var oldContentSize = this._contentSize ? this._contentSize.clone() : null;
	        var oldContentFactor = this._contentFactor || 0;

	        if ( !this._items.length ) {
	            this._homeBounds = new $.Rect(0, 0, 1, 1);
	            this._contentSize = new $.Point(1, 1);
	            this._contentFactor = 1;
	        } else {
	            var bounds = this._items[0].getBounds();
	            this._contentFactor = this._items[0].getContentSize().x / bounds.width;
	            var left = bounds.x;
	            var top = bounds.y;
	            var right = bounds.x + bounds.width;
	            var bottom = bounds.y + bounds.height;
	            var box;
	            for ( var i = 1; i < this._items.length; i++ ) {
	                box = this._items[i].getBounds();
	                this._contentFactor = Math.max(this._contentFactor, this._items[i].getContentSize().x / box.width);
	                left = Math.min( left, box.x );
	                top = Math.min( top, box.y );
	                right = Math.max( right, box.x + box.width );
	                bottom = Math.max( bottom, box.y + box.height );
	            }

	            this._homeBounds = new $.Rect( left, top, right - left, bottom - top );
	            this._contentSize = new $.Point(this._homeBounds.width * this._contentFactor,
	                this._homeBounds.height * this._contentFactor);
	        }

	        if (this._contentFactor !== oldContentFactor || !this._homeBounds.equals(oldHomeBounds) ||
	                !this._contentSize.equals(oldContentSize)) {
	            /**
	             * Raised when the home bounds or content factor change.
	             * @event metrics-change
	             * @memberOf OpenSeadragon.World
	             * @type {object}
	             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent('metrics-change', {});
	        }
	    },

	    // private
	    _raiseRemoveItem: function(item) {
	        /**
	         * Raised when an item is removed.
	         * @event remove-item
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item's underlying item.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'remove-item', { item: item } );
	    }
	});

	}( OpenSeadragon ));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * This software was developed at the National Institute of Standards and
	 * Technology by employees of the Federal Government in the course of
	 * their official duties. Pursuant to title 17 Section 105 of the United
	 * States Code this software is not subject to copyright protection and is
	 * in the public domain. This software is an experimental system. NIST assumes
	 * no responsibility whatsoever for its use by other parties, and makes no
	 * guarantees, expressed or implied, about its quality, reliability, or
	 * any other characteristic. We would appreciate acknowledgement if the
	 * software is used.
	 */

	/**
	 *
	 * @author Antoine Vandecreme <antoine.vandecreme@nist.gov>
	 */
	(function() {

	    'use strict';

	    var $ = window.OpenSeadragon;
	    if (!$) {
	        $ = __webpack_require__(8);
	        if (!$) {
	            throw new Error('OpenSeadragon is missing.');
	        }
	    }
	    // Requires OpenSeadragon >=2.1
	    if (!$.version || $.version.major < 2 ||
	        $.version.major === 2 && $.version.minor < 1) {
	        throw new Error(
	            'Filtering plugin requires OpenSeadragon version >= 2.1');
	    }

	    $.Viewer.prototype.setFilterOptions = function(options) {
	        if (!this.filterPluginInstance) {
	            options = options || {};
	            options.viewer = this;
	            this.filterPluginInstance = new $.FilterPlugin(options);
	        } else {
	            setOptions(this.filterPluginInstance, options);
	        }
	    };

	    /**
	     * @class FilterPlugin
	     * @param {Object} options The options
	     * @param {OpenSeadragon.Viewer} options.viewer The viewer to attach this
	     * plugin to.
	     * @param {String} [options.loadMode='async'] Set to sync to have the filters
	     * applied synchronously. It will only work if the filters are all synchronous.
	     * Note that depending on how complex the filters are, it may also hang the browser.
	     * @param {Object[]} options.filters The filters to apply to the images.
	     * @param {OpenSeadragon.TiledImage[]} options.filters[x].items The tiled images
	     * on which to apply the filter.
	     * @param {function|function[]} options.filters[x].processors The processing
	     * function(s) to apply to the images. The parameters of this function are
	     * the context to modify and a callback to call upon completion.
	     */
	    $.FilterPlugin = function(options) {
	        options = options || {};
	        if (!options.viewer) {
	            throw new Error('A viewer must be specified.');
	        }
	        var self = this;
	        this.viewer = options.viewer;

	        this.viewer.addHandler('tile-loaded', tileLoadedHandler);
	        this.viewer.addHandler('tile-drawing', tileDrawingHandler);

	        // filterIncrement allows to determine whether a tile contains the
	        // latest filters results.
	        this.filterIncrement = 0;

	        setOptions(this, options);


	        function tileLoadedHandler(event) {
	            var processors = getFiltersProcessors(self, event.tiledImage);
	            if (processors.length === 0) {
	                return;
	            }
	            var tile = event.tile;
	            var image = event.image;
	            if (image !== null) {
	                var canvas = window.document.createElement('canvas');
	                canvas.width = image.width;
	                canvas.height = image.height;
	                var context = canvas.getContext('2d');
	                context.drawImage(image, 0, 0);
	                tile._renderedContext = context;
	                var callback = event.getCompletionCallback();
	                applyFilters(context, processors, callback);
	                tile._filterIncrement = self.filterIncrement;
	            }
	        }


	        function applyFilters(context, filtersProcessors, callback) {
	            if (callback) {
	                var currentIncrement = self.filterIncrement;
	                var callbacks = [];
	                for (var i = 0; i < filtersProcessors.length - 1; i++) {
	                    (function(i) {
	                        callbacks[i] = function() {
	                            // If the increment has changed, stop the computation
	                            // chain immediately.
	                            if (self.filterIncrement !== currentIncrement) {
	                                return;
	                            }
	                            filtersProcessors[i + 1](context, callbacks[i + 1]);
	                        };
	                    })(i);
	                }
	                callbacks[filtersProcessors.length - 1] = function() {
	                    // If the increment has changed, do not call the callback.
	                    // (We don't want OSD to draw an outdated tile in the canvas).
	                    if (self.filterIncrement !== currentIncrement) {
	                        return;
	                    }
	                    callback();
	                };
	                filtersProcessors[0](context, callbacks[0]);
	            } else {
	                for (var i = 0; i < filtersProcessors.length; i++) {
	                    filtersProcessors[i](context, function() {
	                    });
	                }
	            }
	        }

	        function tileDrawingHandler(event) {
	            var tile = event.tile;
	            var rendered = event.rendered;
	            if (rendered._filterIncrement === self.filterIncrement) {
	                return;
	            }
	            var processors = getFiltersProcessors(self, event.tiledImage);
	            if (processors.length === 0) {
	                if (rendered._originalImageData) {
	                    // Restore initial data.
	                    rendered.putImageData(rendered._originalImageData, 0, 0);
	                    delete rendered._originalImageData;
	                }
	                rendered._filterIncrement = self.filterIncrement;
	                return;
	            }

	            if (rendered._originalImageData) {
	                // The tile has been previously filtered (by another filter),
	                // restore it first.
	                rendered.putImageData(rendered._originalImageData, 0, 0);
	            } else {
	                rendered._originalImageData = rendered.getImageData(
	                    0, 0, rendered.canvas.width, rendered.canvas.height);
	            }

	            if (tile._renderedContext) {
	                if (tile._filterIncrement === self.filterIncrement) {
	                    var imgData = tile._renderedContext.getImageData(0, 0,
	                        tile._renderedContext.canvas.width,
	                        tile._renderedContext.canvas.height);
	                    rendered.putImageData(imgData, 0, 0);
	                    delete tile._renderedContext;
	                    delete tile._filterIncrement;
	                    rendered._filterIncrement = self.filterIncrement;
	                    return;
	                }
	                delete tile._renderedContext;
	                delete tile._filterIncrement;
	            }
	            applyFilters(rendered, processors);
	            rendered._filterIncrement = self.filterIncrement;
	        }
	    };

	    function setOptions(instance, options) {
	        options = options || {};
	        var filters = options.filters;
	        instance.filters = !filters ? [] :
	            $.isArray(filters) ? filters : [filters];
	        for (var i = 0; i < instance.filters.length; i++) {
	            var filter = instance.filters[i];
	            if (!filter.processors) {
	                throw new Error('Filter processors must be specified.');
	            }
	            filter.processors = $.isArray(filter.processors) ?
	                filter.processors : [filter.processors];
	        }
	        instance.filterIncrement++;

	        if (options.loadMode === 'sync') {
	            instance.viewer.forceRedraw();
	        } else {
	            var itemsToReset = [];
	            for (var i = 0; i < instance.filters.length; i++) {
	                var filter = instance.filters[i];
	                if (!filter.items) {
	                    itemsToReset = getAllItems(instance.viewer.world);
	                    break;
	                }
	                if ($.isArray(filter.items)) {
	                    for (var j = 0; j < filter.items.length; j++) {
	                        addItemToReset(filter.items[j], itemsToReset);
	                    }
	                } else {
	                    addItemToReset(filter.items, itemsToReset);
	                }
	            }
	            for (var i = 0; i < itemsToReset.length; i++) {
	                itemsToReset[i].reset();
	            }
	        }
	    }

	    function addItemToReset(item, itemsToReset) {
	        if (itemsToReset.indexOf(item) >= 0) {
	            throw new Error('An item can not have filters ' +
	                'assigned multiple times.');
	        }
	        itemsToReset.push(item);
	    }

	    function getAllItems(world) {
	        var result = [];
	        for (var i = 0; i < world.getItemCount(); i++) {
	            result.push(world.getItemAt(i));
	        }
	        return result;
	    }

	    function getFiltersProcessors(instance, item) {
	        if (instance.filters.length === 0) {
	            return [];
	        }

	        var globalProcessors = null;
	        for (var i = 0; i < instance.filters.length; i++) {
	            var filter = instance.filters[i];
	            if (!filter.items) {
	                globalProcessors = filter.processors;
	            } else if (filter.items === item ||
	                $.isArray(filter.items) && filter.items.indexOf(item) >= 0) {
	                return filter.processors;
	            }
	        }
	        return globalProcessors ? globalProcessors : [];
	    }

	    $.Filters = {
	        THRESHOLDING: function(threshold) {
	            if (threshold < 0 || threshold > 255) {
	                throw new Error('Threshold must be between 0 and 255.');
	            }
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    var r = pixels[i];
	                    var g = pixels[i + 1];
	                    var b = pixels[i + 2];
	                    var v = (r + g + b) / 3;
	                    pixels[i] = pixels[i + 1] = pixels[i + 2] =
	                        v < threshold ? 0 : 255;
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        BRIGHTNESS: function(adjustment) {
	            if (adjustment < -255 || adjustment > 255) {
	                throw new Error(
	                    'Brightness adjustment must be between -255 and 255.');
	            }
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    pixels[i] += adjustment;
	                    pixels[i + 1] += adjustment;
	                    pixels[i + 2] += adjustment;
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        CONTRAST: function(adjustment) {
	            if (adjustment < 0) {
	                throw new Error('Contrast adjustment must be positive.');
	            }
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    pixels[i] *= adjustment;
	                    pixels[i + 1] *= adjustment;
	                    pixels[i + 2] *= adjustment;
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        GAMMA: function(adjustment) {
	            if (adjustment < 0) {
	                throw new Error('Gamma adjustment must be positive.');
	            }
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    pixels[i] = Math.pow(pixels[i] / 255, adjustment) * 255;
	                    pixels[i + 1] =
	                        Math.pow(pixels[i + 1] / 255, adjustment) * 255;
	                    pixels[i + 2] =
	                        Math.pow(pixels[i + 2] / 255, adjustment) * 255;
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        GREYSCALE: function() {
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    var val = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
	                    pixels[i] = val;
	                    pixels[i + 1] = val;
	                    pixels[i + 2] = val;
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        INVERT: function() {
	            return function(context, callback) {
	                var imgData = context.getImageData(
	                    0, 0, context.canvas.width, context.canvas.height);
	                var pixels = imgData.data;
	                for (var i = 0; i < pixels.length; i += 4) {
	                    pixels[i] = 255 - pixels[i];
	                    pixels[i + 1] = 255 - pixels[i + 1];
	                    pixels[i + 2] = 255 - pixels[i + 2];
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        MORPHOLOGICAL_OPERATION: function(kernelSize, comparator) {
	            if (kernelSize % 2 === 0) {
	                throw new Error('The kernel size must be an odd number.');
	            }
	            var kernelHalfSize = Math.floor(kernelSize / 2);

	            if (!comparator) {
	                throw new Error('A comparator must be defined.');
	            }

	            return function(context, callback) {
	                var width = context.canvas.width;
	                var height = context.canvas.height;
	                var imgData = context.getImageData(0, 0, width, height);
	                var originalPixels = context.getImageData(0, 0, width, height)
	                    .data;
	                var offset;

	                for (var y = 0; y < height; y++) {
	                    for (var x = 0; x < width; x++) {
	                        offset = (y * width + x) * 4;
	                        var r = originalPixels[offset];
	                        var g = originalPixels[offset + 1];
	                        var b = originalPixels[offset + 2];
	                        for (var j = 0; j < kernelSize; j++) {
	                            for (var i = 0; i < kernelSize; i++) {
	                                var pixelX = x + i - kernelHalfSize;
	                                var pixelY = y + j - kernelHalfSize;
	                                if (pixelX >= 0 && pixelX < width &&
	                                    pixelY >= 0 && pixelY < height) {
	                                    offset = (pixelY * width + pixelX) * 4;
	                                    r = comparator(originalPixels[offset], r);
	                                    g = comparator(
	                                        originalPixels[offset + 1], g);
	                                    b = comparator(
	                                        originalPixels[offset + 2], b);
	                                }
	                            }
	                        }
	                        imgData.data[offset] = r;
	                        imgData.data[offset + 1] = g;
	                        imgData.data[offset + 2] = b;
	                    }
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
	        CONVOLUTION: function(kernel) {
	            if (!$.isArray(kernel)) {
	                throw new Error('The kernel must be an array.');
	            }
	            var kernelSize = Math.sqrt(kernel.length);
	            if ((kernelSize + 1) % 2 !== 0) {
	                throw new Error('The kernel must be a square matrix with odd' +
	                    'width and height.');
	            }
	            var kernelHalfSize = (kernelSize - 1) / 2;

	            return function(context, callback) {
	                var width = context.canvas.width;
	                var height = context.canvas.height;
	                var imgData = context.getImageData(0, 0, width, height);
	                var originalPixels = context.getImageData(0, 0, width, height)
	                    .data;
	                var offset;

	                for (var y = 0; y < height; y++) {
	                    for (var x = 0; x < width; x++) {
	                        var r = 0;
	                        var g = 0;
	                        var b = 0;
	                        for (var j = 0; j < kernelSize; j++) {
	                            for (var i = 0; i < kernelSize; i++) {
	                                var pixelX = x + i - kernelHalfSize;
	                                var pixelY = y + j - kernelHalfSize;
	                                if (pixelX >= 0 && pixelX < width &&
	                                    pixelY >= 0 && pixelY < height) {
	                                    offset = (pixelY * width + pixelX) * 4;
	                                    var weight = kernel[j * kernelSize + i];
	                                    r += originalPixels[offset] * weight;
	                                    g += originalPixels[offset + 1] * weight;
	                                    b += originalPixels[offset + 2] * weight;
	                                }
	                            }
	                        }
	                        offset = (y * width + x) * 4;
	                        imgData.data[offset] = r;
	                        imgData.data[offset + 1] = g;
	                        imgData.data[offset + 2] = b;
	                    }
	                }
	                context.putImageData(imgData, 0, 0);
	                callback();
	            };
	        },
        COLORMAP: function(cmap, ctr) {
          var resampledCmap = cmap.slice(0);
          var diff = 255 - ctr;
          for(var i = 0; i < 256; i++) {
            var position = 0;
            if(i > ctr) {
              position = Math.min((i - ctr) / diff * 128 + 128,255) | 0;
            }else{
              position = Math.max(0, i / (ctr / 128)) | 0;
            }
            resampledCmap[i] = cmap[position];
          }
          return function(context, callback) {
            var imgData = context.getImageData(
              0, 0, context.canvas.width, context.canvas.height);
            var pxl = imgData.data;
            for (var i = 0; i < pxl.length; i += 4) {
              var v = (pxl[i] + pxl[i + 1] + pxl[i + 2]) / 3 | 0;
              var c = resampledCmap[v];
              pxl[i] = c[0];
              pxl[i + 1] = c[1];
              pxl[i + 2] = c[2];
            }
            context.putImageData(imgData, 0, 0);
            callback();
          };
        }
	    };

	}());


/***/ }
/******/ ]);
